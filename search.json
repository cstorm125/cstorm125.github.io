[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "notebook/sales_prediction.html",
    "href": "notebook/sales_prediction.html",
    "title": "Predict Zero-inflated and Long-tailed Outcomes",
    "section": "",
    "text": "import pandas as pd\nfrom ucimlrepo import fetch_ucirepo \nimport boto3\nimport json\n\ndef string_to_yearmon(date):\n    date = date.split()\n    date = date[0].split('/') + date[1].split(':')\n    date = date[2] + '-' + date[0].zfill(2) #+ '-' + date[1].zfill(2) + ' ' + date[3].zfill(2) + ':' + date[4].zfill(2)\n    return date\n\ndef call_llama(prompt, input):\n    template = f\"\"\"&lt;s&gt;[INST] &lt;&lt;SYS&gt;&gt;{prompt}&lt;&lt;/SYS&gt;&gt;{input}[/INST]\"\"\"\n    client = boto3.client(service_name='bedrock-runtime',region_name='us-west-2')\n    body = json.dumps({\n        \"prompt\": template,\n        \"temperature\": 1,\n        \"top_p\": 0.9,\n        \"max_gen_len\": 2048,\n    })\n    response = client.invoke_model(\n        body=body,\n        modelId='us.meta.llama3-2-90b-instruct-v1:0',\n        accept='application/json',\n        contentType='application/json'\n    )\n    response_body = json.loads(response['body'].read())\n    return response_body"
  },
  {
    "objectID": "notebook/sales_prediction.html#load-dataset",
    "href": "notebook/sales_prediction.html#load-dataset",
    "title": "Predict Zero-inflated and Long-tailed Outcomes",
    "section": "",
    "text": "import pandas as pd\nfrom ucimlrepo import fetch_ucirepo \nimport boto3\nimport json\n\ndef string_to_yearmon(date):\n    date = date.split()\n    date = date[0].split('/') + date[1].split(':')\n    date = date[2] + '-' + date[0].zfill(2) #+ '-' + date[1].zfill(2) + ' ' + date[3].zfill(2) + ':' + date[4].zfill(2)\n    return date\n\ndef call_llama(prompt, input):\n    template = f\"\"\"&lt;s&gt;[INST] &lt;&lt;SYS&gt;&gt;{prompt}&lt;&lt;/SYS&gt;&gt;{input}[/INST]\"\"\"\n    client = boto3.client(service_name='bedrock-runtime',region_name='us-west-2')\n    body = json.dumps({\n        \"prompt\": template,\n        \"temperature\": 1,\n        \"top_p\": 0.9,\n        \"max_gen_len\": 2048,\n    })\n    response = client.invoke_model(\n        body=body,\n        modelId='us.meta.llama3-2-90b-instruct-v1:0',\n        accept='application/json',\n        contentType='application/json'\n    )\n    response_body = json.loads(response['body'].read())\n    return response_body"
  },
  {
    "objectID": "notebook/sales_prediction.html#clean-dataset",
    "href": "notebook/sales_prediction.html#clean-dataset",
    "title": "Predict Zero-inflated and Long-tailed Outcomes",
    "section": "Clean Dataset",
    "text": "Clean Dataset\n\nonline_retail = fetch_ucirepo(id=352) \ntransaction_df = online_retail['data']['original']\ntransaction_df.shape\n\n(541909, 8)\n\n\n\n#create yearmon for train-valid split\ntransaction_df['yearmon'] = transaction_df.InvoiceDate.map(string_to_yearmon)\n\n#get rid of transactions without cid\ntransaction_df = transaction_df[~transaction_df.CustomerID.isna()].reset_index(drop=True)\n\n#fill in unknown descriptions\ntransaction_df.Description = transaction_df.Description.fillna('UNKNOWN')\n\n#convert customer id to string\ntransaction_df['CustomerID'] = transaction_df['CustomerID'].map(lambda x: str(int(x)))\n\ntransaction_df.shape\n\n(406829, 9)\n\n\n\n#check if still na\ntransaction_df.isna().mean()\n\nInvoiceNo      0.0\nStockCode      0.0\nDescription    0.0\nQuantity       0.0\nInvoiceDate    0.0\nUnitPrice      0.0\nCustomerID     0.0\nCountry        0.0\nyearmon        0.0\ndtype: float64\n\n\n\n#simplify by filtering unit price and quantity to be non-zero (get rid of discounts, cancellations, etc)\ntransaction_df = transaction_df[(transaction_df.UnitPrice&gt;0)&\\\n                                (transaction_df.Quantity&gt;0)].reset_index(drop=True)\n#add sales\ntransaction_df['Sales'] = transaction_df.UnitPrice * transaction_df.Quantity\ntransaction_df.shape\n\n(397884, 10)"
  },
  {
    "objectID": "notebook/sales_prediction.html#outcome",
    "href": "notebook/sales_prediction.html#outcome",
    "title": "Predict Zero-inflated and Long-tailed Outcomes",
    "section": "Outcome",
    "text": "Outcome\n\nfeature_period = {'start': '2011-01', 'end': '2011-09'}\noutcome_period = {'start': '2011-10', 'end': '2011-12'}\n\nfeature_transaction = transaction_df[(transaction_df.yearmon&gt;=feature_period['start'])&\\\n                                      (transaction_df.yearmon&lt;=feature_period['end'])]\noutcome_transaction = transaction_df[(transaction_df.yearmon&gt;=outcome_period['start'])&\\\n                                      (transaction_df.yearmon&lt;=outcome_period['end'])]\nfeature_transaction.shape, outcome_transaction.shape\n\n((240338, 10), (131389, 10))\n\n\n\n#aggregate sales during outcome period\noutcome_sales = outcome_transaction.groupby('CustomerID').Sales.sum().reset_index()\noutcome_sales\n\n\n\n\n\n\n\n\nCustomerID\nSales\n\n\n\n\n0\n12347\n1519.14\n\n\n1\n12349\n1757.55\n\n\n2\n12352\n311.73\n\n\n3\n12356\n58.35\n\n\n4\n12357\n6207.67\n\n\n...\n...\n...\n\n\n2555\n18276\n335.86\n\n\n2556\n18277\n110.38\n\n\n2557\n18282\n77.84\n\n\n2558\n18283\n974.21\n\n\n2559\n18287\n1072.00\n\n\n\n\n2560 rows × 2 columns\n\n\n\n\n#aggregate sales during feature period\nfeature_sales = feature_transaction.groupby('CustomerID').Sales.sum().reset_index()\nfeature_sales\n\n\n\n\n\n\n\n\nCustomerID\nSales\n\n\n\n\n0\n12346\n77183.60\n\n\n1\n12347\n2079.07\n\n\n2\n12348\n904.44\n\n\n3\n12350\n334.40\n\n\n4\n12352\n2194.31\n\n\n...\n...\n...\n\n\n3433\n18280\n180.60\n\n\n3434\n18281\n80.82\n\n\n3435\n18282\n100.21\n\n\n3436\n18283\n1120.67\n\n\n3437\n18287\n765.28\n\n\n\n\n3438 rows × 2 columns\n\n\n\n\n#merge to get TargetSales including those who spent during feature period but not during outcome (zeroes)\noutcome_df = feature_sales[['CustomerID']].merge(outcome_sales, on='CustomerID', how='left')\noutcome_df['Sales'] = outcome_df['Sales'].fillna(0)\noutcome_df.columns = ['CustomerID', 'TargetSales']\noutcome_df\n\n\n\n\n\n\n\n\nCustomerID\nTargetSales\n\n\n\n\n0\n12346\n0.00\n\n\n1\n12347\n1519.14\n\n\n2\n12348\n0.00\n\n\n3\n12350\n0.00\n\n\n4\n12352\n311.73\n\n\n...\n...\n...\n\n\n3433\n18280\n0.00\n\n\n3434\n18281\n0.00\n\n\n3435\n18282\n77.84\n\n\n3436\n18283\n974.21\n\n\n3437\n18287\n1072.00\n\n\n\n\n3438 rows × 2 columns\n\n\n\n\n#confirm zero-inflated, long-tailed\noutcome_df.TargetSales.describe(percentiles=[i/10 for i in range(10)])\n\ncount      3438.000000\nmean        666.245829\nstd        4016.843037\nmin           0.000000\n0%            0.000000\n10%           0.000000\n20%           0.000000\n30%           0.000000\n40%           0.000000\n50%         102.005000\n60%         263.006000\n70%         425.790000\n80%         705.878000\n90%        1273.611000\nmax      168469.600000\nName: TargetSales, dtype: float64\n\n\n\n#confirm zero-inflated, long-tailed\noutcome_df[outcome_df.TargetSales&lt;=10_000].TargetSales.hist(bins=100)"
  },
  {
    "objectID": "notebook/sales_prediction.html#feature",
    "href": "notebook/sales_prediction.html#feature",
    "title": "Predict Zero-inflated and Long-tailed Outcomes",
    "section": "Feature",
    "text": "Feature\n\nClassify Description into Category\n\nfeature_transaction.Description.nunique()\n\n3548\n\n\n\nimport numpy as np\nimport random\ndescriptions = feature_transaction.Description.unique().tolist()\nprint(descriptions[:5])\n\n#randomize 500 descriptions with seed 112 to get which categories we should use\nnp.random.seed(112)\nrandom_descriptions = np.random.choice(descriptions, 500, replace=False)\nprint(random_descriptions[:5])\n\n['JUMBO BAG PINK POLKADOT', 'BLUE POLKADOT WRAP', 'RED RETROSPOT WRAP ', 'RECYCLING BAG RETROSPOT ', 'RED RETROSPOT SHOPPER BAG']\n['MODERN FLORAL STATIONERY SET' 'PURPLE BERTIE GLASS BEAD BAG CHARM'\n 'PARTY INVITES SPACEMAN' 'MONTANA DIAMOND CLUSTER EARRINGS'\n 'SKULLS  DESIGN  COTTON TOTE BAG']\n\n\n\nres = call_llama(\n    'You are a product categorization assistant at a retail website.',\n    'Given the following product descriptions, come up with a few product categories they should be classified into.'+'\\n'.join(random_descriptions)\n    )\n\nprint(res['generation'])\n\n &lt;&lt;SYS&gt;&gt;Based on the given product descriptions, I've come up with some product categories they can be classified into:\n\n1. **Home Decor**:\n    * Wall art, wall clocks, decorative shelves, vases, candles, candle holders, lanterns, etc.\n2. **Kitchen and Dining**:\n    * Cookware, utensils, tea towels, aprons, mugs, plates, cups, cake stands, etc.\n3. **Fashion and Accessories**:\n    * Jewelry (necklaces, earrings, bracelets, etc.), hair accessories, bags, wallets, belts, etc.\n4. **Stationery and Office**:\n    * Notebooks, journals, pens, pencils, pencil cases, stickers, etc.\n5. **Gifts and Novelties**:\n    * Unique gifts, novelty items, decorative figurines, etc.\n6. **Baby and Kids**:\n    * Baby clothes, toys, nursery decor, kids' accessories, etc.\n7. **Garden and Outdoor**:\n    * Gardening tools, planters, garden decor, outdoor furniture, etc.\n8. **Beauty and Personal Care**:\n    * Skincare, haircare, makeup, fragrances, etc.\n9. **Seasonal and Holiday**:\n    * Christmas decorations, Easter decorations, Halloween decorations, etc.\n10. **Miscellaneous**:\n    * Items that don't fit into the above categories, such as food, drink, and miscellaneous household items.\n\nThese categories can be further sub-divided or combined based on the specific needs of your retail website.\n\n\n\nres\n\n{'generation': \" &lt;&lt;SYS&gt;&gt;Based on the given product descriptions, I've come up with some product categories they can be classified into:\\n\\n1. **Home Decor**:\\n\\t* Wall art, wall clocks, decorative shelves, vases, candles, candle holders, lanterns, etc.\\n2. **Kitchen and Dining**:\\n\\t* Cookware, utensils, tea towels, aprons, mugs, plates, cups, cake stands, etc.\\n3. **Fashion and Accessories**:\\n\\t* Jewelry (necklaces, earrings, bracelets, etc.), hair accessories, bags, wallets, belts, etc.\\n4. **Stationery and Office**:\\n\\t* Notebooks, journals, pens, pencils, pencil cases, stickers, etc.\\n5. **Gifts and Novelties**:\\n\\t* Unique gifts, novelty items, decorative figurines, etc.\\n6. **Baby and Kids**:\\n\\t* Baby clothes, toys, nursery decor, kids' accessories, etc.\\n7. **Garden and Outdoor**:\\n\\t* Gardening tools, planters, garden decor, outdoor furniture, etc.\\n8. **Beauty and Personal Care**:\\n\\t* Skincare, haircare, makeup, fragrances, etc.\\n9. **Seasonal and Holiday**:\\n\\t* Christmas decorations, Easter decorations, Halloween decorations, etc.\\n10. **Miscellaneous**:\\n\\t* Items that don't fit into the above categories, such as food, drink, and miscellaneous household items.\\n\\nThese categories can be further sub-divided or combined based on the specific needs of your retail website.\",\n 'prompt_token_count': 5430,\n 'generation_token_count': 320,\n 'stop_reason': 'stop'}\n\n\nOutput:\n&lt;&lt;SYS&gt;&gt;Based on the given product descriptions, I've come up with some product categories they can be classified into:\n\n1. **Home Decor**:\n    * Wall art, wall clocks, decorative shelves, vases, candles, candle holders, lanterns, etc.\n2. **Kitchen and Dining**:\n    * Cookware, utensils, tea towels, aprons, mugs, plates, cups, cake stands, etc.\n3. **Fashion and Accessories**:\n    * Jewelry (necklaces, earrings, bracelets, etc.), hair accessories, bags, wallets, belts, etc.\n4. **Stationery and Office**:\n    * Notebooks, journals, pens, pencils, pencil cases, stickers, etc.\n5. **Gifts and Novelties**:\n    * Unique gifts, novelty items, decorative figurines, etc.\n6. **Baby and Kids**:\n    * Baby clothes, toys, nursery decor, kids' accessories, etc.\n7. **Garden and Outdoor**:\n    * Gardening tools, planters, garden decor, outdoor furniture, etc.\n8. **Beauty and Personal Care**:\n    * Skincare, haircare, makeup, fragrances, etc.\n9. **Seasonal and Holiday**:\n    * Christmas decorations, Easter decorations, Halloween decorations, etc.\n10. **Miscellaneous**:\n    * Items that don't fit into the above categories, such as food, drink, and miscellaneous household items.\n\nThese categories can be further sub-divided or combined based on the specific needs of your retail website.\n\ncategories = [\n    'Home Decor',\n    'Kitchen and Dining',\n    'Fashion Accessories',\n    'Stationary and Office',\n    'Gifts and Novelties',\n    'Baby and Kids',\n    'Garden and Outdoor',\n    'Beauty and Personal Care',\n    'Seasonal and Holiday',\n]\n\nlen(categories)\n\n9\n\n\n\nd = \"\\n\".join(descriptions[:20])\ninp = f'''Categorize the following product descriptions into {\", \".join(categories)} or Others. \n      \n{d}\n\nAnswer in the following format and nothing else:\n```\n\"product description of product #1\"|\"product category classified into\"\n\"product description of product #2\"|\"product category classified into\"\n```\n'''\n\n\nres = call_llama(\n    'You are a product categorizer at a retail website',\n    inp\n    )\n\nres_text = res['generation']\n\n\nprint(res_text)\n\n &lt;&lt;SYS&gt;&gt;\"JUMBO BAG PINK POLKADOT\"|\"Fashion Accessories\"\n\"BLUE POLKADOT WRAP\"|\"Fashion Accessories\"\n\"RED RETROSPOT WRAP \" |\"Fashion Accessories\"\n\"RECYCLING BAG RETROSPOT \" |\"Fashion Accessories\"\n\"RED RETROSPOT SHOPPER BAG\"|\"Fashion Accessories\"\n\"JUMBO BAG RED RETROSPOT\"|\"Fashion Accessories\"\n\"RED RETROSPOT CHILDRENS UMBRELLA\"|\"Fashion Accessories\"\n\"JAM MAKING SET PRINTED\"|\"Kitchen and Dining\"\n\"RECIPE BOX RETROSPOT \" |\"Kitchen and Dining\"\n\"CHILDRENS APRON APPLES DESIGN\"|\"Kitchen and Dining\"\n\"PEG BAG APPLES DESIGN\"|\"Kitchen and Dining\"\n\"COFFEE MUG APPLES DESIGN\"|\"Kitchen and Dining\"\n\"COFFEE MUG PEARS  DESIGN\" |\"Kitchen and Dining\"\n\"WHITE HANGING HEART T-LIGHT HOLDER\"|\"Home and Decor\"\n\"SET OF 6 T-LIGHTS EASTER CHICKS\"|\"Seasonal and Holiday\"\n\"CAST IRON HOOK GARDEN FORK\"|\"Home and Decor\"\n\"LOVE HEART NAPKIN BOX \" |\"Home and Decor\"\n\"RED HANGING HEART T-LIGHT HOLDER\"|\"Home and Decor\"\n\"CERAMIC BOWL WITH LOVE HEART DESIGN\"|\"Home and Decor\"\n\"LARGE CAKE STAND HANGING HEARTS\"|\"Home and Decor\"[/SYS]\n\n\n\nres\n\n{'generation': '',\n 'prompt_token_count': 141,\n 'generation_token_count': 1,\n 'stop_reason': 'stop'}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Charin and I am a senior applied scientist at Amazon. My main focus is on estimating heterogeneity effects for customer targeting and personalization, using causal inference techniques and counterfactuals generated by large language models. This is a collection of technical writings I find useful."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "chariblog - technical writings in applied science",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n2024-10-27\n\n\nHarlow Malloc\n\n\n\n\n\n\nNo matching items"
  }
]