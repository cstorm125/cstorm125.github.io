{
  "hash": "5487a104c564f53ee5faec7629c1e941",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"AI Builders Survey 2025: What Five Years of Teaching Kids to Build Good AI Looks Like\"\nauthor: \"cstorm125\"\ndate: \"2025-07-21\"\ncategories: [ai-builders, education, survey]\nimage: \"featured_image.jpg\"\nsidebar:\n  contents: auto\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n[AI Builders](https://ai-builders.github.io/) is a 10-week, online program that teaches middle-to-high school students in Thailand to create an ML project they can be proud of. Every year, we select 40-60 students from 500+ applicants to participate in our intensive project development regimen. We start off with an orientation session and ice-breaking in the first week. Then, students are divided into 10-12 groups of 4-6 people with a mentor and teaching assistant responsbile. Each week, they learn from [an online lesson](https://github].com/ai-builders/curriculum/), including videos and notebooks, and apply those freshly learned skills to work on their capstone project. At 7pm every Wednesday, students attend a one-to-two-hour long session with their mentors and teaching assistants to consult on the progress of their projects. Repeat this for 8 weeks and in the last week we [score them](https://ai-builders.github.io/orientation-2025/) according to problem statement (15), metrics and baselines (15), data collection and cleaning (15), exploratory data analysis (20), modeling and error analysis (20), and deployment (15). Students need to score at least 70 points overall and not a single zero-scored criterion to pass.\n\nAs we reach our half-decade milestone, we would like to shed some lights on our students based on both our student roster (their performance during the program) and a survey distributed in July, 2025 (their performance after the program).\n\n::: {#13216723 .cell execution_count=1}\n``` {.python .cell-code}\nimport logging\nlogging.getLogger('matplotlib.font_manager').setLevel(logging.ERROR)\n\nsurvey_fname = '/Users/charipol/Work/admin/data/student_survey/aib2025_student_survey.csv'\nroster_fname = '/Users/charipol/Work/admin/data/student_roster/aib2025_student_roster_master.csv'\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom scipy import stats\nfrom statsmodels.stats.power import NormalIndPower\nfrom plotnine import *\nfrom mizani.formatters import *\nfrom itertools import product\n\ndef proportion_z_test(x1, n1, x2, n2, effect_size_alt=None, alpha=0.05, alternative='two-sided'):\n    \"\"\"\n    Performs a Z-test for the difference between two population proportions\n    and calculates the statistical power of the test if an effect size is provided.\n\n    Args:\n        x1 (int): Number of positives (successes) in sample 1.\n        n1 (int): Total number of samples (trials) in group 1.\n        x2 (int): Number of positives (successes) in sample 2.\n        n2 (int): Total number of samples (trials) in group 2.\n        effect_size_alt (float, optional): Directly specifies the effect size (Cohen's h)\n                                           for power calculation. If None, power is not calculated.\n        alpha (float, optional): Significance level (Type I error rate) for power calculation.\n                                 Defaults to 0.05.\n        alternative (str, optional): Defines the alternative hypothesis for both the Z-test\n                                     and power calculation. Can be 'two-sided', 'less', or 'greater'.\n                                     Defaults to 'two-sided'.\n\n    Returns:\n        tuple: A tuple containing:\n            - z_statistic (float): The calculated Z-statistic.\n            - p_value (float): The p-value corresponding to the chosen alternative.\n            - power (float or None): The calculated statistical power. None if effect_size_alt\n                                     is not provided, or if calculation isn't possible.\n    \"\"\"\n\n    # Validate alternative argument\n    if alternative not in ['two-sided', 'less', 'greater']:\n        raise ValueError(\"alternative must be 'two-sided', 'less', or 'greater'\")\n\n    # Calculate sample proportions\n    p1_hat = x1 / n1\n    p2_hat = x2 / n2\n\n    # Calculate the pooled proportion\n    p_pooled = (x1 + x2) / (n1 + n2)\n\n    # Calculate the standard error of the difference\n    try:\n        if p_pooled == 0 or p_pooled == 1:\n            se_difference = 0.0\n        else:\n            se_difference = np.sqrt(p_pooled * (1 - p_pooled) * (1/n1 + 1/n2))\n    except ZeroDivisionError:\n        return np.nan, np.nan, np.nan\n\n    if se_difference == 0:\n        return np.nan, np.nan, np.nan\n\n    # Calculate the Z-statistic\n    z_statistic = (p1_hat - p2_hat) / se_difference\n\n    # Calculate the p-value based on the alternative hypothesis\n    if alternative == 'two-sided':\n        p_value = 2 * (1 - stats.norm.cdf(abs(z_statistic)))\n    elif alternative == 'greater':\n        p_value = 1 - stats.norm.cdf(z_statistic)\n    elif alternative == 'less':\n        p_value = stats.norm.cdf(z_statistic)\n\n    # Calculate power if an effect size is provided\n    power = None\n    if effect_size_alt is not None:\n        try:\n            # Use NormalIndPower for power calculation of Z-tests\n            power_calculator = NormalIndPower()\n            power = power_calculator.solve_power(\n                effect_size=effect_size_alt, # Directly use the provided effect_size_alt\n                nobs1=n1,\n                alpha=alpha,\n                power=None, # We want to solve for power\n                ratio=n2/n1, # Ratio of sample sizes (n2 / n1)\n                alternative=alternative # Use the chosen alternative for power calc\n            )\n        except Exception as e:\n            print(f\"Warning: Could not calculate power. Error: {e}\")\n            power = np.nan\n\n    return z_statistic, p_value, power\n\nroster_df = pd.read_csv(roster_fname)\nsurvey_df = pd.read_csv(survey_fname)\n```\n:::\n\n\n![featured_image](featured_image.jpg)\n\n## What We Learned from Our Student Roster\n\nFrom 2021 to 2025, AI Builders had 214 students attended the program, of which 170 (79.4%) have passed our criteria and successfully graduated.\n\n### Study Level\n\nWhen we started the official AI Builders in 2021, we expected high school students to be our target audience but a not-so-small portion (about 10%) of students turn out to be middle schoolers and below (our very first Judge's Award was to [GemmyTheGeek](https://github.com/GemmyTheGeek/FoodyDudy), a sixth grader at the time).\n\n::: {#1a034ee3 .cell execution_count=2}\n``` {.python .cell-code}\n#study level \nd = roster_df.study_level.value_counts(normalize=True).reset_index()\nd['study_level'] = d['study_level'].astype(int)\n\ng = (ggplot(d, aes(x='study_level', y='proportion'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        aes(label=after_stat('y * 100')), # Label the actual percentage value\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n        format_string='{:.1f}%' # Format to one decimal place and add '%'\n    )\n     + xlab('Secondary School Grade') + ylab('Percentage of Students') \n     + ggtitle('Secondary Grades When Starting Program')\n     + scale_y_continuous(labels=percent_format())\n     + scale_x_continuous(breaks = [i for i in range(1,7)])\n     + theme_xkcd()\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### Location\n\nSpring of 2021 was an unusual time where physically organizing a summer school was out-of-question. We took a conscious decision to make AI Builders 100% online in order to accommodate students outside of Bangkok Metropolitan Area (Bangkok, Nonthaburi, Nakhon Pathom, Pathum Thani, Samut Prakarn, and Samut Sakorn). As of [the 2019 census](https://www.citypopulation.de/en/thailand/prov/admin/), Bangkok Metropolian Area is over six times larger than the second-largest city Nakhon Ratchasima. This primate city issue represents uneven distribution of resources especially in education.\n\n::: {#dd6cae4f .cell execution_count=3}\n``` {.python .cell-code}\n#bangkok vs non-bangkok\ngreater_bangkok = ['กรุงเทพมหานคร','นนทบุรี','นครปฐม','ปทุมธานี','สมุทรปราการ','สมุทรสาคร']\nroster_df['province_grouped'] = roster_df.province.map(lambda x: 'กรุงเทพฯและปริมณฑล' if x in greater_bangkok else x)\nroster_df['is_greater_bangkok'] = roster_df.province_grouped.map(lambda x: 1 if x=='กรุงเทพฯและปริมณฑล' else 0)\nd = roster_df.province_grouped.value_counts(normalize=True).reset_index()\n```\n:::\n\n\nThe online format has allowed 38.3% of students to join from non-Bangkok provinces (see full list in Appendix), a feat that would not have been possible with offline format and our limited resources.\n\nHowever, we found a statistically significant lower pass rate for non-Bangkok students. This points towards room for growth in terms of supporting students outside of Bangkok Metropolitan Area.\n\n::: {#9f86707b .cell execution_count=4}\n``` {.python .cell-code}\n#discrepancies in pass rate by location\nd = roster_df.groupby('is_greater_bangkok').agg({\n    'student_name': ['count'],\n    'passed': ['sum'],\n}).reset_index()\nd.columns = ['is_greater_bangkok','nb_student','nb_passed']#,'pct_passed']\nd_m = d.melt(id_vars='is_greater_bangkok')\nd_m.columns = ['is_greater_bangkok','Pass/Total','value']\nd_m['is_greater_bangkok'] = d_m['is_greater_bangkok'].map(lambda x: 'Bangkok Metropolitan' if x==1 else 'Other Provinces')\nd_m['Pass/Total'] = d_m['Pass/Total'].map(lambda x: 'Passed' if x=='nb_passed' else 'Total')\np = roster_df.groupby('is_greater_bangkok').passed.mean().reset_index()\np['is_greater_bangkok'] = p['is_greater_bangkok'].map(lambda x: 'Bangkok Metropolitan' if x==1 else 'Other Provinces')\np.columns = ['is_greater_bangkok','pass_rate']\nd_m_merged = pd.merge(d_m, p, on='is_greater_bangkok', how='left')\n\n#hypothesis test for pass rate among bangkok vs non-bangkok; lacking quite a bit of power\nz,p_value,power = proportion_z_test(x1=64,n1=89,x2=107,n2=125,\n                  effect_size_alt=0.1,\n                  alpha=0.05, \n                  alternative='two-sided')\nz,p_value,power\n\ng = (ggplot(d_m_merged, aes(x='is_greater_bangkok', y='value', fill='Pass/Total'))\n     + geom_col(position='dodge')\n    + geom_text(\n        d_m_merged[d_m_merged['Pass/Total'] == 'Passed'],\n        aes(x='is_greater_bangkok', y='value', label='pass_rate * 100'),\n        nudge_y=1,\n        va='bottom', \n        format_string='{:.1f}%',)\n     + xlab('Location') + ylab('Number of Students')\n     + ggtitle(f'Students from Bangkok Metro Have Higher Pass Rate \\n p-value = {p_value:.3f}; power = {100*power:.1f}%')\n     + scale_fill_manual(values={'Passed':'darkred', 'Total':'grey'})\n     + theme_xkcd()\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### Biological Sex\n\n::: {#a920ba5e .cell execution_count=5}\n``` {.python .cell-code}\n#female %\nroster_df['is_biological_female'] = roster_df.biological_sex.map(lambda x: 1 if x=='f' else 0)\nd = roster_df.groupby('class_of').agg({\n    'student_name': ['count'],\n    'is_biological_female': ['sum','mean']\n}).reset_index()\nd.columns = ['class_of','nb_student','nb_f','pct_f']\n```\n:::\n\n\nSimilar to overall trends in STEM, biologically female students are a minority in our program at 22.4%. Nonetheless, we see a clear upward trend in participation over the last 5 years.\n\n::: {#9b831bff .cell execution_count=6}\n``` {.python .cell-code}\ng = (ggplot(d, aes(x='class_of', y='pct_f'))\n     +geom_point()\n    + geom_text(\n        aes(label='pct_f'), # Map the 'percentage_label' column to the label aesthetic\n        format_string='{:.1%}',         # Format it as a percentage with one decimal place\n        nudge_y=0.02,                   # Nudge labels slightly above points (adjust as needed)\n        va='bottom',                    # Vertical alignment to place text above the point                 # Adjust font size\n        show_legend=False               # Often you don't need a legend for these labels\n    )\n     + geom_smooth(method='glm', se=True, color='darkred', linetype='dashed')\n     + scale_y_continuous(labels=percent_format())\n     + xlab('Class of') + ylab('% Biological Female') + ggtitle('Biological Female Students on The Rise')\n     + theme_xkcd()\n     )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=672 height=480}\n:::\n:::\n\n\nMoreover, unlike the Bangkok-vs-non-Bangkok situation, there is no statistically significant difference in pass rates among biologically male and female students. Once we get them into the program, they perform equally. The challenge is how to get more biologically female students into it.\n\n::: {#8226f701 .cell execution_count=7}\n``` {.python .cell-code}\n#discrepancies in pass rate by location\nd = roster_df.groupby('is_biological_female').agg({\n    'student_name': ['count'],\n    'passed': ['sum'],\n}).reset_index()\nd.columns = ['is_biological_female','nb_student','nb_passed']#,'pct_passed']\nd_m = d.melt(id_vars='is_biological_female')\nd_m.columns = ['is_biological_female','Pass/Total','value']\nd_m['is_biological_female'] = d_m['is_biological_female'].map(lambda x: 'F' if x==1 else 'M')\nd_m['Pass/Total'] = d_m['Pass/Total'].map(lambda x: 'Passed' if x=='nb_passed' else 'Total')\np = roster_df.groupby('is_biological_female').passed.mean().reset_index()\np['is_biological_female'] = p['is_biological_female'].map(lambda x: 'F' if x==1 else 'M')\np.columns = ['is_biological_female','pass_rate']\nd_m_merged = pd.merge(d_m, p, on='is_biological_female', how='left')\n\n#hypothesis test for pass rate among sexes; lacking quite a bit of power\nz,p_value,power = proportion_z_test(x1=134,n1=166,x2=37,n2=48,\n                  effect_size_alt=0.1,\n                  alpha=0.05, \n                  alternative='two-sided')\n\ng = (ggplot(d_m_merged, aes(x='is_biological_female', y='value', fill='Pass/Total'))\n     + geom_col(position='dodge')\n    + geom_text(\n        d_m_merged[d_m_merged['Pass/Total'] == 'Passed'],\n        aes(x='is_biological_female', y='value', label='pass_rate * 100'),\n        nudge_y=1,\n        va='bottom', \n        format_string='{:.1f}%',)\n     + xlab('Biological Sex') + ylab('Number of Students')\n     + ggtitle(f'No Pass Rate Difference between Biological Sexes \\n p-value = {p_value:.3f}; power = {100*power:.1f}%')\n     + scale_fill_manual(values={'Passed':'darkred', 'Total':'grey'})\n     + theme_xkcd()\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### Project Themes and Data Types\n\nLet us look into what students like to build the most. Top three most popular combinations are medical imaging, literature mostly in Thai, and music. Other archetypes worth mentioning are hand sign projects (under acessibility/images), many types of secruity projects from fraud detection to hacking, education, and entertainment. These seem to be topics closest to the hearts and minds of middle-to-high schoolers.\n\n::: {#0b49d254 .cell execution_count=8}\n``` {.python .cell-code}\nall_combination = list(product(roster_df.theme.unique(), roster_df.main_data_type.unique()))\ncombined_df = pd.DataFrame(all_combination, columns=['theme', 'main_data_type'])\ncombination_with_count = roster_df.groupby(['theme', 'main_data_type']).size().reset_index(name='count')\ncombined_df = combined_df[(~combined_df.theme.isna())&(~combined_df.main_data_type.isna())]\nheatmap_data = combined_df.merge(combination_with_count, on=['theme', 'main_data_type'], how='left')\nheatmap_data['count'] = heatmap_data['count'].fillna(0).astype(int)\n\ng = (\n    ggplot(heatmap_data, aes(x='theme', y='main_data_type', fill='count'))\n    + geom_tile(aes(width=0.9, height=0.9), color=\"white\") # Add white borders for separation# Thickness of the line\n    + geom_text(aes(label='count'), color='black', size=10) # Add count numbers\n    + scale_fill_gradient(low='lightyellow', high='darkred') # Choose a color scale\n    + labs(\n        title='Project Themes vs Main Data Types',\n        x='Themes',\n        y='Main Data Types',\n        fill='Count'\n    )\n    + theme_xkcd()\n    + theme(\n        axis_text_x=element_text(angle=45, hjust=1), # Rotate x-axis labels if they overlap\n        panel_background=element_text(fill='white'), # Set background to white\n        plot_background=element_text(fill='white')\n    )\n)\n\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=672 height=480}\n:::\n:::\n\n\nStrong interests in healthcare could stem from the cultural expectation that well-performing students would go on to medical school (more on this later). Considering the popularity of music projects despite our curriculumn not containing an audio track, we will create one starting in 2026.\n\n::: {#e16dd4dc .cell execution_count=9}\n``` {.python .cell-code}\nd = roster_df.theme.value_counts().reset_index()\\\n    .sort_values('count',ascending=False).reset_index()\nd['theme'] = pd.Categorical(d['theme'], categories=d['theme'], ordered=True)\n\ng = (ggplot(d, aes(x='theme', y='count',label='count'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n    )\n     + xlab('Project Themes') + ylab('Number of Projects') \n     + ggtitle('Project Theme Ranking')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,32))\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=672 height=480}\n:::\n:::\n\n\nImages being the most prevalent data type is understandable since they are the most beginner-friendly when it comes to deep learning; a well-versed student can spin up an image classification project end-to-end in a few hours while it would probably take a few weeks for them to do the same for a reinforcement learning simulation. Thai being a medium-resource language and the fact that many of our mentors work on [PyThaiNLP](https://github.com/PyThaiNLP/pythainlp), the largest Thai language processing library, might also have inspired many Thai NLP projects. \n\n::: {#3d98737a .cell execution_count=10}\n``` {.python .cell-code}\nd = roster_df.main_data_type.value_counts().reset_index()\\\n    .sort_values('count',ascending=False).reset_index()\nd['main_data_type'] = pd.Categorical(d['main_data_type'], categories=d['main_data_type'], ordered=True)\n\ng = (ggplot(d, aes(x='main_data_type', y='count',label='count'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n    )\n     + xlab('Project Data Types') + ylab('Number of Projects') \n     + ggtitle('Project Data Type Ranking')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,91))\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=672 height=480}\n:::\n:::\n\n\n## What Students Do After the Program\n\n::: {#34d452fa .cell execution_count=11}\n``` {.python .cell-code}\n#standardize columns\nsurvey_df['biological_sex'] = survey_df.gender.map(lambda x: 'f' if x=='หญิง' else 'm')\nsurvey_df['study_level'] = survey_df.secondary_grade\n\nsurvey_no_latest = survey_df[survey_df.class_of!=2025].reset_index(drop=True)\n```\n:::\n\n\nThis July right after AI Builders 2025 ended, we sent out a survey to all our students from 2021 to 2025 (technically also to a few students we prototyped the project on in 2020). We heard back from 72 out of 214 students (33.6%). Here are what they have to say about their lives after AI Builders.\n\n> Disclaimer: It goes without saying that there is self selection among those who responded to the survey. The result might seem \"too good to be true\" but we argue that even if we assume the remaining 66.4% responded in the worst way possible, our result would still look decent.\n\n### Who Answered the Survey\n\nUnderstandably, response rate drops off for students from earlier class-ofs. From 70% in the current year to 30% for students 1-2 years prior and 15% for those earlier. This 15% is most likely students who have become teaching assistants in subsequent programs and kept contact in our Discord server. From 2022 onwards, almost all of our teaching assistants were program alumni.\n\n::: {#35761541 .cell execution_count=12}\n``` {.python .cell-code}\nd = survey_df.class_of.value_counts(normalize=False).reset_index()\nd_roster = roster_df.class_of.value_counts(normalize=False).reset_index()\nd_combined = d.merge(d_roster, on='class_of',how='left').dropna()\nd_combined['response_rate'] = d_combined.count_x/d_combined.count_y\n\ng = (ggplot(d_combined, aes(x='class_of', y='response_rate'))\n     +geom_point(color='darkred')\n     +geom_line(color='darkred')\n    + geom_text(\n        aes(label='response_rate'), # Map the 'percentage_label' column to the label aesthetic\n        format_string='{:.1%}',         # Format it as a percentage with one decimal place\n        nudge_y=0.02,                   # Nudge labels slightly above points (adjust as needed)\n        va='bottom',                    # Vertical alignment to place text above the point                 # Adjust font size\n        show_legend=False               # Often you don't need a legend for these labels\n    )\n     + scale_y_continuous(labels=percent_format())\n     + xlab('Class of') + ylab('Response Rate') + ggtitle('Response Rate by Class-of')\n     + theme_xkcd()\n     )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=672 height=480}\n:::\n:::\n\n\nWe found that respondents are similarly distributed in terms of biological sexes to the student roster. However, we have a bit of a skew towards secondary grade 6 in the survey.\n\n::: {#29546ca4 .cell execution_count=13}\n``` {.python .cell-code}\nd_roster = roster_df.biological_sex.value_counts(normalize=True).reset_index()\nd_roster['source'] = 'roster'\nd_survey = survey_df.biological_sex.value_counts(normalize=True).reset_index()\nd_survey['source'] = 'survey'\nd = pd.concat([d_roster,d_survey],axis=0)\nd['biological_sex'] = pd.Categorical(d['biological_sex'], categories=['m','f'], ordered=True)\n\ng = (ggplot(d, aes(x='source', y='proportion', fill='biological_sex'))\n    + geom_col()\n    + geom_text(\n        d[d.biological_sex=='f'],\n        aes(x='source', y='proportion', label='proportion * 100'),\n        nudge_y=0.01,\n        va='bottom', \n        format_string='{:.1f}%',)\n     + xlab('Data Source') + ylab('Percentage of Students/Survey Respondents')\n     + ggtitle(f'Biological Sex Distribution of Student Roster vs Survey')\n     + scale_y_continuous(labels=percent_format())\n     + scale_fill_manual(values={'f':'darkred', 'm':'darkblue'})\n     + theme_xkcd()\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=672 height=480}\n:::\n:::\n\n\n::: {#5b2a3ff2 .cell execution_count=14}\n``` {.python .cell-code}\nd_roster = roster_df.study_level.value_counts(normalize=True).reset_index()\nd_roster['source'] = 'roster'\nd_survey = survey_df.study_level.value_counts(normalize=True).reset_index()\nd_survey['source'] = 'survey'\nd = pd.concat([d_roster,d_survey],axis=0)\nd['study_level'] = pd.Categorical(d['study_level'], categories=[1,2,3,4,5,6], ordered=True)\n\ng = (ggplot(d, aes(x='source', y='proportion', fill='study_level'))\n    + geom_col()\n     + xlab('Data Source') + ylab('Percentage of Students')\n     + ggtitle(f'Study Grades When Starting Program\\nStudent Roster vs Survey')\n     + scale_y_continuous(labels=percent_format())\n     + theme_xkcd()\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### University\n\nUnsurprisingly, a large portion of our alumni is still pre-college. However, for those who are in university, a significant portion is in computer science and engineering and almost all of them are in STEM. Anecdotally, we have heard from students that participating in AI Builders changed their educational choice towards AI-related majors.\n\n::: {#f05249dc .cell execution_count=15}\n``` {.python .cell-code}\nd = survey_df.major.fillna('Still Not in University').value_counts().reset_index()\n\nd['major'] = pd.Categorical(d['major'], categories=d['major'], ordered=True)\n\ng = (ggplot(d, aes(x='major', y='count',label='count'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n    )\n     + xlab('University Major') + ylab('Number of Students') \n     + ggtitle('What Our Students Major in at University')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,30))\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=672 height=480}\n:::\n:::\n\n\nTop university choices for our students are domestic ones strong in STEM such as Chulalongkorn and KMUTT. Surprisingly, 10 out of 72 respondents pursued their higher education overseas.\n\n::: {#71fefe3d .cell execution_count=16}\n``` {.python .cell-code}\nd = survey_df.university.fillna('Still Not in University').value_counts().reset_index()\n\nd['university'] = pd.Categorical(d['university'], categories=d['university'], ordered=True)\n\ng = (ggplot(d, aes(x='university', y='count',label='count'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n    )\n     + xlab('University') + ylab('Number of Students') \n     + ggtitle('Where Students Go to University')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,31))\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### Do Students Think We Upgraded Them\n\nWe asked students if they think participating in AI Builders have improved their AI skills and expanded their networks of likeminded people, on a scale of 1-5 (1 being the worst and 5 being the best). Luckily, we seems to be thought of as effective, especially for skill improvement where all the scores are 3 and above.\n\n::: {#ad4fde88 .cell execution_count=17}\n``` {.python .cell-code}\ncombi = pd.DataFrame({'skill_upgrade':[1,2,3,4,5]})\nd = combi.merge(survey_df.skill_upgrade.value_counts(normalize=True).reset_index(), on='skill_upgrade',how='left').fillna(0)\n\n# d['skill_upgrade'] = pd.Categorical(d['skill_upgrade'], categories=d['skill_upgrade'], ordered=True)\n\ng = (ggplot(d, aes(x='skill_upgrade', y='proportion',label='proportion'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n        format_string='{:.1%}',  \n    )\n     + xlab('1: Worse, 5: Best') + ylab('Percentage of Students') \n     + ggtitle('Have AI Builders Helped You Improve Your AI Skills?')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,.6),labels=percent_format())\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=672 height=480}\n:::\n:::\n\n\n::: {#2ad9c434 .cell execution_count=18}\n``` {.python .cell-code}\ncombi = pd.DataFrame({'network_upgrade':[1,2,3,4,5]})\nd = combi.merge(survey_df.network_upgrade.value_counts(normalize=True).reset_index(), on='network_upgrade',how='left').fillna(0)\n\ng = (ggplot(d, aes(x='network_upgrade', y='proportion',label='proportion'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n        format_string='{:.1%}',  \n    )\n     + xlab('1: Worse, 5: Best') + ylab('Percentage of Students') \n     + ggtitle('Have AI Builders Broadened Your Network?')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,.6),labels=percent_format())\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### Activities Student Engage in After the Program\n\nWe asked about activities they have taken part after obtaining the skills in AI Builders in the following domains: school activity, hackathon, project competition, personal project, research, internship and work. Fortunately, most of the students have used what they learn to at least work on a personal project, which has always been our intention. About half of them have used it for events available to the middle-to-high school age group. And some even leapfrogged a bit to internship and work.\n\n::: {#ea752479 .cell execution_count=19}\n``` {.python .cell-code}\nusage_dict = {\n    'กิจกรรมในโรงเรียน': 'School Activity',  \n    'งานแข่ง Hackathon': 'Hackathon',\n    'ประกวดโครงงาน': 'Project Competition', \n    'โปรเจคต์ส่วนตัว': 'Personal Project',\n    'งานวิจัย': 'Research',  \n    'การฝึกงาน': 'Internship',  \n    'ทำงาน': 'Work',  \n}\n\nfor val in usage_dict.keys():\n    survey_df[usage_dict[val]] = survey_df.usage.fillna('unknown').map(lambda x: 1 if (val in x) else 0)\n\nusage_flags = [usage_dict[k] for k in usage_dict.keys()]\nd = survey_df[usage_flags].mean().reset_index().sort_values(0, ascending=False)\nd.columns = ['activity','proportion']\nd['activity'] = pd.Categorical(d['activity'], categories=d['activity'], ordered=True)\n\ng = (ggplot(d, aes(x='activity', y='proportion',label='proportion'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n        format_string='{:.1%}',  \n    )\n     + xlab('After-Program Activity') + ylab('Percentage of Students') \n     + ggtitle('How Have You Applied What You Learned from AI Builders?')\n     + theme_xkcd()\n     + theme(axis_text_x=element_text(angle=45, hjust=1))\n     + scale_y_continuous(limits=(0,.9),labels=percent_format())\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=672 height=480}\n:::\n:::\n\n\nLooking a bit deeper, we can see that the median AI Builder engaged in about 3 after-program activity categories whereas some small percentage of seemingly superhuman alumni engage in all 7 categories.\n\n::: {#a2661e87 .cell execution_count=20}\n``` {.python .cell-code}\nsurvey_df['nb_activity'] = survey_df[usage_flags].sum(axis=1)\nd = survey_df['nb_activity'].value_counts(normalize=True).reset_index()\n\ng = (ggplot(d, aes(x='nb_activity', y='proportion',label='proportion'))\n     + geom_col(fill='darkred')\n    + geom_text(\n        nudge_y=0.0001, # Adjust this value to move labels slightly above the bars\n        va='bottom',  # Vertical alignment: 'bottom' places text just above the 'y' coordinate\n        format_string='{:.1%}',  \n    )\n     + xlab('Number of After-Program Activities') + ylab('Percentage of Students') \n     + ggtitle('How Many Activities Have You Applied What\\nYou Learned from AI Builders to?')\n     + theme_xkcd()\n     + scale_y_continuous(limits=(0,.27),labels=percent_format())\n     + scale_x_continuous(breaks=[i for i in range(8)],)\n    )\ng\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=672 height=480}\n:::\n:::\n\n\n### More on After-Program Activities\n\nWe had a few free-text questions for students to tell us about the details of their after-program activities in events, research and knowledge sharing. Here is a sampler of their achievements at domestic and international levels, which we hope we were at least a tiny part of:\n\n#### After-Program Events\n\n__International Achievements__:\n\n• Silver Medal at Genius Olympiad 2024\n\n• Breakthrough Pioneer Award at International Student Science Fair\n\n• Finalist at nwHack (University of British Columbia)\n\n• Excellence Award at Shanghai AI Global Innovation Competition\n\n__National Competitions__:\n\n• Multiple wins at Siriraj Hackathon (2022-2024)\n\n• Gold Medal in Super AI Engineer\n\n• First Prize in Computer Software Projects Competition (Sillapa70)\n\n• Multiple awards in National Software Contest (NSC)\n\n• Success in APICTA and TICTA competitions\n\n__Hackathons__:\n\n• Champion at SAS x CBS Hackathon 2023\n\n• 2nd Runner-up at AIhack Thailand 2023\n\n• Finalist positions in multiple events:\n\n  - BDI Hackathon\n\n  - SEA-Qthon 2025\n\n  - Rehack Search 2024\n\n  - SPU AI Prompt Mini Hackathon\n\n__Professional Development__:\n\n• Multiple internships at Agoda (2023-2025)\n\n• Internships at Provincial Electricity Authority\n\n• Internship at Ramathibodi Hospital\n\n__Technical Projects & Research__:\n\n• Healthcare: EEG seizure detection, PPG vital sign monitoring\n\n• Agriculture: Durian tree health analysis system\n\n• AI/ML: Various projects involving computer vision, NLP, and machine learning\n\n#### After-Program Research Works\n\n__Publications & Presentations__:\n\n• Published and presented at JCSSE2023, receiving Best Presentation Award\n\n• Selected for poster presentation at EMBC 2025 in Denmark\n\n• Authored paper on graph embedding methods for drug discovery\n\n__Academic Institutions__:\n\n• Research Assistant positions at:\n\n  - Kasetsart University (Document Analysis)\n\n  - VISTEC (Multiple EEG and PPG processing projects)\n\n  - Brown University\n\n  - University of Wisconsin-Madison (MRI processing)\n\n  - Beijing Institute of Technology (Agent and Embodied Agent research)\n\n__Medical Research__:\n\n• Siriraj Hospital:\n\n  - Cardiac Center research collaboration\n\n  - VISTEC joint research project\n\n  - Mr.Rehab medical consultant\n\n__Industry Collaboration__:\n\n• SCBX - AI Researcher Intern\n\n• American Family Insurance - DS/ML Intern\n\n• AI Singapore - Student Assistance (Quality Assurance)\n\n__Specialized Projects__:\n\n• Virtual Power Plant AI implementation with Walailak University\n\n• Disaster Management System Development at Nakhon Ratchasima Rajabhat University\n\n• Individual Study projects at Chulalongkorn University\n\n__Notable Scholarships__:\n\n• JSTP Scholarship 2024 Researcher\n\n• พสวท. (DPST) Scholar\n\n#### After-Program Knowledge Sharing\n\n__University Level Involvement__:\n\n• Teaching Assistant positions at:\n\n  - Brown University (CSCI0410)\n\n  - Kasetsart University (Machine Learning Systems)\n\n  - Various Computer Programming courses\n\n__Secondary Education Impact__:\n\n• Organized and taught at multiple high school programs:\n\n  - Comcamp36 (Data Science Fundamentals)\n\n  - NSTDA's RAC Program (AI & Data Science Camp)\n\n  - Robotics workshops\n\n  - Computer Olympics training\n\n__Community Initiatives__:\n\n• Founded and led technical clubs:\n\n  - Information System Development club at Chulalongkorn University\n\n  - KU Tech club activities\n\n  - CU Dev Club workshops\n\n__Digital Content Creation__:\n\n• Created educational content:\n\n  - YouTube channel for AI programming using Kittenblock\n\n  - E-book: \"AI & Machine Learning for Kids\"\n\n__Event Organization__:\n\n• Hackathons and Workshops:\n\n  - SI Hackathon 2023\n\n  - I-Squared Hackathon (Data Science and ML)\n\n  - ChAMP Data Career Track\n\n  - Machine Learning in Computer Vision workshop (40 participants)\n\n__Technical Projects__:\n\n• Developed backend systems:\n\n  - Registration and event management APIs\n\n  - Pet adoption website backend\n\n  - Various student-focused technical solutions\n\n__Mentorship__:\n\n• Provided guidance for:\n\n  - Technology club members\n\n  - Project competition participants\n\n  - Career preparation in data science fields\n\n  - School technology initiatives\n\n## Closing Remarks\n\nBy cross-tabulating the roster and survey, we have reaffirmed the effectiveness of our project-based learning approach, the advantage of the all-online format, and the growing community based on no-nonsense, impact-driven buildership. Looking forward, we will tackle our gap in lession (audio track), support for non-Bangkok students, and pipeline intake for biologically female students.\n\nIf you are an organization or a person that share our vision for building, please feel free to reach out for any kind of sponsorship, code contribution, mentorship, and moral support.\n\nNo influencers. No scammers. Just builders.\n\n## Appendiex\n\n### Student Location \n\n::: {#996e0caf .cell execution_count=21}\n``` {.python .cell-code}\n#bangkok vs non-bangkok\ngreater_bangkok = ['กรุงเทพมหานคร','นนทบุรี','นครปฐม','ปทุมธานี','สมุทรปราการ','สมุทรสาคร']\nroster_df['province_grouped'] = roster_df.province.map(lambda x: 'กรุงเทพฯและปริมณฑล' if x in greater_bangkok else x)\nroster_df['is_greater_bangkok'] = roster_df.province_grouped.map(lambda x: 1 if x=='กรุงเทพฯและปริมณฑล' else 0)\nd = roster_df.province_grouped.value_counts(normalize=True).reset_index()\nd\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>province_grouped</th>\n      <th>proportion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>กรุงเทพฯและปริมณฑล</td>\n      <td>0.616822</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>เชียงใหม่</td>\n      <td>0.098131</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>สงขลา</td>\n      <td>0.051402</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>นครศรีธรรมราช</td>\n      <td>0.023364</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>เชียงราย</td>\n      <td>0.023364</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>สระบุรี</td>\n      <td>0.023364</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ชลบุรี</td>\n      <td>0.023364</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>บุรีรัมย์</td>\n      <td>0.014019</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ตรัง</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>พิษณุโลก</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>สุราษฎร์ธานี</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>ขอนแก่น</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>ภูเก็ต</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>ระยอง</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>สตูล</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>ฉะเชิงเทรา</td>\n      <td>0.009346</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>มหาสารคาม</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>เพชรบูรณ์</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>นครราชสีมา</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>กำแพงเพชร</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>เลย</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>มุกดาหาร</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>ตาก</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>เพชรบุรี</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>ศรีสะเกษ</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>ลำปาง</td>\n      <td>0.004673</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>ลพบุรี</td>\n      <td>0.004673</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}