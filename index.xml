<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>chariblog</title>
<link>https://cstorm125.github.io/</link>
<atom:link href="https://cstorm125.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A collection of technical writings on applied science</description>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Mon, 25 Nov 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Predict How Much A Customer Will Spend</title>
  <dc:creator>cstorm125 </dc:creator>
  <link>https://cstorm125.github.io/posts/sales_prediction/</link>
  <description><![CDATA[ 




<p>I have spent nearly a decade as a data scientist in the retail sector, but I have been approaching customer spend predictions the wrong way until I attended <a href="https://scholar.google.com/citations?user=EZ9sTM4AAAAJ&amp;hl=en">Gregory M. Duncan</a>’s lecture. Accurately predicting how much an individual customer will spend in the next X days enables key retail use cases such as personalized promotion (determine X in Buy-X-Get-Y), customer targeting for upselling (which customers have higher purchasing power), and early churn detection (customers do not spend as much as they should). What makes this problem particularly difficult is because the distribution of customer spending is both <strong><a href="https://en.wikipedia.org/wiki/Zero-inflated_model">zero-inflated</a></strong> and <strong><a href="https://en.wikipedia.org/wiki/Heavy-tailed_distribution">long/fat-tailed</a></strong>. Intuitively, most customers who visit your store are not going to make a purchase and among those who do, there will be some super customers who purchase an outrageous amount more than the average customer. Some parametric models allow for zero-inflated outcomes such as <a href="https://en.wikipedia.org/wiki/Poisson_distribution">Poisson</a>, <a href="https://en.wikipedia.org/wiki/Negative_binomial_distribution">negative binomial</a>, <a href="https://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution">Conway-Maxwell-Poisson</a>; however, they do not handle the long/fat-tailed explicitly. Even for non-parametric models such as decision tree ensembles, more resources (trees and splits) will be dedicated to separating zeros and handling outliers; this could lead to deterioration in performance. Using the real-world dataset <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a>, we will compare the performance of common approaches namely naive baseline regression, regression on winsorized outcome, regression on log-plus-one-transformed outcome to what Duncan suggested: hurdle model with Duan’s method. We will demonstrate why this approach outperforms the others in most evaluation metrics and why it might not in some.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/featured_image.jpg" class="img-fluid figure-img"></p>
<figcaption>featured_image</figcaption>
</figure>
</div>
<div id="1e017386" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ucimlrepo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fetch_ucirepo </span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularDataset, TabularPredictor</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-13">    mean_squared_error, mean_absolute_error, r2_score, median_absolute_error,</span>
<span id="cb1-14">    accuracy_score, precision_score, recall_score, f1_score, confusion_matrix</span>
<span id="cb1-15">)</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pearsonr, spearmanr, wasserstein_distance</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_regression_metrics(y_true, y_pred):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'root_mean_squared_error'</span>: np.sqrt(mean_squared_error(y_true, y_pred)),</span>
<span id="cb1-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_squared_error'</span>: mean_squared_error(y_true, y_pred),</span>
<span id="cb1-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_absolute_error'</span>: mean_absolute_error(y_true, y_pred),</span>
<span id="cb1-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2'</span>: r2_score(y_true, y_pred),</span>
<span id="cb1-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearsonr'</span>: pearsonr(y_true, y_pred)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearmanr'</span>: spearmanr(y_true, y_pred)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median_absolute_error'</span>: median_absolute_error(y_true, y_pred),</span>
<span id="cb1-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'earths_mover_distance'</span>: wasserstein_distance(y_true, y_pred)</span>
<span id="cb1-28">    }</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> caluclate_classification_metrics(y_true, y_pred):</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb1-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>: accuracy_score(y_true, y_pred),</span>
<span id="cb1-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'precision'</span>: precision_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recall'</span>: recall_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_score'</span>: f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confusion_matrix'</span>: confusion_matrix(y_true, y_pred)</span>
<span id="cb1-37">    }</span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> string_to_yearmon(date):</span>
<span id="cb1-40">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.split()</span>
<span id="cb1-41">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':'</span>)</span>
<span id="cb1-42">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#+ '-' + date[1].zfill(2) + ' ' + date[3].zfill(2) + ':' + date[4].zfill(2)</span></span>
<span id="cb1-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> date</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> call_llama(system_prompt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb1-46">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""&lt;s&gt;[INST] &lt;&lt;SYS&gt;&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>system_prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;&lt;/SYS&gt;&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[/INST]"""</span></span>
<span id="cb1-47">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bedrock-runtime'</span>,region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-west-2'</span>)</span>
<span id="cb1-48">    body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.dumps({</span>
<span id="cb1-49">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt"</span>: template,</span>
<span id="cb1-50">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,</span>
<span id="cb1-51">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top_p"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb1-52">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_gen_len"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb1-53">    })</span>
<span id="cb1-54">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.invoke_model(</span>
<span id="cb1-55">        body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>body,</span>
<span id="cb1-56">        modelId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us.meta.llama3-2-90b-instruct-v1:0'</span>,</span>
<span id="cb1-57">        accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>,</span>
<span id="cb1-58">        contentType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span></span>
<span id="cb1-59">    )</span>
<span id="cb1-60">    response_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body'</span>].read())</span>
<span id="cb1-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_body</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> call_claude(system_prompt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb1-64">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bedrock-runtime'</span>,region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-west-2'</span>)</span>
<span id="cb1-65">    body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json.dumps(</span>
<span id="cb1-66">        {</span>
<span id="cb1-67">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anthropic_version"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bedrock-2023-05-31"</span>,</span>
<span id="cb1-68">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_tokens"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb1-69">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messages"</span>: [</span>
<span id="cb1-70">                {</span>
<span id="cb1-71">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb1-72">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb1-73">                    {</span>
<span id="cb1-74">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb1-75">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>,</span>
<span id="cb1-76">                    }</span>
<span id="cb1-77">                    ]</span>
<span id="cb1-78">                }</span>
<span id="cb1-79">                ]</span>
<span id="cb1-80">        }  </span>
<span id="cb1-81">    )  </span>
<span id="cb1-82"></span>
<span id="cb1-83">    </span>
<span id="cb1-84">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.invoke_model(body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>body, </span>
<span id="cb1-85">                                   modelId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'anthropic.claude-3-5-sonnet-20241022-v2:0'</span>,</span>
<span id="cb1-86">                                   contentType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>,</span>
<span id="cb1-87">                                   accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>)</span>
<span id="cb1-88">    response_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body'</span>).read())</span>
<span id="cb1-89">   </span>
<span id="cb1-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_body</span></code></pre></div>
</details>
</div>
<section id="this-is-not-a-drill-real-world-datasets-meticulous-feature-engineering-state-of-the-art-automl" class="level2">
<h2 class="anchored" data-anchor-id="this-is-not-a-drill-real-world-datasets-meticulous-feature-engineering-state-of-the-art-automl">This Is Not a Drill: Real-world Datasets, Meticulous Feature Engineering, State-of-the-art AutoML</h2>
<p>To make this exercise as realistic as possible, we will use a real-world dataset (as opposed to a simulated one), perform as much feature engineering as we would in a real-world setting, and employ the best AutoML solution the market has to offer in <a href="https://auto.gluon.ai/dev/index.html">AutoGluon</a>.</p>
<div id="491ea0eb" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">online_retail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_ucirepo(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">352</span>) </span>
<span id="cb2-2">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> online_retail[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original'</span>]</span>
<span id="cb2-3">original_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create yearmon for train-valid split</span></span>
<span id="cb2-6">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yearmon'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.InvoiceDate.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(string_to_yearmon)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#get rid of transactions without cid</span></span>
<span id="cb2-9">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>transaction_df.CustomerID.isna()].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-10">has_cid_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#fill in unknown descriptions</span></span>
<span id="cb2-13">transaction_df.Description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.Description.fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UNKNOWN'</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#convert customer id to string</span></span>
<span id="cb2-16">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x)))</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#simplify by filtering unit price and quantity to be non-zero (get rid of discounts, cancellations, etc)</span></span>
<span id="cb2-19">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.UnitPrice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb2-20">                                (transaction_df.Quantity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-21">has_sales_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add sales</span></span>
<span id="cb2-24">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.UnitPrice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> transaction_df.Quantity</span></code></pre></div>
</details>
</div>
<p>We use the <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a> dataset, which contain transactions from a UK-based, non-store online retail from 2010-12 and 2011-12. We perform the following data processing:</p>
<ol type="1">
<li>Remove transactions without <code>CustomerID</code>; from 541,909 to 406,829 transactions</li>
<li>Filter out transactions where either <code>UnitPrice</code> or <code>Quantity</code> is less than zero; from 406,829 to 397,884 transactions</li>
<li>Fill in missing product <code>Description</code> with value <code>UNKNOWN</code>.</li>
</ol>
<div id="53f5ebf9" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(transaction_df.shape)</span>
<span id="cb3-2">transaction_df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(397884, 10)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">InvoiceNo</th>
<th data-quarto-table-cell-role="th">StockCode</th>
<th data-quarto-table-cell-role="th">Description</th>
<th data-quarto-table-cell-role="th">Quantity</th>
<th data-quarto-table-cell-role="th">InvoiceDate</th>
<th data-quarto-table-cell-role="th">UnitPrice</th>
<th data-quarto-table-cell-role="th">CustomerID</th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">yearmon</th>
<th data-quarto-table-cell-role="th">Sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">244313</td>
<td>566950</td>
<td>23026</td>
<td>DRAWER KNOB VINTAGE GLASS STAR</td>
<td>6</td>
<td>9/15/2011 16:34</td>
<td>2.08</td>
<td>17594</td>
<td>United Kingdom</td>
<td>2011-09</td>
<td>12.48</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">390470</td>
<td>580808</td>
<td>22543</td>
<td>MINI JIGSAW BAKE A CAKE</td>
<td>48</td>
<td>12/6/2011 11:24</td>
<td>0.19</td>
<td>16133</td>
<td>United Kingdom</td>
<td>2011-12</td>
<td>9.12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">236686</td>
<td>566247</td>
<td>47566</td>
<td>PARTY BUNTING</td>
<td>20</td>
<td>9/11/2011 12:03</td>
<td>4.95</td>
<td>16107</td>
<td>United Kingdom</td>
<td>2011-09</td>
<td>99.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">361574</td>
<td>578022</td>
<td>21843</td>
<td>RED RETROSPOT CAKE STAND</td>
<td>1</td>
<td>11/22/2011 13:25</td>
<td>10.95</td>
<td>17371</td>
<td>United Kingdom</td>
<td>2011-11</td>
<td>10.95</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">293093</td>
<td>571601</td>
<td>22728</td>
<td>ALARM CLOCK BAKELIKE PINK</td>
<td>2</td>
<td>10/18/2011 10:53</td>
<td>3.75</td>
<td>17073</td>
<td>United Kingdom</td>
<td>2011-10</td>
<td>7.50</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We formulate the problem as predicting the sales (<code>TargetSales</code>) during Q4 2011 for each customers who bought at least one item during Q1-Q3 2011. Note that we are interested in predicting the <strong>spend per customer</strong> as accurately as possible; this is common for marketing use cases such as determining what spend threshold to give each customer in a promotion, targeting customers for upselling, or detecting early signs of churns. It is notably different from predicting <strong>total spend of all customers</strong> during a time period, which usually requires a different approach.</p>
<div id="8012c9fe" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">feature_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-09'</span>}</span>
<span id="cb5-2">outcome_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-10'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-12'</span>}</span>
<span id="cb5-3"></span>
<span id="cb5-4">feature_transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>feature_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb5-5">                                      (transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>feature_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>])]</span>
<span id="cb5-6">outcome_transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>outcome_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb5-7">                                      (transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>outcome_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>])]</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#aggregate sales during outcome period</span></span>
<span id="cb5-10">outcome_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_transaction.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).Sales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index()</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#aggregate sales during feature period</span></span>
<span id="cb5-13">feature_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).Sales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index()</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#merge to get TargetSales including those who spent during feature period but not during outcome (zeroes)</span></span>
<span id="cb5-16">outcome_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_sales[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>]].merge(outcome_sales, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb5-17">outcome_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>].fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-18">outcome_df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>]</span></code></pre></div>
</details>
</div>
<p>We transform the transaction dataset into a customer-level dataset where we calculate features using transactions between 2011-01 to 2011-09 and outcome using transactions between 2011-10 to 2011-12, summing <code>Quantity</code> times <code>UnitPrice</code>. We left-join the customers in feature set to outcome set. This will result in the zero-inflated nature of the outcome as not all customers will come back in Q4. The distribution of non-zero sales is naturally long/fat-tailed with a few customers having extraordinarily high amount of sales in Q4. This resulted in a customer-level dataset with 3,438 customers.</p>
<div id="31bd5fa1" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#confirm zero-inflated, long/fat-tailed</span></span>
<span id="cb6-2">outcome_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>count      3438.000000
mean        666.245829
std        4016.843037
min           0.000000
0%            0.000000
10%           0.000000
20%           0.000000
30%           0.000000
40%           0.000000
50%         102.005000
60%         263.006000
70%         425.790000
80%         705.878000
90%        1273.611000
max      168469.600000
Name: TargetSales, dtype: float64</code></pre>
</div>
</div>
<div id="f3452b1e" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#confirm zero-inflated, long/fat-tailed</span></span>
<span id="cb8-2">outcome_df[outcome_df.TargetSales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>].TargetSales.hist(bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-7-output-1.png" width="605" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We represent a customer using traditional RFM features namely recency of purchase, purchase days, total sales, number of distinct products purchased, number of distinct category purchased, customer tenure within 2011, average purchase frequency, average purchase value, and percentage of purchase across all 9 categories. This is based on data from Q1-Q3 2011.</p>
<p>Since the <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a> dataset does not have a category but only contains descriptions over 3,000 items, we use <code>LLaMA 3.2 90B</code> to infer categories based on randomly selected 1,000 descriptions. This is to make the category preference representation for each customer, which is more tractable than including features about all 3,548 items. After that, we use <code>Claude 3.5 v2</code> to label a category for each description as it performs structured output a little more reliably. The categories are:</p>
<ol type="1">
<li>Home Decor</li>
<li>Kitchen and Dining</li>
<li>Fashion Accessories</li>
<li>Stationary and Gifts</li>
<li>Toys and Games</li>
<li>Seasonal and Holiday</li>
<li>Personal Care and Wellness</li>
<li>Outdoor and Garden</li>
<li>Others</li>
</ol>
<div id="c22ac0f2" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">descriptions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.Description.unique().tolist()</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(descriptions[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#randomize descriptions with seed 112 to get which categories we should use</span></span>
<span id="cb9-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb9-6">random_descriptions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(descriptions, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_llama(</span>
<span id="cb9-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a product categorization assistant at a retail website.'</span>,</span>
<span id="cb9-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Given the following product descriptions, come up with a few product categories they should be classified into.'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(random_descriptions)</span>
<span id="cb9-11">)</span>
<span id="cb9-12"></span>
<span id="cb9-13">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Home Decor'</span>,</span>
<span id="cb9-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kitchen and Dining'</span>,</span>
<span id="cb9-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fashion Accessories'</span>,</span>
<span id="cb9-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stationary and Gifts'</span>,</span>
<span id="cb9-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Toys and Games'</span>,</span>
<span id="cb9-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Seasonal and Holiday'</span>,</span>
<span id="cb9-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Personal Care and Wellness'</span>,</span>
<span id="cb9-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Outdoor and Garden'</span>,   </span>
<span id="cb9-22">]</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generation'</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['JUMBO BAG PINK POLKADOT', 'BLUE POLKADOT WRAP', 'RED RETROSPOT WRAP ', 'RECYCLING BAG RETROSPOT ', 'RED RETROSPOT SHOPPER BAG']
 &lt;&lt;SYS&gt;&gt;Based on the product descriptions, I would categorize them into the following categories:

1. Home Decor:
    * Wall art
    * Decorative items (e.g. vases, figurines, etc.)
    * Lighting (e.g. candles, lanterns, etc.)
    * Textiles (e.g. throw pillows, blankets, etc.)
2. Kitchen and Dining:
    * Cookware and utensils
    * Tableware (e.g. plates, cups, etc.)
    * Kitchen decor (e.g. signs, magnets, etc.)
    * Food and drink items (e.g. tea, coffee, etc.)
3. Fashion and Accessories:
    * Jewelry (e.g. necklaces, earrings, etc.)
    * Handbags and wallets
    * Clothing and accessories (e.g. scarves, hats, etc.)
    * Beauty and personal care items (e.g. cosmetics, skincare, etc.)
4. Stationery and Gifts:
    * Cards and gift wrap
    * Stationery (e.g. notebooks, pens, etc.)
    * Gift items (e.g. mugs, keychains, etc.)
5. Toys and Games:
    * Toys (e.g. stuffed animals, puzzles, etc.)
    * Games and puzzles
6. Seasonal and Holiday:
    * Christmas decorations and gifts
    * Easter decorations and gifts
    * Other seasonal and holiday items
7. Outdoor and Garden:
    * Garden decor (e.g. planters, statues, etc.)
    * Outdoor furniture and accessories
    * Gardening tools and supplies

Note that some products may fit into multiple categories, but I have assigned them to the one that seems most relevant.</code></pre>
</div>
</div>
<div id="dc96d700" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#loop through descriptions in batches of batch_size</span></span>
<span id="cb11-2">res_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(descriptions), batch_size)):</span>
<span id="cb11-5">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> descriptions[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb11-6">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(batch)</span>
<span id="cb11-7">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Categorize the following product descriptions into </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(categories)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> or Others, if they do not fall into any. </span></span>
<span id="cb11-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Only answer in the following format:</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #1"|"product category classified into"</span></span>
<span id="cb11-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #2"|"product category classified into"</span></span>
<span id="cb11-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #n"|"product category classified into"</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Here are the product descriptions:</span></span>
<span id="cb11-16"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb11-19">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_claude(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a product categorizer at a retail website'</span>, inp)</span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if res['generation_token_count'] &gt; 1: #for llama</span></span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'usage'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_tokens'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb11-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb11-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Retrying...'</span>)</span>
<span id="cb11-25">            time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-26">    res_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>].strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for llama</span></span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .replace('[SYS]','').replace('&lt;&lt;SYS&gt;&gt;','')\</span></span>
<span id="cb11-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .replace('[/SYS]','').replace('&lt;&lt;/SYS&gt;&gt;','')\</span></span>
<span id="cb11-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> res_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>:</span>
<span id="cb11-31">        res_texts.extend(res_text)</span>
<span id="cb11-32"></span>
<span id="cb11-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sales_prediction/product_description_category.csv'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-34">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"product_description"|"category"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> res_texts:</span>
<span id="cb11-36">        f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
<p>Here is the share of product descriptions in each annotated category:</p>
<div id="8eae31e5" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">product_description_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sales_prediction/product_description_category.csv'</span>,</span>
<span id="cb12-2">                                           sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clean product_description</span></span>
<span id="cb12-5">product_description_category[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> descriptions</span>
<span id="cb12-6">product_description_category.category.value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>category
Home Decor                    0.328636
Kitchen and Dining            0.195885
Fashion Accessories           0.138670
Stationary and Gifts          0.116122
Seasonal and Holiday          0.087373
Personal Care and Wellness    0.047351
Toys and Games                0.045096
Outdoor and Garden            0.032976
Others                        0.007892
Name: proportion, dtype: float64</code></pre>
</div>
</div>
<p>We merge the RFM features with preference features, that is share of sales in each category for every customer, then the outcome <code>TargetSales</code> to create the universe set for the problem.</p>
<div id="767f1237" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">feature_transaction_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.merge(product_description_category,</span>
<span id="cb14-2">                                                    how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inner'</span>,</span>
<span id="cb14-3">                                                    on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>,)</span>
<span id="cb14-4">feature_transaction.shape, feature_transaction_cat.shape</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#convert invoice date to datetime</span></span>
<span id="cb14-7">feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>])</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last date in feature set</span></span>
<span id="cb14-10">current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rfm</span></span>
<span id="cb14-13">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).agg({</span>
<span id="cb14-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>: [</span>
<span id="cb14-15">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: (current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()).days),</span>
<span id="cb14-16">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb14-17">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>),</span>
<span id="cb14-18">    ],</span>
<span id="cb14-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceNo'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_invoice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)],</span>
<span id="cb14-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>: [</span>
<span id="cb14-21">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb14-22">    ],</span>
<span id="cb14-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'StockCode'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)],</span>
<span id="cb14-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)]</span>
<span id="cb14-25">}).reset_index()</span>
<span id="cb14-26"></span>
<span id="cb14-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten column names</span></span>
<span id="cb14-28">customer_features.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>,</span>
<span id="cb14-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>,</span>
<span id="cb14-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>,</span>
<span id="cb14-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>,</span>
<span id="cb14-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_invoice'</span>,</span>
<span id="cb14-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>,</span>
<span id="cb14-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>,</span>
<span id="cb14-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span></span>
<span id="cb14-37">]</span>
<span id="cb14-38"></span>
<span id="cb14-39">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>]).dt.days</span>
<span id="cb14-40">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_frequency'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>]</span>
<span id="cb14-41">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>]</span>
<span id="cb14-42"></span>
<span id="cb14-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#category preference</span></span>
<span id="cb14-44">category_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat.pivot_table(</span>
<span id="cb14-45">    values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>, </span>
<span id="cb14-46">    index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, </span>
<span id="cb14-47">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>, </span>
<span id="cb14-48">    aggfunc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>, </span>
<span id="cb14-49">    fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-50">)</span>
<span id="cb14-51">category_sales.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i.lower().replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> category_sales.columns]</span>
<span id="cb14-52">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features.merge(category_sales, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb14-53"></span>
<span id="cb14-54">total_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>]</span>
<span id="cb14-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> category_sales.columns:</span>
<span id="cb14-56">    percentage_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'per_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-57">    customer_features[percentage_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_sales</span>
<span id="cb14-58"></span>
<span id="cb14-59">selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-60"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>,</span>
<span id="cb14-61"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>,</span>
<span id="cb14-62"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>,</span>
<span id="cb14-63"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>,</span>
<span id="cb14-64"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span>,</span>
<span id="cb14-65"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>,</span>
<span id="cb14-66"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_frequency'</span>,</span>
<span id="cb14-67"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_value'</span>,</span>
<span id="cb14-68"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_fashion_accessories'</span>,</span>
<span id="cb14-69"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_home_decor'</span>,</span>
<span id="cb14-70"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_kitchen_and_dining'</span>,</span>
<span id="cb14-71"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_others'</span>,</span>
<span id="cb14-72"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_outdoor_and_garden'</span>,</span>
<span id="cb14-73"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_personal_care_and_wellness'</span>,</span>
<span id="cb14-74"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_seasonal_and_holiday'</span>,</span>
<span id="cb14-75"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_stationary_and_gifts'</span>,</span>
<span id="cb14-76"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_toys_and_games'</span>]</span>
<span id="cb14-77"></span>
<span id="cb14-78">outcome_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span></span>
<span id="cb14-79"></span>
<span id="cb14-80">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[[ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>selected_features]</span>
<span id="cb14-81">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_df.merge(customer_features, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-82"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape)</span>
<span id="cb14-83">df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(3438, 18)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TargetSales</th>
<th data-quarto-table-cell-role="th">recency</th>
<th data-quarto-table-cell-role="th">purchase_day</th>
<th data-quarto-table-cell-role="th">total_sales</th>
<th data-quarto-table-cell-role="th">nb_product</th>
<th data-quarto-table-cell-role="th">nb_category</th>
<th data-quarto-table-cell-role="th">customer_lifetime</th>
<th data-quarto-table-cell-role="th">avg_purchase_frequency</th>
<th data-quarto-table-cell-role="th">avg_purchase_value</th>
<th data-quarto-table-cell-role="th">per_fashion_accessories</th>
<th data-quarto-table-cell-role="th">per_home_decor</th>
<th data-quarto-table-cell-role="th">per_kitchen_and_dining</th>
<th data-quarto-table-cell-role="th">per_others</th>
<th data-quarto-table-cell-role="th">per_outdoor_and_garden</th>
<th data-quarto-table-cell-role="th">per_personal_care_and_wellness</th>
<th data-quarto-table-cell-role="th">per_seasonal_and_holiday</th>
<th data-quarto-table-cell-role="th">per_stationary_and_gifts</th>
<th data-quarto-table-cell-role="th">per_toys_and_games</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2606</td>
<td>0.00</td>
<td>53</td>
<td>2</td>
<td>597.48</td>
<td>138</td>
<td>8</td>
<td>184</td>
<td>92.000000</td>
<td>298.740</td>
<td>0.079383</td>
<td>0.433973</td>
<td>0.343710</td>
<td>0.003465</td>
<td>0.000000</td>
<td>0.041357</td>
<td>0.016570</td>
<td>0.056688</td>
<td>0.024854</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">196</td>
<td>0.00</td>
<td>78</td>
<td>2</td>
<td>2209.85</td>
<td>37</td>
<td>6</td>
<td>226</td>
<td>113.000000</td>
<td>1104.925</td>
<td>0.030771</td>
<td>0.275245</td>
<td>0.628549</td>
<td>0.000000</td>
<td>0.021178</td>
<td>0.022535</td>
<td>0.000000</td>
<td>0.021721</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2900</td>
<td>3893.79</td>
<td>10</td>
<td>6</td>
<td>4099.11</td>
<td>78</td>
<td>9</td>
<td>172</td>
<td>28.666667</td>
<td>683.185</td>
<td>0.003879</td>
<td>0.761507</td>
<td>0.104540</td>
<td>0.003879</td>
<td>0.012442</td>
<td>0.014015</td>
<td>0.051597</td>
<td>0.043312</td>
<td>0.004830</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2187</td>
<td>0.00</td>
<td>227</td>
<td>1</td>
<td>122.40</td>
<td>1</td>
<td>1</td>
<td>227</td>
<td>227.000000</td>
<td>122.400</td>
<td>0.000000</td>
<td>0.000000</td>
<td>1.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">322</td>
<td>0.00</td>
<td>68</td>
<td>1</td>
<td>147.12</td>
<td>3</td>
<td>2</td>
<td>68</td>
<td>68.000000</td>
<td>147.120</td>
<td>0.881729</td>
<td>0.118271</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Univariate correlation expectedly pinpoints <code>total_sales</code> in during Q1-Q3 2011 as the most predictive feature; however, we can see that it is still not very predictive. This shows that the problem is not a trivial one.</p>
<div id="7702c17e" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>]].corr())</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#target and most predictive variable</span></span>
<span id="cb16-4">df[df.TargetSales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25_000</span>].plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>             TargetSales  total_sales
TargetSales     1.000000     0.558558
total_sales     0.558558     1.000000</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-12-output-2.png" width="619" height="429" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We randomly split the dataset into train and test sets at 80/20 ratio. We also confirm the distribution of <code>TargetSales</code> is similar across percentiles between train and test and only different at the upper end.</p>
<div id="1981b9a3" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#split into train-valid sets</span></span>
<span id="cb18-2">train_df, test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df,</span>
<span id="cb18-3">                                      test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, </span>
<span id="cb18-4">                                      random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb18-5">pd.concat([train_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]).reset_index(),</span>
<span id="cb18-6">test_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]).reset_index(),], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">TargetSales</th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">TargetSales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>count</td>
<td>2750.000000</td>
<td>count</td>
<td>688.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>mean</td>
<td>642.650436</td>
<td>mean</td>
<td>760.558808</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>std</td>
<td>4015.305436</td>
<td>std</td>
<td>4024.524400</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>min</td>
<td>0.000000</td>
<td>min</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0%</td>
<td>0.000000</td>
<td>0%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>10%</td>
<td>0.000000</td>
<td>10%</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>20%</td>
<td>0.000000</td>
<td>20%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>30%</td>
<td>0.000000</td>
<td>30%</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>40%</td>
<td>0.000000</td>
<td>40%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>50%</td>
<td>91.350000</td>
<td>50%</td>
<td>113.575000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>60%</td>
<td>260.308000</td>
<td>60%</td>
<td>277.836000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>70%</td>
<td>426.878000</td>
<td>70%</td>
<td>418.187000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>80%</td>
<td>694.164000</td>
<td>80%</td>
<td>759.582000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>90%</td>
<td>1272.997000</td>
<td>90%</td>
<td>1255.670000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>max</td>
<td>168469.600000</td>
<td>max</td>
<td>77099.380000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="naive-baseline-regression" class="level2">
<h2 class="anchored" data-anchor-id="naive-baseline-regression">Naive Baseline Regression</h2>
<p>The most naive solution is to simply predict <code>TargetSales</code> based on the features. We use a stacked ensemble of LightGBM, CatBoost, XGBoost, Random Forest and Extra Trees via AutoGluon. We train with <code>good_quality</code> preset, stated to be <a href="https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets">“Stronger than any other AutoML Framework”</a>, for speedy training and inference but feel free to try more performant options. We exclude the neural-network models as they require further preprocessing of the features. We use an industry-grade, non-parametric model to be as close to a real use case as possible and make a point that the methodology works not only in a toy-dataset setup.</p>
<div id="76ee73b7" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">preset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'good_quality'</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>).fit(train_df[selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>]], </span>
<span id="cb19-4">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb19-5">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb19-6">                                                      )</span>
<span id="cb19-7">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<div id="09d48c4d" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">metric_baseline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>])</span>
<span id="cb20-2">metric_baseline[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span></span>
<span id="cb20-3">metric_baseline</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'root_mean_squared_error': 3162.478744240967,
 'mean_squared_error': 10001271.807775924,
 'mean_absolute_error': 715.6442657130541,
 'r2': 0.3816166296854987,
 'pearsonr': 0.6190719671013133,
 'spearmanr': 0.47008461549340863,
 'median_absolute_error': 232.98208312988282,
 'earths_mover_distance': 287.77728784026124,
 'model': 'baseline'}</code></pre>
</div>
</div>
</section>
<section id="regression-on-winsorized-outcome" class="level2">
<h2 class="anchored" data-anchor-id="regression-on-winsorized-outcome">Regression on Winsorized Outcome</h2>
<div id="d0136cd0" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">outlier_per <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span></span>
<span id="cb22-2">outlier_cap_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].quantile(outlier_per)</span></code></pre></div>
</details>
</div>
<p>An alternative approach to deal with long/fat-tailed outcome is to train on a winsorized outcome. In our case, we cap the outlier at 99.0% or <code>TargetSales</code> equals 7,180.81. While this solves the long/fat-tailed issues, it does not deal with zero inflation and also introduce bias to the outcome. This leads to better performance when tested on the winsorized outcome, but not so much on the original outcome.</p>
<div id="1f88753e" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#winsorize</span></span>
<span id="cb23-2">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb23-3">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb23-4"></span>
<span id="cb23-5">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>]],</span>
<span id="cb23-6">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb23-7">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb23-8">                                                      )</span>
<span id="cb23-9"></span>
<span id="cb23-10">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<div id="b4e70517" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">metric_winsorized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>])</span>
<span id="cb24-2">metric_winsorized[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'winsorized'</span></span>
<span id="cb24-3">metric_winsorized</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'root_mean_squared_error': 3623.576377551195,
 'mean_squared_error': 13130305.76394704,
 'mean_absolute_error': 627.7880071099414,
 'r2': 0.18814697894155963,
 'pearsonr': 0.5757989413256978,
 'spearmanr': 0.504301956183441,
 'median_absolute_error': 219.62248107910156,
 'earths_mover_distance': 432.1288432991232,
 'model': 'winsorized'}</code></pre>
</div>
</div>
</section>
<section id="regression-on-log-plus-one-transformed-outcome" class="level2">
<h2 class="anchored" data-anchor-id="regression-on-log-plus-one-transformed-outcome">Regression on Log-plus-one-transformed Outcome</h2>
<p>Log transformation handles long/fat-tailed distribution and is especially useful for certain models since the transformed distribution is closer normal. However, it cannot handle zero-valued outcome and oftentimes scientists end up adding 1 to the outcome (so often that <code>numpy</code> even has a function for it). This not only introduces bias to the prediction, but also does not solve the zero-inflation as it becomes one-inflation instead.</p>
<div id="f6fa6f18" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#log</span></span>
<span id="cb26-2">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log1p)</span>
<span id="cb26-3">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log1p)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#from zero-inflated to one-inflated</span></span>
<span id="cb26-6">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>].hist()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-19-output-1.png" width="583" height="415" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that this is the best performing approach so far, which is one of the reasons why so many scientists end up going for this not-entirely-correct approach.</p>
<div id="a3a8a907" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>]],</span>
<span id="cb27-2">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb27-3">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb27-4">                                                      )</span>
<span id="cb27-5"></span>
<span id="cb27-6">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span>
<span id="cb27-7">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.expm1)</span></code></pre></div>
</details>
</div>
<div id="3a478639" class="cell" data-execution_count="20">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">metric_log1p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>])</span>
<span id="cb28-2">metric_log1p[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log1p'</span></span>
<span id="cb28-3">metric_log1p</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>{'root_mean_squared_error': 3725.342295894091,
 'mean_squared_error': 13878175.221577456,
 'mean_absolute_error': 618.9768466651894,
 'r2': 0.14190585634701047,
 'pearsonr': 0.5817166874396966,
 'spearmanr': 0.5338156315937898,
 'median_absolute_error': 89.55495441784018,
 'earths_mover_distance': 581.0494444960044,
 'model': 'log1p'}</code></pre>
</div>
</div>
</section>
<section id="hurdle-model" class="level2">
<h2 class="anchored" data-anchor-id="hurdle-model">Hurdle Model</h2>
<p>Hurdle model is a two-stage approach that handles zero inflation by first having a classification model to predict if the outcome is zero or not, then a regression model, trained only on examples with actual non-zero outcomes, to fit a log-transformed outcome. When retransforming the predictions from log to non-log numbers, we perform correction of underestimation using Duan’s method. During inference time, we multiply the predictions from the classification and corrected regression model.</p>
<div id="7707a407" class="cell" data-execution_count="21">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df.TargetSales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb30-2">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.TargetSales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4">predictor_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>]],</span>
<span id="cb30-5">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb30-6">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb30-7">                                                      )</span>
<span id="cb30-8">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_binary'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_cls.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<p>For our splits, 51.42% of train and 53.05% of test include customers with non-zero purchase outcome. As with all two-stage approaches, we need to make sure the intermediate model performs reasonably in classifying zero/non-zero outcomes.</p>
<div id="64867a84" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">caluclate_classification_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_binary'</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'accuracy': 0.6918604651162791,
 'precision': 0.6941069004479309,
 'recall': 0.6918604651162791,
 'f1_score': 0.6921418829824787,
 'confusion_matrix': array([[229,  94],
        [118, 247]])}</code></pre>
</div>
</div>
<div id="5e18a5d2" class="cell" data-execution_count="23">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">train_df_nonzero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[train_df.has_purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-2">test_df_nonzero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[test_df.has_purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#log</span></span>
<span id="cb33-5">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log)</span>
<span id="cb33-6">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log)</span></code></pre></div>
</details>
</div>
<p>After that, we perform log-transformed regression on the examples with non-zero outcome (1,414 examples in train). Without the need to worry about <code>ln(0)</code> outcome, the regression is much more straightforward albeit with fewer examples to train on.</p>
<div id="600fe759" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>].hist()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-25-output-1.png" width="575" height="415" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f6d17c66" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">predictor_reg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>).fit(train_df_nonzero[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>]],</span>
<span id="cb35-2">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb35-3">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb35-4">                                                      )</span>
<span id="cb35-5">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(test_df_nonzero[selected_features])</span>
<span id="cb35-6">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb35-7"></span>
<span id="cb35-8">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(test_df[selected_features])</span>
<span id="cb35-9">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb35-10"></span>
<span id="cb35-11">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.pred_binary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp</span></code></pre></div>
</details>
</div>
<p>For inference, we combine the binary prediction (purchase/no purchase) from the classification model with the re-transformed (exponentialized) numerical prediction from the regression model by simply multiplying them together. As you can see, this approach yields the best performance so far and this is where I used to think everything has been accounted for.</p>
<div id="8518e2e8" class="cell" data-execution_count="26">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">metric_hurdle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>])</span>
<span id="cb36-2">metric_hurdle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle'</span></span>
<span id="cb36-3">metric_hurdle</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>{'root_mean_squared_error': 3171.760744960863,
 'mean_squared_error': 10060066.22327469,
 'mean_absolute_error': 584.9162934881963,
 'r2': 0.3779813431428882,
 'pearsonr': 0.6769697889999318,
 'spearmanr': 0.5107083593715698,
 'median_absolute_error': 199.1780137692856,
 'earths_mover_distance': 286.381442541919,
 'model': 'hurdle'}</code></pre>
</div>
</div>
</section>
<section id="but-wait-there-is-moreーenter-naihua-duan" class="level2">
<h2 class="anchored" data-anchor-id="but-wait-there-is-moreーenter-naihua-duan">But Wait, There Is MoreーEnter Naihua Duan</h2>
<p>In the previous section, we have blissfully assumed that we can freely log-transform and re-transform the outcome during training and inference without any bias. This is not the case as there is a small bias generated in the process due to the error term.</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(y)%20=%20f(X)%20+%20%5Cepsilon"></p>
<p>where</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?y"> is actual outcome.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?X"> is the features.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(.)"> is a trained model.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is the error term.</p></li>
</ul>
<p>when re-transforming</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ay%20&amp;=%20exp(ln(y))%20%5C%5C%0A&amp;=%20exp(f(X)%20+%20%5Cepsilon%20)%20%5C%5C%0A&amp;=%20exp(f(X))%20%5Ccdot%20exp(%5Cepsilon)%20%5C%5C%0AE%5By%5D%20&amp;=%20E%5Bexp(f(X))%5D%20%5Ccdot%20E%5Bexp(%5Cepsilon)%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>The average treatment affect (ATE; <img src="https://latex.codecogs.com/png.latex?E%5By%5D">) is underestimated by <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D">. <a href="https://en.wikipedia.org/wiki/Naihua_Duan">Naihua Duan (段乃華)</a>, a Taiwanese biostatistician, suggested a consistent estimator of <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D"> in <a href="https://www.jstor.org/stable/2288126">his 1983 work</a> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Chat%20%5Clambda%20&amp;=%20E%5Bexp(ln(y)%20-%20ln(%5Chat%20y))%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>where</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Clambda"> is the Duan’s smearing estimator of the bias from re-transformation <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Chat%20y"> is the prediction aka <img src="https://latex.codecogs.com/png.latex?f(X)"></p></li>
</ul>
<pre><code>Fun Fact: If you assume Duan were a western name, you would have been 
pronouncing the method's name incorrectly since it should be [twàn]'s 
method, NOT /dwɑn/'s method.</code></pre>
<p>We can easily derive Duan’s smearing estimator by taking mean of error between actual and predicted <code>TargetSales</code> in the training set.</p>
<div id="a3332a30" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(train_df_nonzero[selected_features])</span>
<span id="cb39-2">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb39-3"></span>
<span id="cb39-4">smearing_estimator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.exp(train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>]))</span>
<span id="cb39-5">smearing_estimator</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>1.2280991653046711</code></pre>
</div>
</div>
<p>We multiply this to the predictions of the hurdle model to correct the underestimation due to re-transformation bias.</p>
<div id="0acd3930" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp_corrected'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smearing_estimator</span>
<span id="cb41-2">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.pred_binary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp_corrected</span>
<span id="cb41-3"></span>
<span id="cb41-4">metric_hurdle_corrected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>])</span>
<span id="cb41-5">metric_hurdle_corrected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle_corrected'</span></span>
<span id="cb41-6">metric_hurdle_corrected</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>{'root_mean_squared_error': 3055.3207868281233,
 'mean_squared_error': 9334985.110424023,
 'mean_absolute_error': 613.3946643257099,
 'r2': 0.42281345159207295,
 'pearsonr': 0.6769697889999318,
 'spearmanr': 0.5107083593715698,
 'median_absolute_error': 232.55557358084502,
 'earths_mover_distance': 241.61839859133218,
 'model': 'hurdle_corrected'}</code></pre>
</div>
</div>
</section>
<section id="the-eval-bar" class="level2">
<h2 class="anchored" data-anchor-id="the-eval-bar">The Eval Bar</h2>
<p>We can see that the hurdle model with Duan’s correction performs best across majority of the metrics. We will now deep dive on metrics where it did not to understand the caveats when taking this approach.</p>
<div id="ead26f6e" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">metric_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([metric_baseline,</span>
<span id="cb43-2">                       metric_winsorized,</span>
<span id="cb43-3">                       metric_log1p,</span>
<span id="cb43-4">                       metric_hurdle,</span>
<span id="cb43-5">                       metric_hurdle_corrected,])</span>
<span id="cb43-6"></span>
<span id="cb43-7">rank_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric_df.copy()</span>
<span id="cb43-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> metric_df.columns.tolist()[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb43-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearsonr'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearmanr'</span>]:</span>
<span id="cb43-10">        rank_df[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df[col].rank(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb43-12">        rank_df[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df[col].rank(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-13">rank_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df.drop(metric_df.columns.tolist()[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-14">rank_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-15">rank_df.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">root_mean_squared_error_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_squared_error_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_absolute_error_rank</td>
<td>5.0</td>
<td>4.0</td>
<td>3.0</td>
<td>1.0</td>
<td>2.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">r2_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pearsonr_rank</td>
<td>3.0</td>
<td>5.0</td>
<td>4.0</td>
<td>1.5</td>
<td>1.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">spearmanr_rank</td>
<td>5.0</td>
<td>4.0</td>
<td>1.0</td>
<td>2.5</td>
<td>2.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">median_absolute_error_rank</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
<td>2.0</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">earths_mover_distance_rank</td>
<td>3.0</td>
<td>4.0</td>
<td>5.0</td>
<td>2.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">avg_rank</td>
<td>3.375</td>
<td>4.0</td>
<td>3.625</td>
<td>2.25</td>
<td>1.75</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="3ebb6ddd" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">metric_df.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">root_mean_squared_error</td>
<td>3162.478744</td>
<td>3623.576378</td>
<td>3725.342296</td>
<td>3171.760745</td>
<td>3055.320787</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_squared_error</td>
<td>10001271.807776</td>
<td>13130305.763947</td>
<td>13878175.221577</td>
<td>10060066.223275</td>
<td>9334985.110424</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_absolute_error</td>
<td>715.644266</td>
<td>627.788007</td>
<td>618.976847</td>
<td>584.916293</td>
<td>613.394664</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">r2</td>
<td>0.381617</td>
<td>0.188147</td>
<td>0.141906</td>
<td>0.377981</td>
<td>0.422813</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pearsonr</td>
<td>0.619072</td>
<td>0.575799</td>
<td>0.581717</td>
<td>0.67697</td>
<td>0.67697</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">spearmanr</td>
<td>0.470085</td>
<td>0.504302</td>
<td>0.533816</td>
<td>0.510708</td>
<td>0.510708</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">median_absolute_error</td>
<td>232.982083</td>
<td>219.622481</td>
<td>89.554954</td>
<td>199.178014</td>
<td>232.555574</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">earths_mover_distance</td>
<td>287.777288</td>
<td>432.128843</td>
<td>581.049444</td>
<td>286.381443</td>
<td>241.618399</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="why-duans-correction-results-in-slightly-worse-mae" class="level3">
<h3 class="anchored" data-anchor-id="why-duans-correction-results-in-slightly-worse-mae">Why Duan’s Correction Results in Slightly Worse MAE?</h3>
<p>Duan’s method adjusts for underestimation from re-transformation of log outcome. This could lead to smaller extreme errors, but more frequent occurrences of less extreme ones. We verify this hypothesis by comparing mean absolute error before and after transformation for errors originally under and over 99th percentile. We confirm that is the case for our problem.</p>
<div id="bd3ff6b1" class="cell" data-execution_count="31">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">err_hurdle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb45-2">err_hurdle_corrected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of errors for Hurdle model without correction'</span>)</span>
<span id="cb45-5">err_hurdle.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>]) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Distribution of errors for Hurdle model without correction</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>count      688.000000
mean       584.916293
std       3119.628924
min          0.000000
25%          0.000000
50%        199.178014
75%        475.603446
90%        862.530026
95%       1237.540954
99%       6763.777844
max      55731.205996
dtype: float64</code></pre>
</div>
</div>
<div id="f39df705" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hurdle Model without correction'</span>)</span>
<span id="cb48-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error under 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb48-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error over 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb48-4"></span>
<span id="cb48-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hurdle Model with correction'</span>)</span>
<span id="cb48-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error under 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle_corrected[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb48-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error over 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle_corrected[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hurdle Model without correction
Mean absolute error under 99th percentile: 355.4918014848842
Mean absolute error over 99th percentile: 22904.641872667555
Hurdle Model with correction
Mean absolute error under 99th percentile: 392.7718802742851
Mean absolute error over 99th percentile: 22076.839798471465</code></pre>
</div>
</div>
</section>
<section id="importance-of-classification-model" class="level3">
<h3 class="anchored" data-anchor-id="importance-of-classification-model">Importance of Classification Model</h3>
<p>The overperformance of log-transform regression over both hurdle model approarches in Spearman’s rank correlation and median absolute error demonstrates the importance of a classification model. At first glance, it is perplexing since we have just spent a large portion of this article to justify that hurdle models handle zero inflation better and re-transformation without Duan’s method is biased. However, it becomes clear once you compare performance of the hurdle model with a classification model (f1 = 0.69) and a hypothetical, perfect classification model. Other metrics also improved but not nearly as drastic as MedAE and Spearman’s rank correlation.</p>
<div id="4f04211a" class="cell" data-execution_count="33">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected_perfect_cls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.has_purchase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp_corrected</span>
<span id="cb50-2">metric_hurdle_corrected_perfect_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected_perfect_cls'</span>])</span>
<span id="cb50-3">metric_hurdle_corrected_perfect_cls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle_corrected_perfect_cls'</span></span>
<span id="cb50-4"></span>
<span id="cb50-5">metric_df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([metric_baseline,</span>
<span id="cb50-6">                       metric_winsorized,</span>
<span id="cb50-7">                       metric_log1p,</span>
<span id="cb50-8">                       metric_hurdle,</span>
<span id="cb50-9">                       metric_hurdle_corrected,</span>
<span id="cb50-10">                       metric_hurdle_corrected_perfect_cls,])</span>
<span id="cb50-11">metric_df2.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">root_mean_squared_error</td>
<td>3162.478744</td>
<td>3623.576378</td>
<td>3725.342296</td>
<td>3171.760745</td>
<td>3055.320787</td>
<td>3030.854831</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_squared_error</td>
<td>10001271.807776</td>
<td>13130305.763947</td>
<td>13878175.221577</td>
<td>10060066.223275</td>
<td>9334985.110424</td>
<td>9186081.006625</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_absolute_error</td>
<td>715.644266</td>
<td>627.788007</td>
<td>618.976847</td>
<td>584.916293</td>
<td>613.394664</td>
<td>479.558294</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">r2</td>
<td>0.381617</td>
<td>0.188147</td>
<td>0.141906</td>
<td>0.377981</td>
<td>0.422813</td>
<td>0.43202</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pearsonr</td>
<td>0.619072</td>
<td>0.575799</td>
<td>0.581717</td>
<td>0.67697</td>
<td>0.67697</td>
<td>0.687639</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">spearmanr</td>
<td>0.470085</td>
<td>0.504302</td>
<td>0.533816</td>
<td>0.510708</td>
<td>0.510708</td>
<td>0.929419</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">median_absolute_error</td>
<td>232.982083</td>
<td>219.622481</td>
<td>89.554954</td>
<td>199.178014</td>
<td>232.555574</td>
<td>34.991964</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">earths_mover_distance</td>
<td>287.777288</td>
<td>432.128843</td>
<td>581.049444</td>
<td>286.381443</td>
<td>241.618399</td>
<td>234.587018</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
<td>hurdle_corrected_perfect_cls</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="remember-what-problem-we-are-solving" class="level3">
<h3 class="anchored" data-anchor-id="remember-what-problem-we-are-solving">Remember What Problem We Are Solving</h3>
<p>One last thing to remember is that we are trying to predict <strong>sales of each individual customer</strong>, not <strong>total sales of all customers</strong>. If we look at aggregated mean or sum of actual sales vs predicted sales, baseline regression performs best by far. This is due to the fact that without any constraints a regressor only minimizes the MSE loss and usually ends up predicting values around the mean to balance between under- and over-predictions. However, this level of prediction is often not very useful as a single point. Imagine you want to give promotions with higher or lower spend thresholds to customers according to their purchasing power; you will not be able to do so with a model that is accurate on aggregate but not so much on individual customers.</p>
<div id="087813e6" class="cell" data-execution_count="34">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">test_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>]].mean()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>TargetSales              760.558808
pred_baseline            791.043945
pred_winsorized          508.281555
pred_log1p_expm1         186.200281
pred_hurdle              527.286811
pred_hurdle_corrected    647.560493
dtype: float64</code></pre>
</div>
</div>
</section>
</section>
<section id="closing-remarks" class="level2">
<h2 class="anchored" data-anchor-id="closing-remarks">Closing Remarks</h2>
<p>And this is how you predict how much a customer will spend in the least wrong way. My hope is that you will not need to spend ten years in data science to find out how to do it like I did.</p>


</section>

 ]]></description>
  <category>retail</category>
  <category>zero-inflated</category>
  <category>long/fat-tailed</category>
  <category>hurdle</category>
  <guid>https://cstorm125.github.io/posts/sales_prediction/</guid>
  <pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cstorm125.github.io/posts/sales_prediction/featured_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to Have a Robustly Interesting Career in Data Science</title>
  <dc:creator>cstorm125 </dc:creator>
  <link>https://cstorm125.github.io/posts/interesting_career/</link>
  <description><![CDATA[ 




<p>I have been a data scientist👨‍💻 ever since around the time <a href="https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century">HBR popularized the term in its job sexiness article</a>. My run started out of necessity, since back then it was very difficult to get a job when you were an Econ graduate with an eclectic mix of skills in statistics and programming; suddenly it became one of the most sought-after skill combinations on the market. It has been about a decade since. Lately, I have been asked about how to have a successful career in the field. Success is quite the subjective term, but let me try to formulate my thoughts on how to keep it interesting doing what I love in spite of external circumstances.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/interesting_career/featured_image.jpg" class="img-fluid figure-img"></p>
<figcaption>featured_image</figcaption>
</figure>
</div>
<p><strong>Objective Function</strong> As any half decent scientist would do, let us begin at the desirable end state and work backwards. I have always optimized for business impact. I relish in seeing my models bring joy to customers, efficiency to selling partners, and productivity to fellow builders. Something as simple as seeing a widget on the home screen powered by one of my models makes my day. Thankfully, my data products have consistently delivered at least double-digit millions of dollars in value (cost savings and/or top-line uplifts) annually. And this keeps me sane in the midst of all the [insert-your-hype-keyword] FOMO. The key is to find an objective function that really matters to you, and not fall for the vanity metrics. For instance, I have written some research papers and did some fun open source projects, but a lot of these feel too abstract to quantify. If I were to try to optimize for them, I would likely end up chasing after citations, Github stars, or other arbitrary numbers. I would overfit them and the activities of writing papers and contributing to open source projects themselves would become secondary to the vanity metrics. This will not be the case if writing great research papers is something that really matters to you. You need to find an objective function that correlates almost perfectly with the joy you experience as a scientist.</p>
<p><strong>Build with Stakes</strong> As you move to fulfill your objectives, it is important that you do so by building concrete products with high enough stakes. I strongly believe this is the only way to level up as a scientist. The anti-thesis to this is to get stuck in the learning loop; you keep taking online courses, overfitting toy datasets, hunting for certificates, and you wonder why your career is not going anywhere while the snakeoil vendors keep buying new sports cars. It is because these learning materials when taken in excess only serve to make you feel good about yourself. Yes, you learned something new and yes, you might have built some capstone projects. But these have virtually no consequence if you fail. In fact, they are structured in a way that it is more difficult for you to fail. You stop thinking for yourself and just enjoy the pseudo-intellectual force feeding. It comes as no surprise that you need to think for yourself to grow as a scientist. The stakes do not have to be monetary. It can be anything that matters if you fail to complete your tasks. Enter a competition that evaluates scientific prowess (avoid slide show contests), create an open source project that helps with your hobbies, or most likely propose a project at work that affects your compensation/promotion evaluation. Conduct experiments, write production codes, and document everything either as technical reports or research papers. Hold yourself to the highest standards.</p>
<p><strong>Find The Right Party</strong> The most important person in your career is your mentor. Ideally, you want to find the person whose objective function aligns well with yours and have a clear track records of building with stakes. At different stages, you might have more than one for different aspects such as one for business and another for research, or for different perspectives. But if I were to be honest, you would be extremely lucky to find one at all. Your mentor should not only be the person you aspire to be, but also someone you think you would have a chance to overcome in a fair fight one day. Once you have found such person, you would usually be surrounded by good company. Humans are social animals and no matter how hard you try to follow your objective function and hold yourself to the highest standards, it will be almost impossible without people with similar mentality by your side. This is the most luck-dependent component. Be grateful if you can find the right party and be the party people would like to join one day.</p>
<p><strong>Integrity</strong> Every action has a price. We are in a privileged position to have a skillset that often determines the outcome of the business and rarely people question. You could gain a small but decisive advantage almost scotch-free; keep randomizing the seeds in validation splits and/or model initialization to get a marginally good result in offline evaluation to justify a launch, slice and dice the control and treatment groups to get a statistically significant result, pick a seemingly strong model that is out-of-domain to compare with your specifically finetuned model and call your model SoTA, the list goes on. But you should never do any of this, not only because you are a good person who does not want to lose sleep, but because you will eventually pay the price. I can guarantee there is always a price. Any useful scientist will call you out on any of the examples I gave; if not, time and repeated online experiments will expose your fudging of the numbers. Your choice is to keep job hopping before this happens and keep the career Ponzi scheme alive. Or simply be an honest scientist, enjoys the scientific process, learns from your mistakes, and grow.</p>
<p><strong>Side Quests</strong> Whatever you do, there is always a room for side quests. Your main quest is to satisfy your objective function, but as any good optimization method, exploration is needed to ensure a robust solution. A side quest is an excuse to try the new technology you have been raring to get your hands on, a low-stake confidence builder, and most importantly a great way to remind us how much we love the craft. These are things I hold closest to my heart as I navigate the fast-paced, uncertainty-filled landscape of data science. I have conducted a few dozens of model validation experiments and each one is never less anxiety-inducing than the last. We are in the business of results and results can be brutal. In these turbulent economic conditions, I hope these templates can be useful to you as much as they were to me in surviving some unpleasant situations that may be beyond our control and continuing to do the things we love.</p>
<p>Be safe from scammers and snakeoil vendors. And I will see you around.</p>



 ]]></description>
  <category>career</category>
  <guid>https://cstorm125.github.io/posts/interesting_career/</guid>
  <pubDate>Sat, 23 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cstorm125.github.io/posts/interesting_career/featured_image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
