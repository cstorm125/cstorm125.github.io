<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>chariblog</title>
<link>https://cstorm125.github.io/</link>
<atom:link href="https://cstorm125.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A collection of technical writings on applied science</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Sun, 29 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>(Almost) All SQL You Need</title>
  <dc:creator>cstorm125 </dc:creator>
  <link>https://cstorm125.github.io/posts/sql_almost/</link>
  <description><![CDATA[ 




<p>Skill mastery is an endeavor of diminishing returns. You can get from zero to <a href="http://act-r.psy.cmu.edu/wordpress/wp-content/uploads/2012/12/63ACS_JRA_PR.1982.pdf">good enough</a> (think first-time chess player to 500 online rating) within 100 hours of deliberate practice; however, it is exponentially more difficult to get from good enough to <a href="https://www.researchgate.net/publication/224827585_The_Role_of_Deliberate_Practice_in_the_Acquisition_of_Expert_Performance">mastered</a> (think a 500-rated chess player trying to become a 2200-FIDE-rated Candidate Master), requiring over 100x more delibrate practice. SQL is the basic building blocks of data analysis and I posit that most peopleーproduct managers, marketers, salespeople, and other makeshift data analystsーsimply need to be good enough.</p>
<p>This tutorial aims to encapsulate almost all SQL techniques you need to glean actionable insights from your (<a href="https://stackoverflow.com/questions/18884728/difference-between-transactional-and-non-transactional">non-transactional</a>) datasets. We will use the <a href="https://www.kaggle.com/datasets/marwa80/userbehavior">Taobao User Behavior</a> dataset and <a href="https://duckdb.org/">duckdb</a> to simulate a SQL interface. There will be idiosyncracies according to which flavors of SQL you are usingーPostgres, Presto, Redshift, BigQuery, and so onーbut you should be able to adapt the principles outlined here with a little help of modern coding assistants.</p>
<p>I recommend that you first quickly skim through this post to have a rough idea of what SQL is all about, then move on to complete the <a href="https://colab.research.google.com/github/cstorm125/cstorm125.github.io/blob/main/notebook/sql_almost_exercise.ipynb">exercise</a> for some hands-on shenanigans. While completing it, feel free to refer back to this post and read some sections more in details. The road to becoming a true SQL monkey starts with writing queries.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sql_almost/featured_image.jpg" class="img-fluid figure-img"></p>
<figcaption>featured_image</figcaption>
</figure>
</div>
<div id="822dfe17" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) </span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timeit</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sql_almost/UserBehavior.csv'</span>,</span>
<span id="cb1-12">      header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_id'</span>,</span>
<span id="cb1-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'item_id'</span>,</span>
<span id="cb1-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'behavior_type'</span>,</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'timestamp'</span>]</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#sample 5M rows out of 100M to run in reasonable time</span></span>
<span id="cb1-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000_000</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # save to parquet</span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># con = duckdb.connect()</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># con.register('transaction_tbl', df)</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output_dir = '../../data/sql_almost/transaction_tbl'</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.makedirs(output_dir, exist_ok=True)</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># con.execute(f"""</span></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># COPY transaction_tbl</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TO '{output_dir}'</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (FORMAT PARQUET, PARTITION_BY (category_id, behavior_type), OVERWRITE_OR_IGNORE);</span></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># """)</span></span></code></pre></div>
</details>
</div>
<section id="intuition" class="level2">
<h2 class="anchored" data-anchor-id="intuition">0. Intuition</h2>
<p>Imagine you are at a library to look for a certain piece of information. The entire library is off limits to the general public. The only way you can access any information is by telling the librarian exactly what you want and let them fetch it for you. The entire library is your <strong>database</strong>. The librarian is your <strong>query engine</strong> and what you tell them is your <strong>query</strong>. In the library, there are a number of shelves (representing <strong>tables</strong>) that contain any number of books (representing <strong>rows</strong> in a table) to answer your query. Each book from the same shelf contains the same number of pages (representing <strong>columns</strong> or <strong>fields</strong> in a row), each page having a distinct piece of information. Following your instruction, the librarian may walk to different shelves, scour some books and pages, mix-and-match the information, then present the answer to you. Therefore, our task is to give an instruction such that the librarian can give us the most accurate answer using the shortest time and energy possible.</p>
</section>
<section id="sanity-checks-keep-you-sane" class="level2">
<h2 class="anchored" data-anchor-id="sanity-checks-keep-you-sane">1. Sanity Checks Keep You Sane</h2>
<p>We are treating the <a href="https://www.kaggle.com/datasets/marwa80/userbehavior">Taobao User Behavior</a> dataset as our table called <code>transaction_tbl</code>. It is a 5M-row subset based on parquet files partitioned by <code>category_id</code> and <code>behavior_type</code>.</p>
<div id="d3af1054" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#short-hand function to execute query with duckdb easily</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> execute_query(query): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> con.execute(query).fetchdf()</span>
<span id="cb2-5"></span>
<span id="cb2-6">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb2-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">CREATE OR REPLACE TABLE transaction_tbl AS</span></span>
<span id="cb2-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT *</span></span>
<span id="cb2-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM read_parquet('../../data/sql_almost/transaction_tbl/*/*/*.parquet', hive_partitioning=true);</span></span>
<span id="cb2-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#load saved, partitioned table as transaction_tbl</span></span>
<span id="cb2-13">execute_query(query)</span></code></pre></div>
</details>
</div>
<p>The table is a run-of-the-mill user behavior log consisting of</p>
<ul>
<li><code>user_id</code>: identifier of user</li>
<li><code>item_id</code>: identifier of item</li>
<li><code>timestamp</code>: unix timestamp of when action happened</li>
<li><code>behavior_type</code>: what type of action it was</li>
<li><code>category_id</code>: identifier of category the item belongs to</li>
</ul>
<section id="example-select" class="level3">
<h3 class="anchored" data-anchor-id="example-select">Example: <code>select *</code></h3>
<p>The first thing you do with a table you have not seen before is to select a few rows to look at. The texts in variable <code>query</code> is what you would type in your SQL interface.</p>
<div id="f682b6a3" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from transaction_tbl limit 100;</span></span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">97</td>
<td>109393</td>
<td>336502</td>
<td>1512302682</td>
<td>pv</td>
<td>1003726</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">98</td>
<td>928768</td>
<td>2826670</td>
<td>1511780591</td>
<td>pv</td>
<td>1003726</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">99</td>
<td>719622</td>
<td>2297792</td>
<td>1511703912</td>
<td>pv</td>
<td>1003726</td>
</tr>
</tbody>
</table>

<p>100 rows × 5 columns</p>
</div>
</div>
</div>
<p><code>select *</code> returns all columns from a table, and is almost always followed by <code>limit [NUMBER OF ROWS YOU WANT]</code> in order to not return the entire table but a random subset of it. This is less of a problem in the day and age where most query engines have a built-in safeguard to not display the entire table as a result, otherwise you can crash your system by asking for a terabyte-level output.</p>
</section>
<section id="example-describe" class="level3">
<h3 class="anchored" data-anchor-id="example-describe">Example: <code>describe</code></h3>
<p>Another useful command is <code>describe</code>. It will tell you what the columns are, their data types, do they have null (missing) values and so on. Common data types are <code>int/bigint</code> for integers, <code>float</code> for approximate decimals, <code>varchar/string</code> for texts, <code>boolean</code> for true/false and <code>timestamp/date</code> for, well, timestamps and dates. However, they are always ever so slightly different depending on which SQL you are using so better confirm with the documentation such as <a href="https://prestodb.io/docs/current/language/types.html">this one for Presto</a>.</p>
<div id="80727b49" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb4-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">describe transaction_tbl;</span></span>
<span id="cb4-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">column_name</th>
<th data-quarto-table-cell-role="th">column_type</th>
<th data-quarto-table-cell-role="th">null</th>
<th data-quarto-table-cell-role="th">key</th>
<th data-quarto-table-cell-role="th">default</th>
<th data-quarto-table-cell-role="th">extra</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>user_id</td>
<td>BIGINT</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>item_id</td>
<td>BIGINT</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>timestamp</td>
<td>BIGINT</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>behavior_type</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>category_id</td>
<td>BIGINT</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-count-and-countdistinct-column" class="level3">
<h3 class="anchored" data-anchor-id="example-count-and-countdistinct-column">Example: <code>count</code> and <code>count(distinct [COLUMN])</code></h3>
<p>The last check you always want to do is to <code>count</code> how many rows exist in the table:</p>
<div id="a5fee1b0" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb5-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select count(*) from transaction_tbl;</span></span>
<span id="cb5-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>5000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can also count how many unique values are in any column by adding <code>distinct</code> in front of the column name in <code>count</code>. You can also name your derived columns to know which ones mean what using <code>as</code>.</p>
<div id="ec32bc92" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># count how many unique users</span></span>
<span id="cb6-2">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb6-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb6-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(*) as nb_event</span></span>
<span id="cb6-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct user_id) as nb_user</span></span>
<span id="cb6-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl;</span></span>
<span id="cb6-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">nb_event</th>
<th data-quarto-table-cell-role="th">nb_user</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>5000000</td>
<td>888335</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="assorted-platter-of-selects" class="level2">
<h2 class="anchored" data-anchor-id="assorted-platter-of-selects">2. Assorted Platter of Selects</h2>
<p>Now that you know how to sanity-check a table, let us move on to selecting what you want. This is often done by filtering the result with conditions using the <code>where</code> clause. Here are some examples you want to familiarize yourself with.</p>
<section id="example-who-are-the-users-that-viewed-item-2067266" class="level3">
<h3 class="anchored" data-anchor-id="example-who-are-the-users-that-viewed-item-2067266">Example: Who are the users that viewed item 2067266?</h3>
<p>Link multiple conditions with logical operators <code>and</code> / <code>or</code>.</p>
<div id="74187b93" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb7-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb7-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> distinct user_id</span></span>
<span id="cb7-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb7-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'pv'</span></span>
<span id="cb7-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and item_id = 2067266;</span></span>
<span id="cb7-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>377356</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>690994</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>485340</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>469061</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>457064</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>329947</td>
</tr>
</tbody>
</table>

<p>7 rows × 1 columns</p>
</div>
</div>
</div>
</section>
<section id="example-who-are-the-users-that-viewed-item-2067266-ranked-by-who-viewed-last-to-who-viewed-first" class="level3">
<h3 class="anchored" data-anchor-id="example-who-are-the-users-that-viewed-item-2067266-ranked-by-who-viewed-last-to-who-viewed-first">Example: Who are the users that viewed item 2067266, ranked by who viewed last to who viewed first?</h3>
<p>We use <code>order by [COLUMN]</code> followed by <code>asc</code> for ascending order (default) and <code>desc</code> for descending order.</p>
<div id="44788f76" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb8-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb8-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb8-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,timestamp</span></span>
<span id="cb8-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb8-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'pv'</span></span>
<span id="cb8-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and item_id = 2067266</span></span>
<span id="cb8-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by timestamp desc;</span></span>
<span id="cb8-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>241453</td>
<td>1512288234</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>485340</td>
<td>1512160311</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>690994</td>
<td>1512127740</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>469061</td>
<td>1511865189</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>329947</td>
<td>1511850299</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>457064</td>
<td>1511601891</td>
</tr>
</tbody>
</table>

<p>7 rows × 2 columns</p>
</div>
</div>
</div>
</section>
<section id="example-how-many-users-did-not-buy" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-users-did-not-buy">Example: How many users did not buy?</h3>
<p><code>&lt;&gt;</code> means not equal.</p>
<div id="0b9c9ae7" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb9-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb9-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(distinct user_id) </span></span>
<span id="cb9-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb9-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type &lt;&gt; 'buy';</span></span>
<span id="cb9-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-7"></span>
<span id="cb9-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count(DISTINCT user_id)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>882077</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-events-happened-before-november-26-2017-timestamp-1511622000" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-events-happened-before-november-26-2017-timestamp-1511622000">Example: How many events happened before November 26, 2017 (timestamp 1511622000)?</h3>
<p><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> also works with numeric columns.</p>
<div id="4dc7bf7d" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb10-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb10-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(*)</span></span>
<span id="cb10-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb10-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where timestamp &lt; 1511622000;</span></span>
<span id="cb10-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>489758</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-events-happened-between-november-25-2017-timestamp-1511535600-and-november-26-2017-timestamp-1511622000" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-events-happened-between-november-25-2017-timestamp-1511535600-and-november-26-2017-timestamp-1511622000">Example: How many events happened between November 25, 2017 (timestamp 1511535600) and November 26, 2017 (timestamp 1511622000)?</h3>
<p>You can use <code>between</code> to replace <code>&gt;=</code> and <code>&lt;=</code>.</p>
<div id="476bd504" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb11-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb11-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(*)</span></span>
<span id="cb11-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb11-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where timestamp between 1511535600 and 1511622000;</span></span>
<span id="cb11-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-7"></span>
<span id="cb11-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>487676</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-events-are-either-purchase-buy-or-add-to-cart-cart" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-events-are-either-purchase-buy-or-add-to-cart-cart">Example: How many events are either purchase (<code>buy</code>) or add-to-cart (<code>cart</code>)?</h3>
<p>We can use <code>in</code> in place of multiple <code>or</code></p>
<div id="8aa3bbb4" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb12-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb12-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(*)</span></span>
<span id="cb12-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb12-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type in ('buy', 'cart');</span></span>
<span id="cb12-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-7"></span>
<span id="cb12-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>376999</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Check to see if multiple <code>or</code> really gives the same result.</p>
<div id="f97c8b57" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb13-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb13-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(*)</span></span>
<span id="cb13-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb13-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'buy' or behavior_type = 'cart';</span></span>
<span id="cb13-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>376999</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-users-interact-pv-cart-fav-with-taobao-but-never-buy" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-users-interact-pv-cart-fav-with-taobao-but-never-buy">Example: How many users interact (<code>pv</code>, <code>cart</code>, <code>fav</code>) with Taobao but never <code>buy</code>?</h3>
<p>We can use <code>not</code> as a negation for <code>in</code>.</p>
<div id="c3bd2a06" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb14-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb14-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(distinct user_id)</span></span>
<span id="cb14-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb14-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type not in ('buy');</span></span>
<span id="cb14-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-7"></span>
<span id="cb14-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count(DISTINCT user_id)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>882077</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-behavior_type-ends-with-a-v" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-behavior_type-ends-with-a-v">Example: How many <code>behavior_type</code> ends with a <code>v</code>?</h3>
<p>We use <code>like</code> to match texts that are similar what we want. <code>%</code> is the wild card to say anything can come before/after it. In this simple example, we already know the answer is 2: <code>pv</code> and <code>fav</code>.</p>
<div id="e3240c52" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb15-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb15-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> count(distinct behavior_type)</span></span>
<span id="cb15-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb15-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type like '%v';</span></span>
<span id="cb15-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-7"></span>
<span id="cb15-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count(DISTINCT behavior_type)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="partitions-partitions-partitions" class="level2">
<h2 class="anchored" data-anchor-id="partitions-partitions-partitions">3. Partitions, Partitions, Partitions</h2>
<p>Once you have mastered the basic select patterns, the next thing you must never forget when selecting from a table is to <strong>ALWAYS SPECIFY THE PARTITIONS YOU NEED IN THE <code>WHERE</code> CLAUSE</strong>. A modern SQL table is stored as multiple compressed files (most commonly <code>parquet</code>) in a nested subfolder structure as seen below. In this case, the partitions (subfolders) are columns <code>category_id</code> and <code>behavior_type</code>.</p>
<blockquote class="blockquote">
<p>Fun Fact: Not only do you need to specify the partitions, you need to specify them with the <strong>correct data types</strong>. I once had a query than ran for 12 hours instead of 5 minutes, simply because I did not check if the partition was in datetime not string. Do not be me.</p>
</blockquote>
<div id="26f986d2" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_table_structure(table_path, first_category_id_dir):</span>
<span id="cb16-2"></span>
<span id="cb16-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print root folder</span></span>
<span id="cb16-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(table_path.split(os.sep)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  </span>
<span id="cb16-5"></span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#get category_id partitions</span></span>
<span id="cb16-7">    category_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([d <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(table_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isdir(os.path.join(table_path, d)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> d.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id='</span>)])</span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print only the first category_id partition</span></span>
<span id="cb16-10">    category_id_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(table_path, first_category_id_dir)</span>
<span id="cb16-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  └── </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>first_category_id_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-12"></span>
<span id="cb16-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#get behavior_type partitions</span></span>
<span id="cb16-14">    behavior_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([d <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(category_id_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isdir(os.path.join(category_id_path, d)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> d.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'behavior_type='</span>)])</span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print all behavior_type partitions</span></span>
<span id="cb16-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> behavior_type_dir <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> behavior_types:</span>
<span id="cb16-18">      behavior_type_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(category_id_path, behavior_type_dir)</span>
<span id="cb16-19">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"    └── </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>behavior_type_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-20"></span>
<span id="cb16-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#get all parquet files</span></span>
<span id="cb16-22">      files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(behavior_type_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.parquet'</span>)])</span>
<span id="cb16-23"></span>
<span id="cb16-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print all files under category_id, behavior_type partitions</span></span>
<span id="cb16-25">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(files):</span>
<span id="cb16-26">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb16-27">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"        └── </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-28">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb16-29">              <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"        ├── </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-30"></span>
<span id="cb16-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(category_ids) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb16-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(category_ids) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> more category_id folders..."</span>)</span>
<span id="cb16-33"></span>
<span id="cb16-34">print_table_structure(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sql_almost/transaction_tbl'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id=1462446'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>transaction_tbl
  └── category_id=1462446
    └── behavior_type=buy
        ├── data_0.parquet
        ├── data_1.parquet
        ├── data_10.parquet
        ├── data_2.parquet
        ├── data_3.parquet
        ├── data_4.parquet
        ├── data_5.parquet
        ├── data_6.parquet
        ├── data_7.parquet
        ├── data_8.parquet
        └── data_9.parquet
    └── behavior_type=cart
        ├── data_0.parquet
        ├── data_1.parquet
        ├── data_10.parquet
        ├── data_2.parquet
        ├── data_3.parquet
        ├── data_4.parquet
        ├── data_5.parquet
        ├── data_6.parquet
        ├── data_7.parquet
        ├── data_8.parquet
        └── data_9.parquet
    └── behavior_type=fav
        ├── data_0.parquet
        ├── data_1.parquet
        ├── data_2.parquet
        ├── data_3.parquet
        ├── data_4.parquet
        ├── data_5.parquet
        ├── data_6.parquet
        └── data_7.parquet
    └── behavior_type=pv
        ├── data_0.parquet
        ├── data_1.parquet
        ├── data_10.parquet
        ├── data_2.parquet
        ├── data_3.parquet
        ├── data_4.parquet
        ├── data_5.parquet
        ├── data_6.parquet
        ├── data_7.parquet
        ├── data_8.parquet
        └── data_9.parquet
  7796 more category_id folders...</code></pre>
</div>
</div>
<p>To understand why specifying partitions is crucial, let us try our first query again and see how long it takes to run. We conduct 100 trials of 100 runs each to get mean and standard deviation of query time.</p>
<section id="example-who-are-the-users-that-viewed-item-2067266-run-without-partition-in-where-clause." class="level3">
<h3 class="anchored" data-anchor-id="example-who-are-the-users-that-viewed-item-2067266-run-without-partition-in-where-clause.">Example: Who are the users that viewed item 2067266? Run WITHOUT partition in <code>where</code> clause.</h3>
<div id="59741120" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">select distinct user_id from transaction_tbl</span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">where item_id = 2067266;</span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-5"></span>
<span id="cb18-6">ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timeit.repeat(</span>
<span id="cb18-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: execute_query(query),</span>
<span id="cb18-8">  number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb18-9">  repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb18-10">)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Query time WITHOUT partition: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(ts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">±</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(ts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Query time WITHOUT partition: 0.15±0.08 seconds</code></pre>
</div>
</div>
</section>
<section id="example-who-are-the-users-that-viewed-item-2067266-run-with-category_id-partition-in-where-clause." class="level3">
<h3 class="anchored" data-anchor-id="example-who-are-the-users-that-viewed-item-2067266-run-with-category_id-partition-in-where-clause.">Example: Who are the users that viewed item 2067266? Run WITH <code>category_id</code> partition in <code>where</code> clause.</h3>
<div id="ab96d6b3" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">select distinct user_id from transaction_tbl</span></span>
<span id="cb20-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">where item_id = 2067266</span></span>
<span id="cb20-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> and category_id = 4339722;</span></span>
<span id="cb20-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-6"></span>
<span id="cb20-7">ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timeit.repeat(</span>
<span id="cb20-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: execute_query(query),</span>
<span id="cb20-9">  number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb20-10">  repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb20-11">)</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Query time WITH partition: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(ts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">±</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(ts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Query time WITH partition: 0.06±0.06 seconds</code></pre>
</div>
</div>
<p>What sorcery is this? The query time is roughly halved! This is because when we include partitions in the <code>where</code> clause, we are telling the query engine to <em>only look at the specific parts of the data</em> not the entire table. In real life, not specifying which partitions you need as detailed as possible can spell the difference between waiting for two hours or a few seconds.</p>
</section>
</section>
<section id="column-wise-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="column-wise-manipulation">4. Column-wise Manipulation</h2>
<p>Before we move on, you might have noticed that our dataset is a little bland with only a timestamp and categorical columns (<code>timestamp</code>, <code>user_id</code>, <code>item_id</code>, <code>category_id</code>, <code>behavior_type</code>). In reality, such table as the one we are using often contains <code>price</code> of the item and <code>quantity</code> by which they were purchased. We can add that by manipulating existing columns.</p>
<section id="example-add-price-column-where-price-is-item_id-modulus-1000-50" class="level3">
<h3 class="anchored" data-anchor-id="example-add-price-column-where-price-is-item_id-modulus-1000-50">Example: Add <code>price</code> column where price is <code>item_id</code> modulus 1000 + 50</h3>
<p>Here we add the <code>price</code> column we randomly generated to the result. You can manipulate any numeric columns with <a href="https://www.geeksforgeeks.org/sql-arithmetic-operators/%5D">arithmetic operators</a>.</p>
<div id="360fb992" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb22-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb22-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb22-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb22-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl;</span></span>
<span id="cb22-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb22-7"></span>
<span id="cb22-8">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 6 columns</p>
</div>
</div>
</div>
</section>
<section id="example-add-quantity-column-that-is-a-random-number-between-1-and-10-only-for-buy-events.-for-all-other-events-leave-it-as-missing-values-null." class="level3">
<h3 class="anchored" data-anchor-id="example-add-quantity-column-that-is-a-random-number-between-1-and-10-only-for-buy-events.-for-all-other-events-leave-it-as-missing-values-null.">Example: Add <code>quantity</code> column that is a random number between 1 and 10, only for <code>buy</code> events. For all other events, leave it as missing values (<code>null</code>).</h3>
<p>When you buy from a store, you need to specify a quantity of the items; however, for other events (when you view, favorite or add-to-cart), you do not. We must give the query engine an if-else logic depending on the values in each row. In SQL, we do this by using <code>case when [CONDITION] then [VALUE] else [DEFAULT VALUE] end</code>. We use <code>setseed</code> to keep the randomized numbers the same set.</p>
<div id="6dcf2d0a" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#random is randomizing number between 0 and 1 then floor rounds it down</span></span>
<span id="cb23-2">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb23-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb23-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb23-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb23-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb23-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb23-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb23-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-10"></span>
<span id="cb23-11">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 7 columns</p>
</div>
</div>
</div>
<p>We can also have as many <code>when</code> as we want. If we want to explicitly state the conditions for all <code>behavior_type</code>, it will look something like:</p>
<div id="540aa603" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb24-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb24-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb24-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb24-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case </span></span>
<span id="cb24-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 </span></span>
<span id="cb24-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   when behavior_type = 'pv' then null</span></span>
<span id="cb24-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   when behavior_type = 'cart' then null</span></span>
<span id="cb24-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   when behavior_type = 'fav' then null</span></span>
<span id="cb24-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   else null </span></span>
<span id="cb24-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  end as quantity</span></span>
<span id="cb24-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl;</span></span>
<span id="cb24-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-16"></span>
<span id="cb24-17">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 7 columns</p>
</div>
</div>
</div>
</section>
<section id="example-calculate-sales-by-multiplying-price-and-quantity" class="level3">
<h3 class="anchored" data-anchor-id="example-calculate-sales-by-multiplying-price-and-quantity">Example: Calculate <code>sales</code> by multiplying <code>price</code> and <code>quantity</code></h3>
<p>We can do operations among columns of the table. This example necessitates us to perform <code>select</code> twice: first to create <code>price</code> and <code>quantity</code>, then to create <code>sales</code> by multiplying them together. We do this by writing a subquery.</p>
<div id="a94bf415" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb25-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb25-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> whatever_subquery_alias_you_want.*</span></span>
<span id="cb25-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb25-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from </span></span>
<span id="cb25-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb25-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb25-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb25-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb25-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl) whatever_subquery_alias_you_want;</span></span>
<span id="cb25-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-14"></span>
<span id="cb25-15">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>6.0</td>
<td>3198.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 8 columns</p>
</div>
</div>
</div>
<p>You would notice that the query becomes exponentially less readable with subqueries. This is especially the case when you have multiple nested subqueries and they become unreadable even by you in the next 3 months. An elegant solution is to separate these subqueries with <code>with</code> clauses. This is especially useful if you have a subquery you would like to reuse later in <em>the same query</em>. There is no performance difference between subqueries and <code>with</code> clauses, so pick what is easiest to read for you.</p>
<div id="e246a4a4" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb26-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with t1_tbl as (</span></span>
<span id="cb26-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb26-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb26-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb26-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb26-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb26-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb26-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb26-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb26-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t1_tbl;</span></span>
<span id="cb26-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-17"></span>
<span id="cb26-18">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>6.0</td>
<td>3198.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 8 columns</p>
</div>
</div>
</div>
</section>
<section id="example-fill-in-missing-values-in-sales-with-zero." class="level3">
<h3 class="anchored" data-anchor-id="example-fill-in-missing-values-in-sales-with-zero.">Example: Fill in missing values in <code>sales</code> with zero.</h3>
<p>We use <code>coalesce</code> to fill in missing values. Notice that we can have multiple <code>with</code> clauses (consecutive ones puncutated by <code>,</code> and do not need <code>with</code>) depending on how you thin is most readable.</p>
<div id="6779ae4f" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb27-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with t1_tbl as (</span></span>
<span id="cb27-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb27-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb27-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb27-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb27-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb27-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t2_tbl as (</span></span>
<span id="cb27-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb27-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb27-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb27-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t1_tbl</span></span>
<span id="cb27-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb27-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb27-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id</span></span>
<span id="cb27-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,timestamp</span></span>
<span id="cb27-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,behavior_type</span></span>
<span id="cb27-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,category_id</span></span>
<span id="cb27-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price</span></span>
<span id="cb27-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,quantity</span></span>
<span id="cb27-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,coalesce(sales, 0) as sales</span></span>
<span id="cb27-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t2_tbl;</span></span>
<span id="cb27-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-30"></span>
<span id="cb27-31">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>2.0</td>
<td>1066.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
<td>0.0</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 8 columns</p>
</div>
</div>
</div>
</section>
<section id="example-convert-timestamp-from-unix-timestamp-to-yyyy-mm-dd-format." class="level3">
<h3 class="anchored" data-anchor-id="example-convert-timestamp-from-unix-timestamp-to-yyyy-mm-dd-format.">Example: Convert timestamp from unix timestamp to <code>yyyy-mm-dd</code> format.</h3>
<p>Datetime conversion, as in any programming script, is a very confusing affair, so I highly recommend you refer to your specific SQL’s documentation such as <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">this one for Spark</a>. But the idea is simply applying some function over your columns. Here we use <code>to_timestamp</code> to convert from <code>int</code> to unix timestamp and then use <code>strftime</code> to convert to a string formatted as <code>yyyy-mm-dd</code>.</p>
<div id="0a09739d" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb28-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with t1_tbl as (</span></span>
<span id="cb28-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb28-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb28-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb28-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb28-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb28-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb28-11"></span>
<span id="cb28-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t2_tbl as (</span></span>
<span id="cb28-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb28-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb28-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb28-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t1_tbl</span></span>
<span id="cb28-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb28-18"></span>
<span id="cb28-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t3_tbl as (</span></span>
<span id="cb28-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb28-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb28-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id</span></span>
<span id="cb28-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,timestamp</span></span>
<span id="cb28-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,behavior_type</span></span>
<span id="cb28-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,category_id</span></span>
<span id="cb28-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price</span></span>
<span id="cb28-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,quantity</span></span>
<span id="cb28-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,coalesce(sales, 0) as sales</span></span>
<span id="cb28-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t2_tbl)</span></span>
<span id="cb28-30"></span>
<span id="cb28-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb28-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb28-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,to_timestamp(timestamp) as event_timestamp</span></span>
<span id="cb28-34"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,strftime(to_timestamp(timestamp), '%Y-%m-%d') as event_date</span></span>
<span id="cb28-35"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t3_tbl;</span></span>
<span id="cb28-36"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-37"></span>
<span id="cb28-38">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">event_date</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>5.0</td>
<td>2665.0</td>
<td>2017-12-01 14:22:02+09:00</td>
<td>2017-12-01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-28 22:43:12+09:00</td>
<td>2017-11-28</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-29 19:51:56+09:00</td>
<td>2017-11-29</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-26 15:24:01+09:00</td>
<td>2017-11-26</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 08:01:56+09:00</td>
<td>2017-12-03</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-30 12:36:34+09:00</td>
<td>2017-11-30</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 10 columns</p>
</div>
</div>
</div>
</section>
<section id="example-make-a-string-column-year_month-that-takes-only-the-yyyy-mm-part-from-event_timestamp." class="level3">
<h3 class="anchored" data-anchor-id="example-make-a-string-column-year_month-that-takes-only-the-yyyy-mm-part-from-event_timestamp.">Example: Make a string column <code>year_month</code> that takes only the <code>yyyy-mm</code> part from <code>event_timestamp</code>.</h3>
<p>Most query engines have built-in functions to manipulate texts such as <a href="https://duckdb.org/docs/stable/sql/functions/text.html">this one for duckdb</a>. However, in this case, since <code>event_timestamp</code> is a timestmap, we need to convert its data type to string before applying the function <code>substring</code> by using <code>cast([COLUMN] as [DATA TYPE])</code>.</p>
<div id="af7584e4" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb29-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with t1_tbl as (</span></span>
<span id="cb29-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb29-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb29-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb29-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb29-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb29-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t2_tbl as (</span></span>
<span id="cb29-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb29-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb29-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb29-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t1_tbl</span></span>
<span id="cb29-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t3_tbl as (</span></span>
<span id="cb29-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb29-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb29-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id</span></span>
<span id="cb29-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,timestamp</span></span>
<span id="cb29-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,behavior_type</span></span>
<span id="cb29-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,category_id</span></span>
<span id="cb29-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price</span></span>
<span id="cb29-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,quantity</span></span>
<span id="cb29-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,coalesce(sales, 0) as sales</span></span>
<span id="cb29-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t2_tbl),</span></span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t4_tbl as (</span></span>
<span id="cb29-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb29-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb29-34"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,to_timestamp(timestamp) as event_timestamp</span></span>
<span id="cb29-35"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,strftime(to_timestamp(timestamp), '%Y-%m-%d') as event_date</span></span>
<span id="cb29-36"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t3_tbl)</span></span>
<span id="cb29-37"></span>
<span id="cb29-38"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb29-39"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb29-40"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,substring(cast(event_timestamp as varchar),1,7) as year_month</span></span>
<span id="cb29-41"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t4_tbl;</span></span>
<span id="cb29-42"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-43"></span>
<span id="cb29-44">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">event_date</th>
<th data-quarto-table-cell-role="th">year_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>5.0</td>
<td>2665.0</td>
<td>2017-12-01 14:22:02+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-28 22:43:12+09:00</td>
<td>2017-11-28</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-29 19:51:56+09:00</td>
<td>2017-11-29</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999997</td>
<td>461462</td>
<td>1642299</td>
<td>1511677441</td>
<td>pv</td>
<td>999980</td>
<td>349</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-26 15:24:01+09:00</td>
<td>2017-11-26</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4999998</td>
<td>891831</td>
<td>2064564</td>
<td>1512255716</td>
<td>pv</td>
<td>999980</td>
<td>614</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 08:01:56+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4999999</td>
<td>10430</td>
<td>2006178</td>
<td>1512012994</td>
<td>pv</td>
<td>999980</td>
<td>228</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-30 12:36:34+09:00</td>
<td>2017-11-30</td>
<td>2017-11</td>
</tr>
</tbody>
</table>

<p>5000000 rows × 11 columns</p>
</div>
</div>
</div>
</section>
<section id="example-save-the-manipulations-done-so-far-as-a-view-to-be-used-later." class="level3">
<h3 class="anchored" data-anchor-id="example-save-the-manipulations-done-so-far-as-a-view-to-be-used-later.">Example: Save the manipulations done so far as a <code>view</code> to be used later.</h3>
<p>You’ll notice that even with the <code>with</code> clauses, our query seems substantially more clunky now. We do not want to be re-writing these lines every time we reuse this set of results for other queries. Luckily, there is a solution called <code>view</code>. A view saves the query logic that can be used for other queries later. Unlike actual SQL tables, the data are not stored physically on your database, so the query saved to a view will still run every time it is called.</p>
<p>This query creates the view:</p>
<div id="d5b3d29b" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb30-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">create or replace view transaction_tbl_x as (</span></span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with t1_tbl as (</span></span>
<span id="cb30-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb30-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb30-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id % 1000 + 50 as price</span></span>
<span id="cb30-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,case when behavior_type = 'buy' then FLOOR(RANDOM() * 10) + 1 else null end as quantity</span></span>
<span id="cb30-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl</span></span>
<span id="cb30-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb30-13"></span>
<span id="cb30-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t2_tbl as (</span></span>
<span id="cb30-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb30-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb30-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price * quantity as sales</span></span>
<span id="cb30-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t1_tbl</span></span>
<span id="cb30-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb30-20"></span>
<span id="cb30-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t3_tbl as (</span></span>
<span id="cb30-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb30-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb30-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id</span></span>
<span id="cb30-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,timestamp</span></span>
<span id="cb30-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,behavior_type</span></span>
<span id="cb30-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,category_id</span></span>
<span id="cb30-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,price</span></span>
<span id="cb30-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,quantity</span></span>
<span id="cb30-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,coalesce(sales, 0) as sales</span></span>
<span id="cb30-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t2_tbl),</span></span>
<span id="cb30-32"></span>
<span id="cb30-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t4_tbl as (</span></span>
<span id="cb30-34"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb30-35"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb30-36"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,to_timestamp(timestamp) as event_timestamp</span></span>
<span id="cb30-37"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,strftime(to_timestamp(timestamp), '%Y-%m-%d') as event_date</span></span>
<span id="cb30-38"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t3_tbl)</span></span>
<span id="cb30-39"></span>
<span id="cb30-40"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb30-41"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb30-42"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,substring(cast(event_timestamp as varchar),1,7) as year_month</span></span>
<span id="cb30-43"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from t4_tbl</span></span>
<span id="cb30-44"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-45"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-46"></span>
<span id="cb30-47">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Count</th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
<p>This query reuses it by a simple <code>select *</code>:</p>
<div id="24e4367d" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb31-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from transaction_tbl_x limit 100;</span></span>
<span id="cb31-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-6"></span>
<span id="cb31-7">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">event_date</th>
<th data-quarto-table-cell-role="th">year_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>184439</td>
<td>688483</td>
<td>1512105722</td>
<td>buy</td>
<td>1000858</td>
<td>533</td>
<td>5.0</td>
<td>2665.0</td>
<td>2017-12-01 14:22:02+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>860167</td>
<td>3032030</td>
<td>1511876592</td>
<td>pv</td>
<td>1000858</td>
<td>80</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-28 22:43:12+09:00</td>
<td>2017-11-28</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29019</td>
<td>1174848</td>
<td>1511952716</td>
<td>pv</td>
<td>1000858</td>
<td>898</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-29 19:51:56+09:00</td>
<td>2017-11-29</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">97</td>
<td>109393</td>
<td>336502</td>
<td>1512302682</td>
<td>pv</td>
<td>1003726</td>
<td>552</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 21:04:42+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">98</td>
<td>928768</td>
<td>2826670</td>
<td>1511780591</td>
<td>pv</td>
<td>1003726</td>
<td>720</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-27 20:03:11+09:00</td>
<td>2017-11-27</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">99</td>
<td>719622</td>
<td>2297792</td>
<td>1511703912</td>
<td>pv</td>
<td>1003726</td>
<td>842</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-26 22:45:12+09:00</td>
<td>2017-11-26</td>
<td>2017-11</td>
</tr>
</tbody>
</table>

<p>100 rows × 11 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="aggregation-aka-group-by" class="level2">
<h2 class="anchored" data-anchor-id="aggregation-aka-group-by">5. Aggregation aka Group By</h2>
<p>When you have millions of rows of data, you do not want to look at them one by one; you want to know how they appear in aggregateーhow many events there are for each type, which items are favorited the most/least, how many items users buy on average, and so on. In fact, you have already learned how to do some of this. <code>count</code> and <code>count(distinct [COLUMN])</code> are examples of aggregation over the entire table. In this section, we will also learn to use <code>group by</code> to get aggregated values according to the columns we want.</p>
<section id="example-how-many-events-are-there-for-each-event-type-behavior_type" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-events-are-there-for-each-event-type-behavior_type">Example: How many events are there for each event type (<code>behavior_type</code>)?</h3>
<p>You can order by the newly created <code>nb_event</code> column to sort event types in descending order according to how many events they have. As expected, it is views, add-to-carts, favorites, then purchases.</p>
<div id="32510a06" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb32-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb32-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> behavior_type</span></span>
<span id="cb32-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(*) as nb_event</span></span>
<span id="cb32-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb32-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by behavior_type</span></span>
<span id="cb32-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by nb_event desc;</span></span>
<span id="cb32-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">nb_event</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>pv</td>
<td>4478549</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>cart</td>
<td>276307</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>fav</td>
<td>144452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>buy</td>
<td>100692</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>One neat trick is that you do not have to write the column names in <code>group by</code> or <code>order by</code> and use numbering instead; for instance, 1 means the first column selected, in this case <code>behavior_type</code>.</p>
<div id="f6b41d05" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb33-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb33-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> behavior_type</span></span>
<span id="cb33-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(*) as nb_event</span></span>
<span id="cb33-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb33-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb33-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by 2 desc;</span></span>
<span id="cb33-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-11"></span>
<span id="cb33-12">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">nb_event</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>pv</td>
<td>4478549</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>cart</td>
<td>276307</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>fav</td>
<td>144452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>buy</td>
<td>100692</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-what-are-the-top-10-items-that-got-favorited-by-most-number-of-unique-customers" class="level3">
<h3 class="anchored" data-anchor-id="example-what-are-the-top-10-items-that-got-favorited-by-most-number-of-unique-customers">Example: What are the top 10 items that got favorited by most number of unique customers?</h3>
<p>When used in conjunction with <code>where</code>, the <code>where</code> clause comes before <code>group by</code>.</p>
<div id="e9eebc5e" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb34-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb34-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> item_id</span></span>
<span id="cb34-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct user_id) as nb_user</span></span>
<span id="cb34-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb34-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'fav'</span></span>
<span id="cb34-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb34-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by 2 desc</span></span>
<span id="cb34-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">limit 10;</span></span>
<span id="cb34-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb34-13"></span>
<span id="cb34-14">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">nb_user</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2331370</td>
<td>43</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>3845720</td>
<td>41</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2279428</td>
<td>40</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>2364679</td>
<td>37</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>3403645</td>
<td>35</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>1783990</td>
<td>33</td>
</tr>
</tbody>
</table>

<p>10 rows × 2 columns</p>
</div>
</div>
</div>
</section>
<section id="example-what-is-the-average-standard-deviation-min-and-max-spend-per-user" class="level3">
<h3 class="anchored" data-anchor-id="example-what-is-the-average-standard-deviation-min-and-max-spend-per-user">Example: What is the average, standard deviation, min, and max spend per user?</h3>
<p>First, we need to <code>sum</code> up all <code>sales</code> for each user then perform the <code>avg</code>, <code>stddev</code>, <code>min</code> and <code>max</code> aggregation over all users. We can also see quantiles using functions like <code>approx_quantile([COLUMN], [QUANTILE])</code>.</p>
<div id="012d8108" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb35-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb35-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min(spend) as min_spend</span></span>
<span id="cb35-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,approx_quantile(spend, 0.25) as p25</span></span>
<span id="cb35-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,avg(spend) as avg_spend</span></span>
<span id="cb35-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,stddev(spend) as std_spend</span></span>
<span id="cb35-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,approx_quantile(spend, 0.5) as p50</span></span>
<span id="cb35-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,approx_quantile(spend, 0.75) as p75</span></span>
<span id="cb35-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,max(spend) as max_spend</span></span>
<span id="cb35-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from</span></span>
<span id="cb35-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb35-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb35-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as spend</span></span>
<span id="cb35-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb35-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb35-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) a;</span></span>
<span id="cb35-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb35-20"></span>
<span id="cb35-21">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">min_spend</th>
<th data-quarto-table-cell-role="th">p25</th>
<th data-quarto-table-cell-role="th">avg_spend</th>
<th data-quarto-table-cell-role="th">std_spend</th>
<th data-quarto-table-cell-role="th">p50</th>
<th data-quarto-table-cell-role="th">p75</th>
<th data-quarto-table-cell-role="th">max_spend</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.0</td>
<td>0.0</td>
<td>343.119825</td>
<td>1343.99162</td>
<td>0.0</td>
<td>0.0</td>
<td>33513.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-how-many-percentage-of-customer-purchased-at-least-once" class="level3">
<h3 class="anchored" data-anchor-id="example-how-many-percentage-of-customer-purchased-at-least-once">Example: How many percentage of customer purchased at least once?</h3>
<p>As you might notice from the last example, most of the customers have spend equals zero. This is a typical distribution in a retail business where most users come to window shop and only a few will make a purchase. We can find out % of those who made at least one purchase by combining <code>avg</code> aggregation and the <code>case when</code> if-else logic.</p>
<div id="212bcf8f" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb36-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb36-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> avg(case when spend &gt; 0 then 1 else 0 end) as conversion_rate</span></span>
<span id="cb36-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from</span></span>
<span id="cb36-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb36-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb36-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as spend</span></span>
<span id="cb36-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb36-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb36-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) a;</span></span>
<span id="cb36-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb36-14"></span>
<span id="cb36-15">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">conversion_rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.102035</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-give-me-only-customers-who-have-bought-at-least-one-item-more-expensive-than-100." class="level3">
<h3 class="anchored" data-anchor-id="example-give-me-only-customers-who-have-bought-at-least-one-item-more-expensive-than-100.">Example: Give me only customers who have bought at least one item more expensive than $100.</h3>
<p>In the same manner we use <code>where</code> clause to filter <code>select</code>, we can also use <code>having</code> to filter aggregations. This works exactly the same where as how you would do aggregation first then filter it with a subquery. Most modern query engines treat them the same way in terms of performance so pick whichever is more readable to you.</p>
<div id="f9c3e3be" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb37-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb37-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb37-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,min(price) as min_price</span></span>
<span id="cb37-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb37-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'buy'</span></span>
<span id="cb37-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb37-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">having min_price &gt; 100</span></span>
<span id="cb37-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by min_price;</span></span>
<span id="cb37-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-13"></span>
<span id="cb37-14">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">min_price</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>782669</td>
<td>101</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>302287</td>
<td>101</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>773094</td>
<td>101</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">85577</td>
<td>340274</td>
<td>1049</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">85578</td>
<td>603498</td>
<td>1049</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">85579</td>
<td>438867</td>
<td>1049</td>
</tr>
</tbody>
</table>

<p>85580 rows × 2 columns</p>
</div>
</div>
</div>
</section>
<section id="example-for-each-user-who-have-favorited-anything-give-me-a-list-of-items-they-have-favorited-ordered-by-timestamp-in-ascending-order." class="level3">
<h3 class="anchored" data-anchor-id="example-for-each-user-who-have-favorited-anything-give-me-a-list-of-items-they-have-favorited-ordered-by-timestamp-in-ascending-order.">Example: For each user who have favorited anything, give me a list of items they have favorited ordered by timestamp in ascending order.</h3>
<p>Today you might run into preparing a sequence dataset to train LLMs, in which case you want to concatenate a series of values from a column. Most modern SQL handles this such as <a href="https://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#array-functions">Spark SQL</a> and <a href="https://prestodb.io/docs/current/functions/array.html">Presto</a>. In duckdb, we can use <code>string_agg</code> and keep order from earliest to latest timestamp by using <code>order by</code>.</p>
<div id="c3582d76" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb38-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb38-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb38-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,string_agg(item_id order by timestamp) as item_id_list</span></span>
<span id="cb38-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb38-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'fav'</span></span>
<span id="cb38-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb38-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-11"></span>
<span id="cb38-12">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id_list</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>744534</td>
<td>2149136,88810,4629792</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>517461</td>
<td>4325698,5109079,2036947</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>261004</td>
<td>1289993,4431704</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">98434</td>
<td>702058</td>
<td>4753515</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">98435</td>
<td>865408</td>
<td>2643630</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">98436</td>
<td>391171</td>
<td>5154868</td>
</tr>
</tbody>
</table>

<p>98437 rows × 2 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="window-function" class="level2">
<h2 class="anchored" data-anchor-id="window-function">6. Window Function</h2>
<p>Aggregation is very powerful, but a major downside is that it collapses the total rows into aggregated values. This means that after using <code>group by</code>, you lose the individual detail of each original row. You can no longer easily ask questions about the sequence of events, like “What happened just before this?” or “What is the third item in this list?”. Window functions solve this by allowing you to perform calculations on a related set of rows (a “window”) without making those rows disappear. They let you calculate things like rankings, running totals, or compare values across rows, all while keeping all your original data rows intact.</p>
<section id="example-for-each-user-find-their-second-to-last-event." class="level3">
<h3 class="anchored" data-anchor-id="example-for-each-user-find-their-second-to-last-event.">Example: For each user, find their second-to-last event.</h3>
<p>We might be able to use <code>min/max</code> aggregation with some subqueries to get the last event, but second-to-last event is a bit convoluted to retrieve with <code>group by</code> alone. This is trivial when we use <code>row_number() over (partition by [WINDOW COLUMN] order by [ORDERING COLUMN] asc/desc)</code> to get the ranking numbers (starting with 1), then filter only the rows we need (<code>rnk=2</code>).</p>
<div id="e6814a5d" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb39-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from</span></span>
<span id="cb39-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb39-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb39-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,row_number() over (partition by user_id order by timestamp desc) as rnk</span></span>
<span id="cb39-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x) a</span></span>
<span id="cb39-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where rnk=2</span></span>
<span id="cb39-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-11"></span>
<span id="cb39-12">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="36">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">event_date</th>
<th data-quarto-table-cell-role="th">year_month</th>
<th data-quarto-table-cell-role="th">rnk</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6</td>
<td>730246</td>
<td>1512151025</td>
<td>pv</td>
<td>4756105</td>
<td>296</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 02:57:05+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>58</td>
<td>274807</td>
<td>1512191821</td>
<td>pv</td>
<td>4458428</td>
<td>857</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 14:17:01+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>73</td>
<td>2561888</td>
<td>1512224052</td>
<td>pv</td>
<td>753984</td>
<td>938</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 23:14:12+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">753406</td>
<td>1017789</td>
<td>797757</td>
<td>1512179970</td>
<td>pv</td>
<td>883960</td>
<td>807</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 10:59:30+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">753407</td>
<td>1017827</td>
<td>4777442</td>
<td>1512258856</td>
<td>pv</td>
<td>3607361</td>
<td>492</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 08:54:16+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">753408</td>
<td>1017858</td>
<td>850224</td>
<td>1512291735</td>
<td>pv</td>
<td>3800818</td>
<td>274</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 18:02:15+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
<td>2</td>
</tr>
</tbody>
</table>

<p>753409 rows × 12 columns</p>
</div>
</div>
</div>
<p>We can confirm that these are one second-to-last event each from users who have a least 2 events.</p>
<div id="311c309b" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb40-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select count(*) from</span></span>
<span id="cb40-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb40-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb40-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(*) nb</span></span>
<span id="cb40-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb40-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1) a</span></span>
<span id="cb40-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where nb&gt;=2</span></span>
<span id="cb40-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-12"></span>
<span id="cb40-13">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count_star()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>753409</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-what-is-the-first-item-in-each-category-that-each-user-view" class="level3">
<h3 class="anchored" data-anchor-id="example-what-is-the-first-item-in-each-category-that-each-user-view">Example: What is the first item in each category that each user view?</h3>
<p>We can also have multiple partitions as window.</p>
<div id="4eea2b0b" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb41-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from</span></span>
<span id="cb41-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb41-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb41-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_id</span></span>
<span id="cb41-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,row_number() over (partition by user_id, category_id order by timestamp asc) as rnk</span></span>
<span id="cb41-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb41-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'pv') a</span></span>
<span id="cb41-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where rnk=1;</span></span>
<span id="cb41-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-13"></span>
<span id="cb41-14">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="38">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">rnk</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7</td>
<td>516760</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>19</td>
<td>3615870</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>21</td>
<td>4928897</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3389298</td>
<td>1017999</td>
<td>3251062</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3389299</td>
<td>1018006</td>
<td>2789562</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3389300</td>
<td>1018011</td>
<td>3190817</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>3389301 rows × 3 columns</p>
</div>
</div>
</div>
</section>
<section id="example-for-each-user-what-was-their-previous-action-before-a-buy-action" class="level3">
<h3 class="anchored" data-anchor-id="example-for-each-user-what-was-their-previous-action-before-a-buy-action">Example: For each user, what was their previous action before a <code>buy</code> action?</h3>
<p>We can use <code>lag/lead</code> to get value just before or after each row.</p>
<div id="20f59cfd" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb42-2"></span>
<span id="cb42-3">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb42-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from </span></span>
<span id="cb42-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select</span></span>
<span id="cb42-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    user_id,</span></span>
<span id="cb42-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    event_timestamp,</span></span>
<span id="cb42-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    behavior_type as current_event,</span></span>
<span id="cb42-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    lag(behavior_type) over (partition by user_id order by event_timestamp asc) as previous_event</span></span>
<span id="cb42-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb42-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by user_id, event_timestamp asc) a</span></span>
<span id="cb42-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where current_event = 'buy'</span></span>
<span id="cb42-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">limit 10</span></span>
<span id="cb42-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb42-17"></span>
<span id="cb42-18">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="39">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">current_event</th>
<th data-quarto-table-cell-role="th">previous_event</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
<td>2017-12-02 20:34:34+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>41</td>
<td>2017-11-28 15:22:28+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>45</td>
<td>2017-12-03 11:49:02+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>50</td>
<td>2017-11-27 09:02:55+09:00</td>
<td>buy</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>50</td>
<td>2017-12-02 11:35:55+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>50</td>
<td>2017-12-03 20:56:57+09:00</td>
<td>buy</td>
<td>buy</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>59</td>
<td>2017-11-27 01:29:32+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>62</td>
<td>2017-12-03 16:30:30+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>68</td>
<td>2017-11-27 19:59:34+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>80</td>
<td>2017-11-25 22:52:00+09:00</td>
<td>buy</td>
<td>pv</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Confirm the query works by looking at <code>user_id=50</code> (no event, <code>pv</code>, <code>buy</code>) and <code>user_id=41</code> (single <code>pv</code> event).</p>
<div id="eb5801bf" class="cell" data-execution_count="40">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) </span>
<span id="cb43-2"></span>
<span id="cb43-3">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb43-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb43-5"></span>
<span id="cb43-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb43-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb43-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb43-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where user_id in (50, 41)</span></span>
<span id="cb43-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by user_id, event_timestamp</span></span>
<span id="cb43-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb43-12"></span>
<span id="cb43-13">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">behavior_type</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">quantity</th>
<th data-quarto-table-cell-role="th">sales</th>
<th data-quarto-table-cell-role="th">event_timestamp</th>
<th data-quarto-table-cell-role="th">event_date</th>
<th data-quarto-table-cell-role="th">year_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>41</td>
<td>2350782</td>
<td>1511590506</td>
<td>fav</td>
<td>3576283</td>
<td>832</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-25 15:15:06+09:00</td>
<td>2017-11-25</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>41</td>
<td>4810522</td>
<td>1511592979</td>
<td>pv</td>
<td>1464116</td>
<td>572</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-25 15:56:19+09:00</td>
<td>2017-11-25</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>41</td>
<td>259923</td>
<td>1511651601</td>
<td>pv</td>
<td>4170419</td>
<td>973</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-26 08:13:21+09:00</td>
<td>2017-11-26</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>41</td>
<td>4786486</td>
<td>1511758455</td>
<td>pv</td>
<td>2572604</td>
<td>536</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-27 13:54:15+09:00</td>
<td>2017-11-27</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>41</td>
<td>460114</td>
<td>1511850148</td>
<td>buy</td>
<td>4804883</td>
<td>164</td>
<td>5.0</td>
<td>820.0</td>
<td>2017-11-28 15:22:28+09:00</td>
<td>2017-11-28</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>41</td>
<td>1876500</td>
<td>1511850397</td>
<td>pv</td>
<td>3158249</td>
<td>550</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-28 15:26:37+09:00</td>
<td>2017-11-28</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>41</td>
<td>3599288</td>
<td>1512050217</td>
<td>cart</td>
<td>1537669</td>
<td>338</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-30 22:56:57+09:00</td>
<td>2017-11-30</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>41</td>
<td>2479959</td>
<td>1512050346</td>
<td>pv</td>
<td>3491350</td>
<td>1009</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-30 22:59:06+09:00</td>
<td>2017-11-30</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>41</td>
<td>3095445</td>
<td>1512072759</td>
<td>fav</td>
<td>4801426</td>
<td>495</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 05:12:39+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>41</td>
<td>3937435</td>
<td>1512072770</td>
<td>pv</td>
<td>4801426</td>
<td>485</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 05:12:50+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>41</td>
<td>2601044</td>
<td>1512073082</td>
<td>pv</td>
<td>2735466</td>
<td>94</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 05:18:02+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>41</td>
<td>3017816</td>
<td>1512073131</td>
<td>pv</td>
<td>2735466</td>
<td>866</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 05:18:51+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>41</td>
<td>3976745</td>
<td>1512073512</td>
<td>pv</td>
<td>3002561</td>
<td>795</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 05:25:12+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>50</td>
<td>1808993</td>
<td>1511740975</td>
<td>buy</td>
<td>4690421</td>
<td>1043</td>
<td>10.0</td>
<td>10430.0</td>
<td>2017-11-27 09:02:55+09:00</td>
<td>2017-11-27</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>50</td>
<td>1353441</td>
<td>1511743131</td>
<td>cart</td>
<td>64179</td>
<td>491</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-27 09:38:51+09:00</td>
<td>2017-11-27</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>50</td>
<td>1963474</td>
<td>1511743387</td>
<td>pv</td>
<td>3422001</td>
<td>524</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-27 09:43:07+09:00</td>
<td>2017-11-27</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>50</td>
<td>972172</td>
<td>1511854245</td>
<td>pv</td>
<td>4756105</td>
<td>222</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-28 16:30:45+09:00</td>
<td>2017-11-28</td>
<td>2017-11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>50</td>
<td>407777</td>
<td>1511948105</td>
<td>pv</td>
<td>4756105</td>
<td>827</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-11-29 18:35:05+09:00</td>
<td>2017-11-29</td>
<td>2017-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>50</td>
<td>2559047</td>
<td>1512108229</td>
<td>pv</td>
<td>4756105</td>
<td>97</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 15:03:49+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>50</td>
<td>3408121</td>
<td>1512110060</td>
<td>pv</td>
<td>1320293</td>
<td>171</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 15:34:20+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>50</td>
<td>4225949</td>
<td>1512110662</td>
<td>pv</td>
<td>1879194</td>
<td>999</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 15:44:22+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>50</td>
<td>1820775</td>
<td>1512112710</td>
<td>cart</td>
<td>4537973</td>
<td>825</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-01 16:18:30+09:00</td>
<td>2017-12-01</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>50</td>
<td>3096190</td>
<td>1512179808</td>
<td>pv</td>
<td>472273</td>
<td>240</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 10:56:48+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>50</td>
<td>5155205</td>
<td>1512179846</td>
<td>cart</td>
<td>4762182</td>
<td>255</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 10:57:26+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>50</td>
<td>518956</td>
<td>1512181946</td>
<td>pv</td>
<td>4835206</td>
<td>1006</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-02 11:32:26+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>50</td>
<td>120958</td>
<td>1512182155</td>
<td>buy</td>
<td>4762182</td>
<td>1008</td>
<td>3.0</td>
<td>3024.0</td>
<td>2017-12-02 11:35:55+09:00</td>
<td>2017-12-02</td>
<td>2017-12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>50</td>
<td>4619331</td>
<td>1512302217</td>
<td>buy</td>
<td>3884119</td>
<td>381</td>
<td>7.0</td>
<td>2667.0</td>
<td>2017-12-03 20:56:57+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>50</td>
<td>5045605</td>
<td>1512302237</td>
<td>pv</td>
<td>820727</td>
<td>655</td>
<td>NaN</td>
<td>0.0</td>
<td>2017-12-03 20:57:17+09:00</td>
<td>2017-12-03</td>
<td>2017-12</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-what-is-the-contribution-of-each-item-to-their-overall-category-sales" class="level3">
<h3 class="anchored" data-anchor-id="example-what-is-the-contribution-of-each-item-to-their-overall-category-sales">Example: What is the contribution of each item to their overall category sales?</h3>
<p>We can also use aggregations like <code>sum</code> in conjuction with window function.</p>
<div id="b4d5b2c9" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) </span>
<span id="cb44-2"></span>
<span id="cb44-3">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb44-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb44-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> item_id</span></span>
<span id="cb44-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,category_id</span></span>
<span id="cb44-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,item_sales / category_sales as percentage_category_sales</span></span>
<span id="cb44-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from (</span></span>
<span id="cb44-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  select</span></span>
<span id="cb44-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   item_id</span></span>
<span id="cb44-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   ,category_id</span></span>
<span id="cb44-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   ,item_sales</span></span>
<span id="cb44-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   ,sum(item_sales) over (partition by category_id) as category_sales</span></span>
<span id="cb44-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  from (</span></span>
<span id="cb44-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   select</span></span>
<span id="cb44-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    item_id</span></span>
<span id="cb44-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    ,category_id</span></span>
<span id="cb44-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    ,sum(sales) as item_sales</span></span>
<span id="cb44-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    from transaction_tbl_x</span></span>
<span id="cb44-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    group by 1,2</span></span>
<span id="cb44-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  ) a</span></span>
<span id="cb44-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) b</span></span>
<span id="cb44-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where category_sales &gt; 0;</span></span>
<span id="cb44-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb44-27"></span>
<span id="cb44-28">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">item_id</th>
<th data-quarto-table-cell-role="th">category_id</th>
<th data-quarto-table-cell-role="th">percentage_category_sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>644316</td>
<td>75275</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>4356670</td>
<td>75275</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>45889</td>
<td>75275</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1219659</td>
<td>4607802</td>
<td>5078340</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1219660</td>
<td>4052466</td>
<td>5078340</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1219661</td>
<td>104515</td>
<td>5078340</td>
<td>0.0</td>
</tr>
</tbody>
</table>

<p>1219662 rows × 3 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="concatenation-aka-union" class="level2">
<h2 class="anchored" data-anchor-id="concatenation-aka-union">7. Concatenation aka Union</h2>
<p>Sometimes you want to concatenate multiple tables with the same set of columns (called schema) together. <code>union all</code> is simple concatenation whereas <code>union</code> will also deduplicate the rows for you, only returning rows that are not perfectly identical to one another.</p>
<section id="example-concatenate-monthly-summary-of-2017-11-and-2017-12-together." class="level3">
<h3 class="anchored" data-anchor-id="example-concatenate-monthly-summary-of-2017-11-and-2017-12-together.">Example: Concatenate monthly summary of <code>2017-11</code> and <code>2017-12</code> together.</h3>
<p>We do not need to worry about duplicates here so we can simply use <code>union all</code>. See how we can combine <code>count</code>, <code>distinct</code> and <code>case when</code> to get monthly acitve customers and purchasers.</p>
<div id="1b5f8dfb" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb45-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from</span></span>
<span id="cb45-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb45-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> year_month</span></span>
<span id="cb45-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct user_id) as nb_active_customer</span></span>
<span id="cb45-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct case when behavior_type='buy' then user_id else null end) as nb_purchaser</span></span>
<span id="cb45-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as total_sales</span></span>
<span id="cb45-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb45-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where year_month = '2017-11'</span></span>
<span id="cb45-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1)</span></span>
<span id="cb45-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">union all</span></span>
<span id="cb45-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(select </span></span>
<span id="cb45-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> year_month</span></span>
<span id="cb45-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct user_id) as nb_active_customer</span></span>
<span id="cb45-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,count(distinct case when behavior_type='buy' then user_id else null end) as nb_purchaser</span></span>
<span id="cb45-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as total_sales</span></span>
<span id="cb45-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb45-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where year_month = '2017-12'</span></span>
<span id="cb45-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1);</span></span>
<span id="cb45-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb45-23"></span>
<span id="cb45-24">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">year_month</th>
<th data-quarto-table-cell-role="th">nb_active_customer</th>
<th data-quarto-table-cell-role="th">nb_purchaser</th>
<th data-quarto-table-cell-role="th">total_sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017-11</td>
<td>759497</td>
<td>58836</td>
<td>192782711.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2017-12</td>
<td>679573</td>
<td>34938</td>
<td>111758189.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-give-me-a-list-of-unique-users-who-made-at-least-one-purchase-or-viewed-at-least-5-unique-items." class="level3">
<h3 class="anchored" data-anchor-id="example-give-me-a-list-of-unique-users-who-made-at-least-one-purchase-or-viewed-at-least-5-unique-items.">Example: Give me a list of unique users who made at least one purchase or viewed at least 5 unique items.</h3>
<p>Concatenate then deduplicate.</p>
<div id="cf18640c" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb46-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb46-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb46-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb46-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'buy'</span></span>
<span id="cb46-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb46-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">union</span></span>
<span id="cb46-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb46-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb46-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb46-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'fav'</span></span>
<span id="cb46-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb46-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">having count(*)&gt;=5</span></span>
<span id="cb46-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb46-17"></span>
<span id="cb46-18">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="43">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>898251</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>576709</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>837520</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92122</td>
<td>86617</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">92123</td>
<td>906571</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92124</td>
<td>103138</td>
</tr>
</tbody>
</table>

<p>92125 rows × 1 columns</p>
</div>
</div>
</div>
<p>Simple concatenation will give duplicates.</p>
<div id="515486ae" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb47-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb47-3"></span>
<span id="cb47-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb47-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb47-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb47-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'buy'</span></span>
<span id="cb47-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb47-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">union all</span></span>
<span id="cb47-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select </span></span>
<span id="cb47-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb47-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb47-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where behavior_type = 'fav'</span></span>
<span id="cb47-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb47-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">having count(*)&gt;=5</span></span>
<span id="cb47-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb47-17"></span>
<span id="cb47-18">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>286908</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>910422</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>669209</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92359</td>
<td>251575</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">92360</td>
<td>598643</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92361</td>
<td>906629</td>
</tr>
</tbody>
</table>

<p>92362 rows × 1 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="joins" class="level2">
<h2 class="anchored" data-anchor-id="joins">8. Joins</h2>
<p><code>join</code> connects data from one table to another based on columns they share. There are many types of joins but 95% of your life will revolve around <code>left join</code> and <code>inner join</code>.</p>
<section id="example-among-users-who-are-active-have-at-least-one-event-on-2017-12-03-how-many-percent-were-active-in-2017-11" class="level3">
<h3 class="anchored" data-anchor-id="example-among-users-who-are-active-have-at-least-one-event-on-2017-12-03-how-many-percent-were-active-in-2017-11">Example: Among users who are active (have at least one event) on 2017-12-03, how many percent were active in 2017-11</h3>
<p><code>left join</code> starts with all rows from the left-side table (the former one) and add rows from the right-side table (the latter one) to it, <em>if and only if</em> the rows meet the conditions given in the <code>on</code> clause. These conditions are usually for values in a column from the left-side table to be equal to, not equal to, or more/less than the ones in a column from the right-side table.</p>
<p>Be sure to give aliases to columns you select and are joining <code>on</code>. Your query engine needs to know exactly from which table the columns came from if they have the same name.</p>
<div id="35c53f57" class="cell" data-execution_count="45">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb48-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with november_active_tbl as (</span></span>
<span id="cb48-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb48-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb48-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,1 as active_in_november</span></span>
<span id="cb48-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb48-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where year_month = '2017-11'</span></span>
<span id="cb48-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1,2</span></span>
<span id="cb48-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb48-12"></span>
<span id="cb48-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">dec3_active_tbl as (</span></span>
<span id="cb48-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb48-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb48-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb48-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where event_date = '2017-12-03'</span></span>
<span id="cb48-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb48-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb48-20"></span>
<span id="cb48-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb48-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> dec3.user_id</span></span>
<span id="cb48-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,active_in_november</span></span>
<span id="cb48-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from dec3_active_tbl dec3</span></span>
<span id="cb48-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">left join november_active_tbl nov</span></span>
<span id="cb48-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">on dec3.user_id = nov.user_id;</span></span>
<span id="cb48-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb48-28"></span>
<span id="cb48-29">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="45">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">active_in_november</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>78674</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>755902</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>829454</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">375424</td>
<td>743851</td>
<td>&lt;NA&gt;</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">375425</td>
<td>543372</td>
<td>&lt;NA&gt;</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">375426</td>
<td>610566</td>
<td>&lt;NA&gt;</td>
</tr>
</tbody>
</table>

<p>375427 rows × 2 columns</p>
</div>
</div>
</div>
<p>As you can see, users who were not active in 2017-11 will have null values in their <code>active_in_november</code> column. This is because we need to make sure that all rows from the left-side table (<code>dec3_active_tbl</code>) are there. Lastly, we can find the percentage by a simple aggregation. This is how you calculate percentage of returning users.</p>
<div id="cb843f5a" class="cell" data-execution_count="46">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb49-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with november_active_tbl as (</span></span>
<span id="cb49-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb49-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb49-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,1 as active_in_november</span></span>
<span id="cb49-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb49-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where year_month = '2017-11'</span></span>
<span id="cb49-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1,2</span></span>
<span id="cb49-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb49-12"></span>
<span id="cb49-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">dec3_active_tbl as (</span></span>
<span id="cb49-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb49-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> user_id</span></span>
<span id="cb49-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb49-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">where event_date = '2017-12-03'</span></span>
<span id="cb49-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb49-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb49-20"></span>
<span id="cb49-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb49-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> avg(coalesce(active_in_november,0)) as percent_active_last_month</span></span>
<span id="cb49-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from dec3_active_tbl dec3</span></span>
<span id="cb49-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">left join november_active_tbl nov</span></span>
<span id="cb49-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">on dec3.user_id = nov.user_id;</span></span>
<span id="cb49-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb49-27"></span>
<span id="cb49-28">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="46">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">percent_active_last_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.824562</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="example-what-is-the-daily-contribution-to-its-total-monthly-sales-expressed-as-percentage" class="level3">
<h3 class="anchored" data-anchor-id="example-what-is-the-daily-contribution-to-its-total-monthly-sales-expressed-as-percentage">Example: What is the daily contribution to its total monthly sales, expressed as percentage?</h3>
<p><code>inner join</code> is used when you only want rows where the <code>on</code> conditions are satisfied for both tables. In this case, we know that <code>year_month</code>, the key we are joining on, exists in both daily and monthly sales tables, so we can use <code>inner join</code> without fear of losing information. <code>inner join</code> has the best performance than <code>left join</code> so prioritize it if you can, especially if you are working with huge tables.</p>
<p>One sneaky thing you can do is that technically you can enter a condition only based on one table in the <code>on</code> clause such as <code>daily_sales &gt; 0</code> below. It will have the same performance as when you do it on <code>where</code> clause.</p>
<div id="f6ca24bf" class="cell" data-execution_count="47">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb50-2"></span>
<span id="cb50-3">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb50-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select setseed(0.112);</span></span>
<span id="cb50-5"></span>
<span id="cb50-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">with monthly_sales_tbl as (</span></span>
<span id="cb50-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb50-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> year_month</span></span>
<span id="cb50-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as monthly_sales</span></span>
<span id="cb50-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb50-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1</span></span>
<span id="cb50-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">having sum(sales)&gt;0</span></span>
<span id="cb50-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb50-14"></span>
<span id="cb50-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">daily_sales_tbl as (</span></span>
<span id="cb50-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb50-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> year_month</span></span>
<span id="cb50-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,event_date</span></span>
<span id="cb50-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,sum(sales) as daily_sales</span></span>
<span id="cb50-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from transaction_tbl_x</span></span>
<span id="cb50-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">group by 1,2</span></span>
<span id="cb50-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb50-23"></span>
<span id="cb50-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb50-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> daily.year_month</span></span>
<span id="cb50-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,event_date</span></span>
<span id="cb50-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ,daily_sales / monthly_sales as percentage_of_monthly_sales</span></span>
<span id="cb50-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">from daily_sales_tbl daily</span></span>
<span id="cb50-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">inner join monthly_sales_tbl monthly</span></span>
<span id="cb50-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">on daily.year_month = monthly.year_month</span></span>
<span id="cb50-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and daily_sales &gt; 0</span></span>
<span id="cb50-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">order by event_date;</span></span>
<span id="cb50-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb50-34"></span>
<span id="cb50-35">execute_query(query)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="47">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">year_month</th>
<th data-quarto-table-cell-role="th">event_date</th>
<th data-quarto-table-cell-role="th">percentage_of_monthly_sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017-11</td>
<td>2017-11-25</td>
<td>0.149288</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2017-11</td>
<td>2017-11-26</td>
<td>0.162279</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2017-11</td>
<td>2017-11-27</td>
<td>0.177516</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2017-11</td>
<td>2017-11-28</td>
<td>0.165055</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2017-11</td>
<td>2017-11-29</td>
<td>0.171182</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2017-11</td>
<td>2017-11-30</td>
<td>0.176354</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2017-12</td>
<td>2017-12-01</td>
<td>0.284772</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2017-12</td>
<td>2017-12-02</td>
<td>0.352953</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2017-12</td>
<td>2017-12-03</td>
<td>0.346453</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2017-12</td>
<td>2017-12-04</td>
<td>0.016650</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="tribal-knowledge" class="level2">
<h2 class="anchored" data-anchor-id="tribal-knowledge">9. Tribal Knowledge</h2>
<p>We have now gone through SQL techniques to accomplish most tasks as a SQL monkey. I would like to close with some tips and tricks I have learned over the years:</p>
<ul>
<li><strong>Get your hands dirty.</strong> Whether it is <a href="https://colab.research.google.com/github/cstorm125/cstorm125.github.io/blob/main/notebook/sql_almost_exercise.ipynb">the exercise</a> or your own data. Get out there and make it happen!</li>
<li><strong>ALWAYS SPECIFY THE PARTITIONS YOU NEED IN THE <code>WHERE</code> CLAUSE</strong>, and use the right data types.</li>
<li><strong>Sanity check</strong> for data quality issues, namely duplicates, missing values, improbable values, and data types. Make sure values in columns you care about are distributed in a reasonable manner.</li>
<li><strong>Work with assumptions and experiments.</strong> Have a set of clear hypotheses about what you are trying to learn/do, compose the query, run it and record the results. Work incrementally and not all at once; lest you will regret it during the debugging process. Do not just randomly write queries and hope for the best. The rabbit hole is too deep.</li>
<li><strong>Performance is king.</strong> Always pick a pattern that results in better performance when possible. For instance, <code>inner join</code> over <code>left join</code>, <code>union all</code> over <code>union</code>, do not use <code>distinct</code> if values are already unique, and so on.</li>
<li><strong>Query code styling must be readable and consistent</strong>. In this day and age where a coding assistant can fix your code styling in a few seconds, the best code styling for your query is the one that is most readable to your team. Whether it is tab vs space identation, leading vs trailing commas, with vs subquery vs view, capitalized vs uncapitalized keywords, just pick one style and stick with it.</li>
<li><strong>When in doubt <code>explain</code></strong>. Most query engines will show you how it plans to execute your queries. If you are a beginner, this might not be extremely helpful, but at least you can catch some simple things like if the partitions you specified are being used, is the engine making some unncessary data type conversion, which part of the process takes the moast time and so on. <code>explain</code> will only show you the plan but <code>explain analyze</code> will execute the query then tell you how it went.</li>
</ul>
<div id="9d1c0b92" class="cell" data-execution_count="48">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb51-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">explain analyze</span></span>
<span id="cb51-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">select * from transaction_tbl</span></span>
<span id="cb51-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">where item_id = 2067266</span></span>
<span id="cb51-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> and category_id = 4339722</span></span>
<span id="cb51-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb51-7"></span>
<span id="cb51-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(execute_query(query)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'explain_value'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>┌─────────────────────────────────────┐
│┌───────────────────────────────────┐│
││    Query Profiling Information    ││
│└───────────────────────────────────┘│
└─────────────────────────────────────┘
 explain analyze select * from transaction_tbl where item_id = 2067266  and category_id = 4339722 
┌────────────────────────────────────────────────┐
│┌──────────────────────────────────────────────┐│
││              Total Time: 0.0016s             ││
│└──────────────────────────────────────────────┘│
└────────────────────────────────────────────────┘
┌───────────────────────────┐
│           QUERY           │
└─────────────┬─────────────┘
┌─────────────┴─────────────┐
│      EXPLAIN_ANALYZE      │
│    ────────────────────   │
│           0 Rows          │
│          (0.00s)          │
└─────────────┬─────────────┘
┌─────────────┴─────────────┐
│         PROJECTION        │
│    ────────────────────   │
│          user_id          │
│          item_id          │
│         timestamp         │
│       behavior_type       │
│        category_id        │
│                           │
│           7 Rows          │
│          (0.00s)          │
└─────────────┬─────────────┘
┌─────────────┴─────────────┐
│         TABLE_SCAN        │
│    ────────────────────   │
│           Table:          │
│      transaction_tbl      │
│                           │
│   Type: Sequential Scan   │
│                           │
│        Projections:       │
│          item_id          │
│        category_id        │
│          user_id          │
│         timestamp         │
│       behavior_type       │
│                           │
│          Filters:         │
│      item_id=2067266      │
│    category_id=4339722    │
│                           │
│           7 Rows          │
│          (0.00s)          │
└───────────────────────────┘
</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>sql</category>
  <category>tutorial</category>
  <guid>https://cstorm125.github.io/posts/sql_almost/</guid>
  <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cstorm125.github.io/posts/sql_almost/featured_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Predict How Much A Customer Will Spend</title>
  <dc:creator>cstorm125 </dc:creator>
  <link>https://cstorm125.github.io/posts/sales_prediction/</link>
  <description><![CDATA[ 




<p>I have spent nearly a decade as a data scientist in the retail sector, but I have been approaching customer spend predictions the wrong way until I attended <a href="https://scholar.google.com/citations?user=EZ9sTM4AAAAJ&amp;hl=en">Gregory M. Duncan</a>’s lecture. Accurately predicting how much an individual customer will spend in the next X days enables key retail use cases such as personalized promotion (determine X in Buy-X-Get-Y), customer targeting for upselling (which customers have higher purchasing power), and early churn detection (customers do not spend as much as they should). What makes this problem particularly difficult is because the distribution of customer spending is both <strong><a href="https://en.wikipedia.org/wiki/Zero-inflated_model">zero-inflated</a></strong> and <strong><a href="https://en.wikipedia.org/wiki/Heavy-tailed_distribution">long/fat-tailed</a></strong>. Intuitively, most customers who visit your store are not going to make a purchase and among those who do, there will be some super customers who purchase an outrageous amount more than the average customer. Some parametric models allow for zero-inflated outcomes such as <a href="https://en.wikipedia.org/wiki/Poisson_distribution">Poisson</a>, <a href="https://en.wikipedia.org/wiki/Negative_binomial_distribution">negative binomial</a>, <a href="https://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution">Conway-Maxwell-Poisson</a>; however, they do not handle the long/fat-tailed explicitly. Even for non-parametric models such as decision tree ensembles, more resources (trees and splits) will be dedicated to separating zeros and handling outliers; this could lead to deterioration in performance. Using the real-world dataset <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a>, we will compare the performance of common approaches namely naive baseline regression, regression on winsorized outcome, regression on log-plus-one-transformed outcome to what Duncan suggested: hurdle model with Duan’s method. We will demonstrate why this approach outperforms the others in most evaluation metrics and why it might not in some.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/featured_image.jpg" class="img-fluid figure-img"></p>
<figcaption>featured_image</figcaption>
</figure>
</div>
<div id="6d675a4a" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ucimlrepo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fetch_ucirepo </span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularDataset, TabularPredictor</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-15">    mean_squared_error, mean_absolute_error, r2_score, median_absolute_error,</span>
<span id="cb1-16">    accuracy_score, precision_score, recall_score, f1_score, confusion_matrix</span>
<span id="cb1-17">)</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pearsonr, spearmanr, wasserstein_distance</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.stats.diagnostic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> het_white</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_regression_metrics(y_true, y_pred):</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb1-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'root_mean_squared_error'</span>: np.sqrt(mean_squared_error(y_true, y_pred)),</span>
<span id="cb1-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_squared_error'</span>: mean_squared_error(y_true, y_pred),</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_absolute_error'</span>: mean_absolute_error(y_true, y_pred),</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2'</span>: r2_score(y_true, y_pred),</span>
<span id="cb1-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearsonr'</span>: pearsonr(y_true, y_pred)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearmanr'</span>: spearmanr(y_true, y_pred)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median_absolute_error'</span>: median_absolute_error(y_true, y_pred),</span>
<span id="cb1-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'earths_mover_distance'</span>: wasserstein_distance(y_true, y_pred)</span>
<span id="cb1-31">    }</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> caluclate_classification_metrics(y_true, y_pred):</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb1-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>: accuracy_score(y_true, y_pred),</span>
<span id="cb1-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'precision'</span>: precision_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recall'</span>: recall_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-38">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_score'</span>: f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>),</span>
<span id="cb1-39">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confusion_matrix'</span>: confusion_matrix(y_true, y_pred)</span>
<span id="cb1-40">    }</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> string_to_yearmon(date):</span>
<span id="cb1-43">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.split()</span>
<span id="cb1-44">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':'</span>)</span>
<span id="cb1-45">    date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#+ '-' + date[1].zfill(2) + ' ' + date[3].zfill(2) + ':' + date[4].zfill(2)</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> date</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> call_llama(system_prompt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb1-49">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""&lt;s&gt;[INST] &lt;&lt;SYS&gt;&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>system_prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;&lt;/SYS&gt;&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[/INST]"""</span></span>
<span id="cb1-50">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bedrock-runtime'</span>,region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-west-2'</span>)</span>
<span id="cb1-51">    body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.dumps({</span>
<span id="cb1-52">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt"</span>: template,</span>
<span id="cb1-53">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,</span>
<span id="cb1-54">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top_p"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb1-55">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_gen_len"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb1-56">    })</span>
<span id="cb1-57">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.invoke_model(</span>
<span id="cb1-58">        body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>body,</span>
<span id="cb1-59">        modelId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us.meta.llama3-2-90b-instruct-v1:0'</span>,</span>
<span id="cb1-60">        accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>,</span>
<span id="cb1-61">        contentType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span></span>
<span id="cb1-62">    )</span>
<span id="cb1-63">    response_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body'</span>].read())</span>
<span id="cb1-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_body</span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> call_claude(system_prompt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb1-67">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bedrock-runtime'</span>,region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-west-2'</span>)</span>
<span id="cb1-68">    body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json.dumps(</span>
<span id="cb1-69">        {</span>
<span id="cb1-70">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anthropic_version"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bedrock-2023-05-31"</span>,</span>
<span id="cb1-71">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_tokens"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb1-72">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messages"</span>: [</span>
<span id="cb1-73">                {</span>
<span id="cb1-74">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb1-75">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb1-76">                    {</span>
<span id="cb1-77">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb1-78">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>,</span>
<span id="cb1-79">                    }</span>
<span id="cb1-80">                    ]</span>
<span id="cb1-81">                }</span>
<span id="cb1-82">                ]</span>
<span id="cb1-83">        }  </span>
<span id="cb1-84">    )  </span>
<span id="cb1-85"></span>
<span id="cb1-86">    </span>
<span id="cb1-87">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.invoke_model(body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>body, </span>
<span id="cb1-88">                                   modelId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'anthropic.claude-3-5-sonnet-20241022-v2:0'</span>,</span>
<span id="cb1-89">                                   contentType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>,</span>
<span id="cb1-90">                                   accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>)</span>
<span id="cb1-91">    response_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body'</span>).read())</span>
<span id="cb1-92">   </span>
<span id="cb1-93">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_body</span></code></pre></div>
</details>
</div>
<section id="this-is-not-a-drill-real-world-datasets-meticulous-feature-engineering-state-of-the-art-automl" class="level2">
<h2 class="anchored" data-anchor-id="this-is-not-a-drill-real-world-datasets-meticulous-feature-engineering-state-of-the-art-automl">This Is Not a Drill: Real-world Datasets, Meticulous Feature Engineering, State-of-the-art AutoML</h2>
<p>To make this exercise as realistic as possible, we will use a real-world dataset (as opposed to a simulated one), perform as much feature engineering as we would in a real-world setting, and employ the best AutoML solution the market has to offer in <a href="https://auto.gluon.ai/dev/index.html">AutoGluon</a>.</p>
<div id="bbfa68ee" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">online_retail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_ucirepo(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">352</span>) </span>
<span id="cb2-2">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> online_retail[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original'</span>]</span>
<span id="cb2-3">original_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create yearmon for train-valid split</span></span>
<span id="cb2-6">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yearmon'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.InvoiceDate.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(string_to_yearmon)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#get rid of transactions without cid</span></span>
<span id="cb2-9">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>transaction_df.CustomerID.isna()].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-10">has_cid_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#fill in unknown descriptions</span></span>
<span id="cb2-13">transaction_df.Description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.Description.fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UNKNOWN'</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#convert customer id to string</span></span>
<span id="cb2-16">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x)))</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#simplify by filtering unit price and quantity to be non-zero (get rid of discounts, cancellations, etc)</span></span>
<span id="cb2-19">transaction_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.UnitPrice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb2-20">                                (transaction_df.Quantity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-21">has_sales_nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add sales</span></span>
<span id="cb2-24">transaction_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df.UnitPrice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> transaction_df.Quantity</span></code></pre></div>
</details>
</div>
<p>We use the <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a> dataset, which contain transactions from a UK-based, non-store online retail from 2010-12 and 2011-12. We perform the following data processing:</p>
<ol type="1">
<li>Remove transactions without <code>CustomerID</code>; from 541,909 to 406,829 transactions</li>
<li>Filter out transactions where either <code>UnitPrice</code> or <code>Quantity</code> is less than zero; from 406,829 to 397,884 transactions</li>
<li>Fill in missing product <code>Description</code> with value <code>UNKNOWN</code>.</li>
</ol>
<div id="e4d6dd1b" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(transaction_df.shape)</span>
<span id="cb3-2">transaction_df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(397884, 10)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">InvoiceNo</th>
<th data-quarto-table-cell-role="th">StockCode</th>
<th data-quarto-table-cell-role="th">Description</th>
<th data-quarto-table-cell-role="th">Quantity</th>
<th data-quarto-table-cell-role="th">InvoiceDate</th>
<th data-quarto-table-cell-role="th">UnitPrice</th>
<th data-quarto-table-cell-role="th">CustomerID</th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">yearmon</th>
<th data-quarto-table-cell-role="th">Sales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">276682</td>
<td>570008</td>
<td>22598</td>
<td>CHRISTMAS MUSICAL ZINC TREE</td>
<td>12</td>
<td>10/7/2011 9:30</td>
<td>0.85</td>
<td>13359</td>
<td>United Kingdom</td>
<td>2011-10</td>
<td>10.20</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2894</td>
<td>536746</td>
<td>22604</td>
<td>SET OF 4 NAPKIN CHARMS CUTLERY</td>
<td>6</td>
<td>12/2/2010 13:39</td>
<td>2.55</td>
<td>16510</td>
<td>United Kingdom</td>
<td>2010-12</td>
<td>15.30</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">238815</td>
<td>566361</td>
<td>85123A</td>
<td>WHITE HANGING HEART T-LIGHT HOLDER</td>
<td>12</td>
<td>9/12/2011 12:32</td>
<td>2.95</td>
<td>15253</td>
<td>United Kingdom</td>
<td>2011-09</td>
<td>35.40</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">72407</td>
<td>545830</td>
<td>47590B</td>
<td>PINK HAPPY BIRTHDAY BUNTING</td>
<td>3</td>
<td>3/7/2011 13:10</td>
<td>5.45</td>
<td>17634</td>
<td>United Kingdom</td>
<td>2011-03</td>
<td>16.35</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">78138</td>
<td>546538</td>
<td>15044A</td>
<td>PINK PAPER PARASOL</td>
<td>6</td>
<td>3/14/2011 14:51</td>
<td>2.95</td>
<td>16327</td>
<td>United Kingdom</td>
<td>2011-03</td>
<td>17.70</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We formulate the problem as predicting the sales (<code>TargetSales</code>) during Q4 2011 for each customers who bought at least one item during Q1-Q3 2011. Note that we are interested in predicting the <strong>spend per customer</strong> as accurately as possible; this is common for marketing use cases such as determining what spend threshold to give each customer in a promotion, targeting customers for upselling, or detecting early signs of churns. It is notably different from predicting <strong>total spend of all customers</strong> during a time period, which usually requires a different approach.</p>
<div id="dd07bfca" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">feature_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-09'</span>}</span>
<span id="cb5-2">outcome_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-10'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011-12'</span>}</span>
<span id="cb5-3"></span>
<span id="cb5-4">feature_transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>feature_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb5-5">                                      (transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>feature_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>])]</span>
<span id="cb5-6">outcome_transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transaction_df[(transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>outcome_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb5-7">                                      (transaction_df.yearmon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>outcome_period[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>])]</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#aggregate sales during outcome period</span></span>
<span id="cb5-10">outcome_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_transaction.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).Sales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index()</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#aggregate sales during feature period</span></span>
<span id="cb5-13">feature_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).Sales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index()</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#merge to get TargetSales including those who spent during feature period but not during outcome (zeroes)</span></span>
<span id="cb5-16">outcome_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_sales[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>]].merge(outcome_sales, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb5-17">outcome_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>].fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-18">outcome_df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>]</span></code></pre></div>
</details>
</div>
<p>We transform the transaction dataset into a customer-level dataset where we calculate features using transactions between 2011-01 to 2011-09 and outcome using transactions between 2011-10 to 2011-12, summing <code>Quantity</code> times <code>UnitPrice</code>. We left-join the customers in feature set to outcome set. This will result in the zero-inflated nature of the outcome as not all customers will come back in Q4. The distribution of non-zero sales is naturally long/fat-tailed with a few customers having extraordinarily high amount of sales in Q4. This resulted in a customer-level dataset with 3,438 customers.</p>
<div id="891ddfc0" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#confirm zero-inflated, long/fat-tailed</span></span>
<span id="cb6-2">outcome_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>count      3438.000000
mean        666.245829
std        4016.843037
min           0.000000
0%            0.000000
10%           0.000000
20%           0.000000
30%           0.000000
40%           0.000000
50%         102.005000
60%         263.006000
70%         425.790000
80%         705.878000
90%        1273.611000
max      168469.600000
Name: TargetSales, dtype: float64</code></pre>
</div>
</div>
<div id="1e7b1a96" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#confirm zero-inflated, long/fat-tailed</span></span>
<span id="cb8-2">outcome_df[outcome_df.TargetSales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>].TargetSales.hist(bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-7-output-1.png" width="605" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We represent a customer using traditional RFM features namely recency of purchase, purchase days, total sales, number of distinct products purchased, number of distinct category purchased, customer tenure within 2011, average purchase frequency, average purchase value, and percentage of purchase across all 9 categories. This is based on data from Q1-Q3 2011.</p>
<p>Since the <a href="https://archive.ics.uci.edu/dataset/352/online+retail">UCI Online Retail</a> dataset does not have a category but only contains descriptions over 3,000 items, we use <code>LLaMA 3.2 90B</code> to infer categories based on randomly selected 1,000 descriptions. This is to make the category preference representation for each customer, which is more tractable than including features about all 3,548 items. After that, we use <code>Claude 3.5 v2</code> to label a category for each description as it performs structured output a little more reliably. The categories are:</p>
<ol type="1">
<li>Home Decor</li>
<li>Kitchen and Dining</li>
<li>Fashion Accessories</li>
<li>Stationary and Gifts</li>
<li>Toys and Games</li>
<li>Seasonal and Holiday</li>
<li>Personal Care and Wellness</li>
<li>Outdoor and Garden</li>
<li>Others</li>
</ol>
<div id="bae30ac9" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">descriptions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.Description.unique().tolist()</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(descriptions[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#randomize descriptions with seed 112 to get which categories we should use</span></span>
<span id="cb9-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb9-6">random_descriptions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(descriptions, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_llama(</span>
<span id="cb9-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a product categorization assistant at a retail website.'</span>,</span>
<span id="cb9-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Given the following product descriptions, come up with a few product categories they should be classified into.'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(random_descriptions)</span>
<span id="cb9-11">)</span>
<span id="cb9-12"></span>
<span id="cb9-13">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Home Decor'</span>,</span>
<span id="cb9-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kitchen and Dining'</span>,</span>
<span id="cb9-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fashion Accessories'</span>,</span>
<span id="cb9-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stationary and Gifts'</span>,</span>
<span id="cb9-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Toys and Games'</span>,</span>
<span id="cb9-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Seasonal and Holiday'</span>,</span>
<span id="cb9-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Personal Care and Wellness'</span>,</span>
<span id="cb9-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Outdoor and Garden'</span>,   </span>
<span id="cb9-22">]</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generation'</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['JUMBO BAG PINK POLKADOT', 'BLUE POLKADOT WRAP', 'RED RETROSPOT WRAP ', 'RECYCLING BAG RETROSPOT ', 'RED RETROSPOT SHOPPER BAG']
 &lt;&lt;SYS&gt;&gt;Based on the product descriptions, I would categorize them into the following categories:

1. Home Decor:
    * Wall art
    * Decorative items (e.g. vases, figurines, etc.)
    * Lighting (e.g. candles, lanterns, etc.)
    * Textiles (e.g. throw pillows, blankets, etc.)
2. Kitchen and Dining:
    * Cookware and utensils
    * Tableware (e.g. plates, cups, etc.)
    * Kitchen decor (e.g. signs, magnets, etc.)
    * Food and drink items (e.g. tea, coffee, etc.)
3. Fashion and Accessories:
    * Jewelry (e.g. necklaces, earrings, etc.)
    * Handbags and wallets
    * Clothing and accessories (e.g. scarves, hats, etc.)
    * Beauty and personal care items (e.g. cosmetics, skincare, etc.)
4. Stationery and Gifts:
    * Greeting cards
    * Gift wrap and bags
    * Stationery (e.g. notebooks, pens, etc.)
    * Gift items (e.g. mugs, keychains, etc.)
5. Toys and Games:
    * Toys (e.g. stuffed animals, puzzles, etc.)
    * Games and puzzles
    * Outdoor toys and games
6. Seasonal and Holiday:
    * Christmas decorations and gifts
    * Easter decorations and gifts
    * Halloween decorations and gifts
    * Other seasonal and holiday items
7. Office and School:
    * Office supplies (e.g. pens, paper, etc.)
    * School supplies (e.g. backpacks, lunchboxes, etc.)
    * Desk accessories (e.g. paperweights, etc.)
8. Garden and Outdoor:
    * Gardening tools and supplies
    * Outdoor decor (e.g. planters, etc.)
    * Patio and outdoor furniture
9. Baby and Kids:
    * Baby clothing and accessories
    * Kids' clothing and accessories
    * Toys and games for kids
    * Nursery decor and furniture

Note that some products may fit into multiple categories, but I've tried to categorize them based on their primary function or theme.</code></pre>
</div>
</div>
<div id="0514b157" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#loop through descriptions in batches of batch_size</span></span>
<span id="cb11-2">res_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(descriptions), batch_size)):</span>
<span id="cb11-5">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> descriptions[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb11-6">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(batch)</span>
<span id="cb11-7">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Categorize the following product descriptions into </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(categories)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> or Others, if they do not fall into any. </span></span>
<span id="cb11-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Only answer in the following format:</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #1"|"product category classified into"</span></span>
<span id="cb11-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #2"|"product category classified into"</span></span>
<span id="cb11-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"product description of product #n"|"product category classified into"</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Here are the product descriptions:</span></span>
<span id="cb11-16"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb11-19">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_claude(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a product categorizer at a retail website'</span>, inp)</span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if res['generation_token_count'] &gt; 1: #for llama</span></span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'usage'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_tokens'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb11-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb11-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Retrying...'</span>)</span>
<span id="cb11-25">            time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-26">    res_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>].strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for llama</span></span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .replace('[SYS]','').replace('&lt;&lt;SYS&gt;&gt;','')\</span></span>
<span id="cb11-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .replace('[/SYS]','').replace('&lt;&lt;/SYS&gt;&gt;','')\</span></span>
<span id="cb11-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> res_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>:</span>
<span id="cb11-31">        res_texts.extend(res_text)</span>
<span id="cb11-32"></span>
<span id="cb11-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sales_prediction/product_description_category.csv'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-34">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"product_description"|"category"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> res_texts:</span>
<span id="cb11-36">        f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
<p>Here is the share of product descriptions in each annotated category:</p>
<div id="4e6b7752" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">product_description_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/sales_prediction/product_description_category.csv'</span>,</span>
<span id="cb12-2">                                           sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clean product_description</span></span>
<span id="cb12-5">product_description_category[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> descriptions</span>
<span id="cb12-6">product_description_category.category.value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>category
Home Decor                    0.328636
Kitchen and Dining            0.195885
Fashion Accessories           0.138670
Stationary and Gifts          0.116122
Seasonal and Holiday          0.087373
Personal Care and Wellness    0.047351
Toys and Games                0.045096
Outdoor and Garden            0.032976
Others                        0.007892
Name: proportion, dtype: float64</code></pre>
</div>
</div>
<p>We merge the RFM features with preference features, that is share of sales in each category for every customer, then the outcome <code>TargetSales</code> to create the universe set for the problem.</p>
<div id="1340cfd0" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">feature_transaction_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction.merge(product_description_category,</span>
<span id="cb14-2">                                                    how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inner'</span>,</span>
<span id="cb14-3">                                                    on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>,)</span>
<span id="cb14-4">feature_transaction.shape, feature_transaction_cat.shape</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#convert invoice date to datetime</span></span>
<span id="cb14-7">feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>])</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last date in feature set</span></span>
<span id="cb14-10">current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rfm</span></span>
<span id="cb14-13">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).agg({</span>
<span id="cb14-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceDate'</span>: [</span>
<span id="cb14-15">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: (current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()).days),</span>
<span id="cb14-16">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb14-17">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>),</span>
<span id="cb14-18">    ],</span>
<span id="cb14-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'InvoiceNo'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_invoice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)],</span>
<span id="cb14-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>: [</span>
<span id="cb14-21">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb14-22">    ],</span>
<span id="cb14-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'StockCode'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)],</span>
<span id="cb14-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>: [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nunique'</span>)]</span>
<span id="cb14-25">}).reset_index()</span>
<span id="cb14-26"></span>
<span id="cb14-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten column names</span></span>
<span id="cb14-28">customer_features.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>,</span>
<span id="cb14-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>,</span>
<span id="cb14-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>,</span>
<span id="cb14-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>,</span>
<span id="cb14-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_invoice'</span>,</span>
<span id="cb14-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>,</span>
<span id="cb14-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>,</span>
<span id="cb14-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span></span>
<span id="cb14-37">]</span>
<span id="cb14-38"></span>
<span id="cb14-39">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_purchase_date'</span>]).dt.days</span>
<span id="cb14-40">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_frequency'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>]</span>
<span id="cb14-41">customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>]</span>
<span id="cb14-42"></span>
<span id="cb14-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#category preference</span></span>
<span id="cb14-44">category_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_transaction_cat.pivot_table(</span>
<span id="cb14-45">    values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales'</span>, </span>
<span id="cb14-46">    index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, </span>
<span id="cb14-47">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>, </span>
<span id="cb14-48">    aggfunc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>, </span>
<span id="cb14-49">    fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-50">)</span>
<span id="cb14-51">category_sales.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i.lower().replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> category_sales.columns]</span>
<span id="cb14-52">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features.merge(category_sales, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb14-53"></span>
<span id="cb14-54">total_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>]</span>
<span id="cb14-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> category_sales.columns:</span>
<span id="cb14-56">    percentage_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'per_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-57">    customer_features[percentage_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_sales</span>
<span id="cb14-58"></span>
<span id="cb14-59">selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-60"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recency'</span>,</span>
<span id="cb14-61"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase_day'</span>,</span>
<span id="cb14-62"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>,</span>
<span id="cb14-63"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_product'</span>,</span>
<span id="cb14-64"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nb_category'</span>,</span>
<span id="cb14-65"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'customer_lifetime'</span>,</span>
<span id="cb14-66"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_frequency'</span>,</span>
<span id="cb14-67"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_purchase_value'</span>,</span>
<span id="cb14-68"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_fashion_accessories'</span>,</span>
<span id="cb14-69"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_home_decor'</span>,</span>
<span id="cb14-70"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_kitchen_and_dining'</span>,</span>
<span id="cb14-71"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_others'</span>,</span>
<span id="cb14-72"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_outdoor_and_garden'</span>,</span>
<span id="cb14-73"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_personal_care_and_wellness'</span>,</span>
<span id="cb14-74"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_seasonal_and_holiday'</span>,</span>
<span id="cb14-75"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_stationary_and_gifts'</span>,</span>
<span id="cb14-76"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'per_toys_and_games'</span>]</span>
<span id="cb14-77"></span>
<span id="cb14-78">outcome_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span></span>
<span id="cb14-79"></span>
<span id="cb14-80">customer_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customer_features[[ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>selected_features]</span>
<span id="cb14-81">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outcome_df.merge(customer_features, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>).drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CustomerID'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-82"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape)</span>
<span id="cb14-83">df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(3438, 18)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TargetSales</th>
<th data-quarto-table-cell-role="th">recency</th>
<th data-quarto-table-cell-role="th">purchase_day</th>
<th data-quarto-table-cell-role="th">total_sales</th>
<th data-quarto-table-cell-role="th">nb_product</th>
<th data-quarto-table-cell-role="th">nb_category</th>
<th data-quarto-table-cell-role="th">customer_lifetime</th>
<th data-quarto-table-cell-role="th">avg_purchase_frequency</th>
<th data-quarto-table-cell-role="th">avg_purchase_value</th>
<th data-quarto-table-cell-role="th">per_fashion_accessories</th>
<th data-quarto-table-cell-role="th">per_home_decor</th>
<th data-quarto-table-cell-role="th">per_kitchen_and_dining</th>
<th data-quarto-table-cell-role="th">per_others</th>
<th data-quarto-table-cell-role="th">per_outdoor_and_garden</th>
<th data-quarto-table-cell-role="th">per_personal_care_and_wellness</th>
<th data-quarto-table-cell-role="th">per_seasonal_and_holiday</th>
<th data-quarto-table-cell-role="th">per_stationary_and_gifts</th>
<th data-quarto-table-cell-role="th">per_toys_and_games</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2606</td>
<td>0.00</td>
<td>53</td>
<td>2</td>
<td>597.48</td>
<td>138</td>
<td>8</td>
<td>184</td>
<td>92.000000</td>
<td>298.740</td>
<td>0.079383</td>
<td>0.433973</td>
<td>0.343710</td>
<td>0.003465</td>
<td>0.000000</td>
<td>0.041357</td>
<td>0.016570</td>
<td>0.056688</td>
<td>0.024854</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">196</td>
<td>0.00</td>
<td>78</td>
<td>2</td>
<td>2209.85</td>
<td>37</td>
<td>6</td>
<td>226</td>
<td>113.000000</td>
<td>1104.925</td>
<td>0.030771</td>
<td>0.275245</td>
<td>0.628549</td>
<td>0.000000</td>
<td>0.021178</td>
<td>0.022535</td>
<td>0.000000</td>
<td>0.021721</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2900</td>
<td>3893.79</td>
<td>10</td>
<td>6</td>
<td>4099.11</td>
<td>78</td>
<td>9</td>
<td>172</td>
<td>28.666667</td>
<td>683.185</td>
<td>0.003879</td>
<td>0.761507</td>
<td>0.104540</td>
<td>0.003879</td>
<td>0.012442</td>
<td>0.014015</td>
<td>0.051597</td>
<td>0.043312</td>
<td>0.004830</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2187</td>
<td>0.00</td>
<td>227</td>
<td>1</td>
<td>122.40</td>
<td>1</td>
<td>1</td>
<td>227</td>
<td>227.000000</td>
<td>122.400</td>
<td>0.000000</td>
<td>0.000000</td>
<td>1.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">322</td>
<td>0.00</td>
<td>68</td>
<td>1</td>
<td>147.12</td>
<td>3</td>
<td>2</td>
<td>68</td>
<td>68.000000</td>
<td>147.120</td>
<td>0.881729</td>
<td>0.118271</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Univariate correlation expectedly pinpoints <code>total_sales</code> in during Q1-Q3 2011 as the most predictive feature; however, we can see that it is still not very predictive. This shows that the problem is not a trivial one.</p>
<div id="61b5f86d" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>]].corr())</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#target and most predictive variable</span></span>
<span id="cb16-4">df[df.TargetSales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25_000</span>].plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_sales'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>             TargetSales  total_sales
TargetSales     1.000000     0.558558
total_sales     0.558558     1.000000</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-12-output-2.png" width="619" height="429" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We randomly split the dataset into train and test sets at 80/20 ratio. We also confirm the distribution of <code>TargetSales</code> is similar across percentiles between train and test and only different at the upper end.</p>
<div id="179cc361" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#split into train-valid sets</span></span>
<span id="cb18-2">train_df, test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df,</span>
<span id="cb18-3">                                      test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, </span>
<span id="cb18-4">                                      random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb18-5">pd.concat([train_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]).reset_index(),</span>
<span id="cb18-6">test_df.TargetSales.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]).reset_index(),], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">TargetSales</th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">TargetSales</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>count</td>
<td>2750.000000</td>
<td>count</td>
<td>688.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>mean</td>
<td>642.650436</td>
<td>mean</td>
<td>760.558808</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>std</td>
<td>4015.305436</td>
<td>std</td>
<td>4024.524400</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>min</td>
<td>0.000000</td>
<td>min</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0%</td>
<td>0.000000</td>
<td>0%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>10%</td>
<td>0.000000</td>
<td>10%</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>20%</td>
<td>0.000000</td>
<td>20%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>30%</td>
<td>0.000000</td>
<td>30%</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>40%</td>
<td>0.000000</td>
<td>40%</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>50%</td>
<td>91.350000</td>
<td>50%</td>
<td>113.575000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>60%</td>
<td>260.308000</td>
<td>60%</td>
<td>277.836000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>70%</td>
<td>426.878000</td>
<td>70%</td>
<td>418.187000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>80%</td>
<td>694.164000</td>
<td>80%</td>
<td>759.582000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>90%</td>
<td>1272.997000</td>
<td>90%</td>
<td>1255.670000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>max</td>
<td>168469.600000</td>
<td>max</td>
<td>77099.380000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="naive-baseline-regression" class="level2">
<h2 class="anchored" data-anchor-id="naive-baseline-regression">Naive Baseline Regression</h2>
<p>The most naive solution is to simply predict <code>TargetSales</code> based on the features. We use a stacked ensemble of LightGBM, CatBoost, XGBoost, Random Forest and Extra Trees via AutoGluon. We train with <code>good_quality</code> preset, stated to be <a href="https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets">“Stronger than any other AutoML Framework”</a>, for speedy training and inference but feel free to try more performant options. We exclude the neural-network models as they require further preprocessing of the features. We use an industry-grade, non-parametric model to be as close to a real use case as possible and make a point that the methodology works not only in a toy-dataset setup.</p>
<div id="3fbfdc36" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">preset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'good_quality'</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>).fit(train_df[selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>]], </span>
<span id="cb19-4">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb19-5">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb19-6">                                                      )</span>
<span id="cb19-7">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<div id="7fed6cc4" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">metric_baseline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>])</span>
<span id="cb20-2">metric_baseline[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span></span>
<span id="cb20-3">metric_baseline</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'root_mean_squared_error': 3162.478744240967,
 'mean_squared_error': 10001271.807775924,
 'mean_absolute_error': 715.6442657130541,
 'r2': 0.3816166296854987,
 'pearsonr': 0.6190719671013133,
 'spearmanr': 0.47008461549340863,
 'median_absolute_error': 232.98208312988282,
 'earths_mover_distance': 287.77728784026124,
 'model': 'baseline'}</code></pre>
</div>
</div>
</section>
<section id="regression-on-winsorized-outcome" class="level2">
<h2 class="anchored" data-anchor-id="regression-on-winsorized-outcome">Regression on Winsorized Outcome</h2>
<div id="7a755145" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">outlier_per <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span></span>
<span id="cb22-2">outlier_cap_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].quantile(outlier_per)</span></code></pre></div>
</details>
</div>
<p>An alternative approach to deal with long/fat-tailed outcome is to train on a winsorized outcome. In our case, we cap the outlier at 99.0% or <code>TargetSales</code> equals 7,180.81. While this solves the long/fat-tailed issues, it does not deal with zero inflation and also introduce bias to the outcome. This leads to better performance when tested on the winsorized outcome, but not so much on the original outcome.</p>
<div id="84ff6b81" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#winsorize</span></span>
<span id="cb23-2">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb23-3">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> outlier_cap_train <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb23-4"></span>
<span id="cb23-5">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_win'</span>]],</span>
<span id="cb23-6">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb23-7">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb23-8">                                                      )</span>
<span id="cb23-9"></span>
<span id="cb23-10">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<div id="67df490f" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">metric_winsorized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>])</span>
<span id="cb24-2">metric_winsorized[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'winsorized'</span></span>
<span id="cb24-3">metric_winsorized</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'root_mean_squared_error': 3623.576377551195,
 'mean_squared_error': 13130305.76394704,
 'mean_absolute_error': 627.7880071099414,
 'r2': 0.18814697894155963,
 'pearsonr': 0.5757989413256978,
 'spearmanr': 0.504301956183441,
 'median_absolute_error': 219.62248107910156,
 'earths_mover_distance': 432.1288432991232,
 'model': 'winsorized'}</code></pre>
</div>
</div>
</section>
<section id="regression-on-log-plus-one-transformed-outcome" class="level2">
<h2 class="anchored" data-anchor-id="regression-on-log-plus-one-transformed-outcome">Regression on Log-plus-one-transformed Outcome</h2>
<p>Log transformation handles long/fat-tailed distribution and is especially useful for certain models since the transformed distribution is closer normal. However, it cannot handle zero-valued outcome and oftentimes scientists end up adding 1 to the outcome (so often that <code>numpy</code> even has a function for it). This not only introduces bias to the prediction, but also does not solve the zero-inflation as it becomes one-inflation instead.</p>
<div id="21c4dbbd" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#log</span></span>
<span id="cb26-2">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log1p)</span>
<span id="cb26-3">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log1p)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#from zero-inflated to one-inflated</span></span>
<span id="cb26-6">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>].hist()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-19-output-1.png" width="583" height="415" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that this is the best performing approach so far, which is one of the reasons why so many scientists end up going for this not-entirely-correct approach.</p>
<div id="0898834d" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log1p'</span>]],</span>
<span id="cb27-2">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb27-3">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb27-4">                                                      )</span>
<span id="cb27-5"></span>
<span id="cb27-6">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_df[selected_features])</span>
<span id="cb27-7">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.expm1)</span></code></pre></div>
</details>
</div>
<div id="4f365169" class="cell" data-execution_count="20">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">metric_log1p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>])</span>
<span id="cb28-2">metric_log1p[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log1p'</span></span>
<span id="cb28-3">metric_log1p</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>{'root_mean_squared_error': 3725.342295894091,
 'mean_squared_error': 13878175.221577456,
 'mean_absolute_error': 618.9768466651894,
 'r2': 0.14190585634701047,
 'pearsonr': 0.5817166874396966,
 'spearmanr': 0.5338156315937898,
 'median_absolute_error': 89.55495441784018,
 'earths_mover_distance': 581.0494444960044,
 'model': 'log1p'}</code></pre>
</div>
</div>
</section>
<section id="hurdle-model" class="level2">
<h2 class="anchored" data-anchor-id="hurdle-model">Hurdle Model</h2>
<p>Hurdle model is a two-stage approach that handles zero inflation by first having a classification model to predict if the outcome is zero or not, then a regression model, trained only on examples with actual non-zero outcomes, to fit a log-transformed outcome. When retransforming the predictions from log to non-log numbers, we perform correction of underestimation using Duan’s method. During inference time, we multiply the predictions from the classification and corrected regression model.</p>
<div id="2c9204b8" class="cell" data-execution_count="21">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">train_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df.TargetSales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb30-2">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.TargetSales.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4">predictor_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>).fit(train_df[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>]],</span>
<span id="cb30-5">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb30-6">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb30-7">                                                      )</span>
<span id="cb30-8">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_binary'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_cls.predict(test_df[selected_features])</span></code></pre></div>
</details>
</div>
<p>For our splits, 51.42% of train and 53.05% of test include customers with non-zero purchase outcome. As with all two-stage approaches, we need to make sure the intermediate model performs reasonably in classifying zero/non-zero outcomes.</p>
<div id="0e36c242" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">caluclate_classification_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_purchase'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_binary'</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'accuracy': 0.6918604651162791,
 'precision': 0.6941069004479309,
 'recall': 0.6918604651162791,
 'f1_score': 0.6921418829824787,
 'confusion_matrix': array([[229,  94],
        [118, 247]])}</code></pre>
</div>
</div>
<div id="df682b83" class="cell" data-execution_count="23">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">train_df_nonzero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[train_df.has_purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-2">test_df_nonzero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[test_df.has_purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#log</span></span>
<span id="cb33-5">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log)</span>
<span id="cb33-6">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.log)</span></code></pre></div>
</details>
</div>
<p>After that, we perform log-transformed regression on the examples with non-zero outcome (1,414 examples in train). Without the need to worry about <code>ln(0)</code> outcome, the regression is much more straightforward albeit with fewer examples to train on.</p>
<div id="16f28c1d" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>].hist()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-25-output-1.png" width="575" height="415" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="d9b71569" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">predictor_reg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>).fit(train_df_nonzero[selected_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>]],</span>
<span id="cb35-2">                                                      presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preset,</span>
<span id="cb35-3">                                                      excluded_model_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NN_TORCH'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FASTAI'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KNN'</span>],</span>
<span id="cb35-4">                                                      )</span>
<span id="cb35-5">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(test_df_nonzero[selected_features])</span>
<span id="cb35-6">test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb35-7"></span>
<span id="cb35-8">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(test_df[selected_features])</span>
<span id="cb35-9">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb35-10"></span>
<span id="cb35-11">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.pred_binary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp</span></code></pre></div>
</details>
</div>
<p>For inference, we combine the binary prediction (purchase/no purchase) from the classification model with the re-transformed (exponentialized) numerical prediction from the regression model by simply multiplying them together. As you can see, this approach yields the best performance so far and this is where I used to think everything has been accounted for.</p>
<div id="5bd23ed2" class="cell" data-execution_count="26">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">metric_hurdle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>])</span>
<span id="cb36-2">metric_hurdle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle'</span></span>
<span id="cb36-3">metric_hurdle</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>{'root_mean_squared_error': 3171.760744960863,
 'mean_squared_error': 10060066.22327469,
 'mean_absolute_error': 584.9162934881963,
 'r2': 0.3779813431428882,
 'pearsonr': 0.6769697889999318,
 'spearmanr': 0.5107083593715698,
 'median_absolute_error': 199.1780137692856,
 'earths_mover_distance': 286.381442541919,
 'model': 'hurdle'}</code></pre>
</div>
</div>
</section>
<section id="but-wait-there-is-moreーenter-naihua-duan" class="level2">
<h2 class="anchored" data-anchor-id="but-wait-there-is-moreーenter-naihua-duan">But Wait, There Is MoreーEnter Naihua Duan</h2>
<p>In the previous section, we have blissfully assumed that we can freely log-transform and re-transform the outcome during training and inference without any bias. This is not the case as there is a small bias generated in the process due to the error term.</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(y)%20=%20f(X)%20+%20%5Cepsilon"></p>
<p>where</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?y"> is actual outcome.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?X"> is the features.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(.)"> is a trained model.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is the error term.</p></li>
</ul>
<p>when re-transforming</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ay%20&amp;=%20exp(ln(y))%20%5C%5C%0A&amp;=%20exp(f(X)%20+%20%5Cepsilon%20)%20%5C%5C%0A&amp;=%20exp(f(X))%20%5Ccdot%20exp(%5Cepsilon)%20%5C%5C%0AE%5By%5D%20&amp;=%20E%5Bexp(f(X))%5D%20%5Ccdot%20E%5Bexp(%5Cepsilon)%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>The average treatment affect (ATE; <img src="https://latex.codecogs.com/png.latex?E%5By%5D">) is underestimated by <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D">. <a href="https://en.wikipedia.org/wiki/Naihua_Duan">Naihua Duan (段乃華)</a>, a Taiwanese biostatistician, suggested a consistent estimator of <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D"> in <a href="https://www.jstor.org/stable/2288126">his 1983 work</a> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Chat%20%5Clambda%20&amp;=%20E%5Bexp(ln(y)%20-%20ln(%5Chat%20y))%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>where</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Clambda"> is the Duan’s smearing estimator of the bias from re-transformation <img src="https://latex.codecogs.com/png.latex?E%5Bexp(%5Cepsilon)%5D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Chat%20y"> is the prediction aka <img src="https://latex.codecogs.com/png.latex?f(X)"></p></li>
</ul>
<pre><code>Fun Fact: If you assume Duan were a western name, you would have been 
pronouncing the method's name incorrectly since it should be [twàn]'s 
method, NOT /dwɑn/'s method.</code></pre>
<p>Before we proceed, the formulation of Duan’s smearing estimator assumes that estimates of error terms (residuals) for log predictions be <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">independent and identically distributed</a>. Since we are dealing with individual customers, independence can be assumed. However, if we look at the plot of residuals vs predicted log values (based on training set), we can see that they do not look particularly identically distributed.</p>
<div id="67cc0233" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot residual and predicted log value</span></span>
<span id="cb39-2">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(train_df_nonzero[selected_features])</span>
<span id="cb39-3">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residual_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>])</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the scatter plot</span></span>
<span id="cb39-6">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residual_log'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_df_nonzero)</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the Lowess smoothing line</span></span>
<span id="cb39-9">sns.regplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residual_log'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_df_nonzero, scatter_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>}, line_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>})</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/sales_prediction/index_files/figure-html/cell-28-output-1.png" width="587" height="429" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Although note that <a href="https://en.wikipedia.org/wiki/White_test">White test</a> does not reject the null hypothesis of the residuals being homoscedastic in reference to the features. This counterintuitive result might stem from the fact that White test is assuming linear or quadratic relationships between outcome and features while the residuals are derived from a stacked ensemble of decision trees.</p>
<div id="34b7aecb" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">white_stat, white_p_value, _, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> het_white(train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residual_log'</span>], </span>
<span id="cb40-2">                                            train_df_nonzero[selected_features])</span>
<span id="cb40-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"White Test Statistic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>white_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb40-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"P-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>white_p_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>White Test Statistic: 129.31318320644837
P-value: 0.8761278601130765</code></pre>
</div>
</div>
<p>Our choice is to either trust the White test and <del>pretend</del> assume everything is fine; or trust our eyes and replace the non-zero regression model with one that produces iid residuals such as <a href="https://en.wikipedia.org/wiki/Generalized_least_squares">generalized least squares (GLS)</a> with heteroscedasticity-robust standard errors. The tradeoff is that often models that produce homoscedastic residuals perform worse in terms of predictive power (see example of GLS implementation in <a href="https://github.com/cstorm125/cstorm125.github.io/blob/main/notebook/sales_prediction.ipynb">Assumption on Indepedent and Identically Distributed Residuals section of the notebook</a>).</p>
<p>Assuming we trust the White test, we can easily derive Duan’s smearing estimator by taking mean of error between actual and predicted <code>TargetSales</code> in the training set.</p>
<div id="1af5139d" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor_reg.predict(train_df_nonzero[selected_features])</span>
<span id="cb42-2">train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.exp)</span>
<span id="cb42-3"></span>
<span id="cb42-4">smearing_estimator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.exp(train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales_log'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_df_nonzero[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log'</span>]))</span>
<span id="cb42-5">smearing_estimator</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>1.2280991653046711</code></pre>
</div>
</div>
<p>We multiply this to the predictions of the hurdle model to correct the underestimation due to re-transformation bias.</p>
<div id="f713e918" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp_corrected'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log_exp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smearing_estimator</span>
<span id="cb44-2">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.pred_binary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp_corrected</span>
<span id="cb44-3"></span>
<span id="cb44-4">metric_hurdle_corrected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>])</span>
<span id="cb44-5">metric_hurdle_corrected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle_corrected'</span></span>
<span id="cb44-6">metric_hurdle_corrected</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>{'root_mean_squared_error': 3055.3207868281233,
 'mean_squared_error': 9334985.110424023,
 'mean_absolute_error': 613.3946643257099,
 'r2': 0.42281345159207295,
 'pearsonr': 0.6769697889999318,
 'spearmanr': 0.5107083593715698,
 'median_absolute_error': 232.55557358084502,
 'earths_mover_distance': 241.61839859133218,
 'model': 'hurdle_corrected'}</code></pre>
</div>
</div>
</section>
<section id="the-eval-bar" class="level2">
<h2 class="anchored" data-anchor-id="the-eval-bar">The Eval Bar</h2>
<p>We can see that the hurdle model with Duan’s correction performs best across majority of the metrics. We will now deep dive on metrics where it did not to understand the caveats when taking this approach.</p>
<div id="f76de7a5" class="cell" data-execution_count="31">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">metric_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([metric_baseline,</span>
<span id="cb46-2">                       metric_winsorized,</span>
<span id="cb46-3">                       metric_log1p,</span>
<span id="cb46-4">                       metric_hurdle,</span>
<span id="cb46-5">                       metric_hurdle_corrected,])</span>
<span id="cb46-6"></span>
<span id="cb46-7">rank_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric_df.copy()</span>
<span id="cb46-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> metric_df.columns.tolist()[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb46-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearsonr'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearmanr'</span>]:</span>
<span id="cb46-10">        rank_df[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df[col].rank(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb46-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb46-12">        rank_df[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df[col].rank(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb46-13">rank_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df.drop(metric_df.columns.tolist()[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-14">rank_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg_rank'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-15">rank_df.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">root_mean_squared_error_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_squared_error_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_absolute_error_rank</td>
<td>5.0</td>
<td>4.0</td>
<td>3.0</td>
<td>1.0</td>
<td>2.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">r2_rank</td>
<td>2.0</td>
<td>4.0</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pearsonr_rank</td>
<td>3.0</td>
<td>5.0</td>
<td>4.0</td>
<td>1.5</td>
<td>1.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">spearmanr_rank</td>
<td>5.0</td>
<td>4.0</td>
<td>1.0</td>
<td>2.5</td>
<td>2.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">median_absolute_error_rank</td>
<td>5.0</td>
<td>3.0</td>
<td>1.0</td>
<td>2.0</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">earths_mover_distance_rank</td>
<td>3.0</td>
<td>4.0</td>
<td>5.0</td>
<td>2.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">avg_rank</td>
<td>3.375</td>
<td>4.0</td>
<td>3.625</td>
<td>2.25</td>
<td>1.75</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="523aec69" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">metric_df.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">root_mean_squared_error</td>
<td>3162.478744</td>
<td>3623.576378</td>
<td>3725.342296</td>
<td>3171.760745</td>
<td>3055.320787</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_squared_error</td>
<td>10001271.807776</td>
<td>13130305.763947</td>
<td>13878175.221577</td>
<td>10060066.223275</td>
<td>9334985.110424</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_absolute_error</td>
<td>715.644266</td>
<td>627.788007</td>
<td>618.976847</td>
<td>584.916293</td>
<td>613.394664</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">r2</td>
<td>0.381617</td>
<td>0.188147</td>
<td>0.141906</td>
<td>0.377981</td>
<td>0.422813</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pearsonr</td>
<td>0.619072</td>
<td>0.575799</td>
<td>0.581717</td>
<td>0.67697</td>
<td>0.67697</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">spearmanr</td>
<td>0.470085</td>
<td>0.504302</td>
<td>0.533816</td>
<td>0.510708</td>
<td>0.510708</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">median_absolute_error</td>
<td>232.982083</td>
<td>219.622481</td>
<td>89.554954</td>
<td>199.178014</td>
<td>232.555574</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">earths_mover_distance</td>
<td>287.777288</td>
<td>432.128843</td>
<td>581.049444</td>
<td>286.381443</td>
<td>241.618399</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="why-duans-correction-results-in-slightly-worse-mae" class="level3">
<h3 class="anchored" data-anchor-id="why-duans-correction-results-in-slightly-worse-mae">Why Duan’s Correction Results in Slightly Worse MAE?</h3>
<p>Duan’s method adjusts for underestimation from re-transformation of log outcome. This could lead to smaller extreme errors, but more frequent occurrences of less extreme ones. We verify this hypothesis by comparing mean absolute error before and after transformation for errors originally under and over 99th percentile. We confirm that is the case for our problem.</p>
<div id="0e41bb6d" class="cell" data-execution_count="33">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">err_hurdle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb48-2">err_hurdle_corrected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of errors for Hurdle model without correction'</span>)</span>
<span id="cb48-5">err_hurdle.describe(percentiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>]) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Distribution of errors for Hurdle model without correction</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>count      688.000000
mean       584.916293
std       3119.628924
min          0.000000
25%          0.000000
50%        199.178014
75%        475.603446
90%        862.530026
95%       1237.540954
99%       6763.777844
max      55731.205996
dtype: float64</code></pre>
</div>
</div>
<div id="657c4869" class="cell" data-execution_count="34">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hurdle Model without correction'</span>)</span>
<span id="cb51-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error under 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb51-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error over 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb51-4"></span>
<span id="cb51-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hurdle Model with correction'</span>)</span>
<span id="cb51-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error under 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle_corrected[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb51-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean absolute error over 99th percentile: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err_hurdle_corrected[err_hurdle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6763.777844</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hurdle Model without correction
Mean absolute error under 99th percentile: 355.4918014848842
Mean absolute error over 99th percentile: 22904.641872667555
Hurdle Model with correction
Mean absolute error under 99th percentile: 392.7718802742851
Mean absolute error over 99th percentile: 22076.839798471465</code></pre>
</div>
</div>
</section>
<section id="importance-of-classification-model" class="level3">
<h3 class="anchored" data-anchor-id="importance-of-classification-model">Importance of Classification Model</h3>
<p>The overperformance of log-transform regression over both hurdle model approarches in Spearman’s rank correlation and median absolute error demonstrates the importance of a classification model. At first glance, it is perplexing since we have just spent a large portion of this article to justify that hurdle models handle zero inflation better and re-transformation without Duan’s method is biased. However, it becomes clear once you compare performance of the hurdle model with a classification model (f1 = 0.69) and a hypothetical, perfect classification model. Other metrics also improved but not nearly as drastic as MedAE and Spearman’s rank correlation.</p>
<div id="87e3baa5" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected_perfect_cls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.has_purchase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> test_df.pred_log_exp_corrected</span>
<span id="cb53-2">metric_hurdle_corrected_perfect_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_regression_metrics(test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>], test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected_perfect_cls'</span>])</span>
<span id="cb53-3">metric_hurdle_corrected_perfect_cls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hurdle_corrected_perfect_cls'</span></span>
<span id="cb53-4"></span>
<span id="cb53-5">metric_df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([metric_baseline,</span>
<span id="cb53-6">                       metric_winsorized,</span>
<span id="cb53-7">                       metric_log1p,</span>
<span id="cb53-8">                       metric_hurdle,</span>
<span id="cb53-9">                       metric_hurdle_corrected,</span>
<span id="cb53-10">                       metric_hurdle_corrected_perfect_cls,])</span>
<span id="cb53-11">metric_df2.transpose()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">root_mean_squared_error</td>
<td>3162.478744</td>
<td>3623.576378</td>
<td>3725.342296</td>
<td>3171.760745</td>
<td>3055.320787</td>
<td>3030.854831</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean_squared_error</td>
<td>10001271.807776</td>
<td>13130305.763947</td>
<td>13878175.221577</td>
<td>10060066.223275</td>
<td>9334985.110424</td>
<td>9186081.006625</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean_absolute_error</td>
<td>715.644266</td>
<td>627.788007</td>
<td>618.976847</td>
<td>584.916293</td>
<td>613.394664</td>
<td>479.558294</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">r2</td>
<td>0.381617</td>
<td>0.188147</td>
<td>0.141906</td>
<td>0.377981</td>
<td>0.422813</td>
<td>0.43202</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pearsonr</td>
<td>0.619072</td>
<td>0.575799</td>
<td>0.581717</td>
<td>0.67697</td>
<td>0.67697</td>
<td>0.687639</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">spearmanr</td>
<td>0.470085</td>
<td>0.504302</td>
<td>0.533816</td>
<td>0.510708</td>
<td>0.510708</td>
<td>0.929419</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">median_absolute_error</td>
<td>232.982083</td>
<td>219.622481</td>
<td>89.554954</td>
<td>199.178014</td>
<td>232.555574</td>
<td>34.991964</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">earths_mover_distance</td>
<td>287.777288</td>
<td>432.128843</td>
<td>581.049444</td>
<td>286.381443</td>
<td>241.618399</td>
<td>234.587018</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">model</td>
<td>baseline</td>
<td>winsorized</td>
<td>log1p</td>
<td>hurdle</td>
<td>hurdle_corrected</td>
<td>hurdle_corrected_perfect_cls</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="remember-what-problem-we-are-solving" class="level3">
<h3 class="anchored" data-anchor-id="remember-what-problem-we-are-solving">Remember What Problem We Are Solving</h3>
<p>One last thing to remember is that we are trying to predict <strong>sales of each individual customer</strong>, not <strong>total sales of all customers</strong>. If we look at aggregated mean or sum of actual sales vs predicted sales, baseline regression performs best by far. This is due to the fact that without any constraints a regressor only minimizes the MSE loss and usually ends up predicting values around the mean to balance between under- and over-predictions. However, this level of prediction is often not very useful as a single point. Imagine you want to give promotions with higher or lower spend thresholds to customers according to their purchasing power; you will not be able to do so with a model that is accurate on aggregate but not so much on individual customers.</p>
<div id="658fb602" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">test_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetSales'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_baseline'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_winsorized'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_log1p_expm1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_hurdle_corrected'</span>]].mean()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>TargetSales              760.558808
pred_baseline            791.043945
pred_winsorized          508.281555
pred_log1p_expm1         186.200281
pred_hurdle              527.286811
pred_hurdle_corrected    647.560493
dtype: float64</code></pre>
</div>
</div>
</section>
</section>
<section id="closing-remarks" class="level2">
<h2 class="anchored" data-anchor-id="closing-remarks">Closing Remarks</h2>
<p>And this is how you predict how much a customer will spend in the least wrong way. My hope is that you will not need to spend ten years in data science to find out how to do it like I did.</p>


</section>

 ]]></description>
  <category>retail</category>
  <category>zero-inflated</category>
  <category>long/fat-tailed</category>
  <category>hurdle</category>
  <guid>https://cstorm125.github.io/posts/sales_prediction/</guid>
  <pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cstorm125.github.io/posts/sales_prediction/featured_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to Have a Robustly Interesting Career in Data Science</title>
  <dc:creator>cstorm125 </dc:creator>
  <link>https://cstorm125.github.io/posts/interesting_career/</link>
  <description><![CDATA[ 




<p>I have been a data scientist👨‍💻 ever since around the time <a href="https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century">HBR popularized the term in its job sexiness article</a>. My run started out of necessity, since back then it was very difficult to get a job when you were an Econ graduate with an eclectic mix of skills in statistics and programming; suddenly it became one of the most sought-after skill combinations on the market. It has been about a decade since. Lately, I have been asked about how to have a successful career in the field. Success is quite the subjective term, but let me try to formulate my thoughts on how to keep it interesting doing what I love in spite of external circumstances.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cstorm125.github.io/posts/interesting_career/featured_image.jpg" class="img-fluid figure-img"></p>
<figcaption>featured_image</figcaption>
</figure>
</div>
<p><strong>Objective Function</strong> As any half decent scientist would do, let us begin at the desirable end state and work backwards. I have always optimized for business impact. I relish in seeing my models bring joy to customers, efficiency to selling partners, and productivity to fellow builders. Something as simple as seeing a widget on the home screen powered by one of my models makes my day. Thankfully, my data products have consistently delivered at least double-digit millions of dollars in value (cost savings and/or top-line uplifts) annually. And this keeps me sane in the midst of all the [insert-your-hype-keyword] FOMO. The key is to find an objective function that really matters to you, and not fall for the vanity metrics. For instance, I have written some research papers and did some fun open source projects, but a lot of these feel too abstract to quantify. If I were to try to optimize for them, I would likely end up chasing after citations, Github stars, or other arbitrary numbers. I would overfit them and the activities of writing papers and contributing to open source projects themselves would become secondary to the vanity metrics. This will not be the case if writing great research papers is something that really matters to you. You need to find an objective function that correlates almost perfectly with the joy you experience as a scientist.</p>
<p><strong>Build with Stakes</strong> As you move to fulfill your objectives, it is important that you do so by building concrete products with high enough stakes. I strongly believe this is the only way to level up as a scientist. The anti-thesis to this is to get stuck in the learning loop; you keep taking online courses, overfitting toy datasets, hunting for certificates, and you wonder why your career is not going anywhere while the snakeoil vendors keep buying new sports cars. It is because these learning materials when taken in excess only serve to make you feel good about yourself. Yes, you learned something new and yes, you might have built some capstone projects. But these have virtually no consequence if you fail. In fact, they are structured in a way that it is more difficult for you to fail. You stop thinking for yourself and just enjoy the pseudo-intellectual force feeding. It comes as no surprise that you need to think for yourself to grow as a scientist. The stakes do not have to be monetary. It can be anything that matters if you fail to complete your tasks. Enter a competition that evaluates scientific prowess (avoid slide show contests), create an open source project that helps with your hobbies, or most likely propose a project at work that affects your compensation/promotion evaluation. Conduct experiments, write production codes, and document everything either as technical reports or research papers. Hold yourself to the highest standards.</p>
<p><strong>Find The Right Party</strong> The most important person in your career is your mentor. Ideally, you want to find the person whose objective function aligns well with yours and have a clear track records of building with stakes. At different stages, you might have more than one for different aspects such as one for business and another for research, or for different perspectives. But if I were to be honest, you would be extremely lucky to find one at all. Your mentor should not only be the person you aspire to be, but also someone you think you would have a chance to overcome in a fair fight one day. Once you have found such person, you would usually be surrounded by good company. Humans are social animals and no matter how hard you try to follow your objective function and hold yourself to the highest standards, it will be almost impossible without people with similar mentality by your side. This is the most luck-dependent component. Be grateful if you can find the right party and be the party people would like to join one day.</p>
<p><strong>Integrity</strong> Every action has a price. We are in a privileged position to have a skillset that often determines the outcome of the business and rarely people question. You could gain a small but decisive advantage almost scotch-free; keep randomizing the seeds in validation splits and/or model initialization to get a marginally good result in offline evaluation to justify a launch, slice and dice the control and treatment groups to get a statistically significant result, pick a seemingly strong model that is out-of-domain to compare with your specifically finetuned model and call your model SoTA, the list goes on. But you should never do any of this, not only because you are a good person who does not want to lose sleep, but because you will eventually pay the price. I can guarantee there is always a price. Any useful scientist will call you out on any of the examples I gave; if not, time and repeated online experiments will expose your fudging of the numbers. Your choice is to keep job hopping before this happens and keep the career Ponzi scheme alive. Or simply be an honest scientist, enjoys the scientific process, learns from your mistakes, and grow.</p>
<p><strong>Side Quests</strong> Whatever you do, there is always a room for side quests. Your main quest is to satisfy your objective function, but as any good optimization method, exploration is needed to ensure a robust solution. A side quest is an excuse to try the new technology you have been raring to get your hands on, a low-stake confidence builder, and most importantly a great way to remind us how much we love the craft. These are things I hold closest to my heart as I navigate the fast-paced, uncertainty-filled landscape of data science. I have conducted a few dozens of model validation experiments and each one is never less anxiety-inducing than the last. We are in the business of results and results can be brutal. In these turbulent economic conditions, I hope these templates can be useful to you as much as they were to me in surviving some unpleasant situations that may be beyond our control and continuing to do the things we love.</p>
<p>Be safe from scammers and snakeoil vendors. And I will see you around.</p>



 ]]></description>
  <category>career</category>
  <guid>https://cstorm125.github.io/posts/interesting_career/</guid>
  <pubDate>Sat, 23 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cstorm125.github.io/posts/interesting_career/featured_image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
